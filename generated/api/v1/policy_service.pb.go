// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/policy_service.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DryRunResponse struct {
	Alerts               []*DryRunResponse_Alert `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DryRunResponse) Reset()         { *m = DryRunResponse{} }
func (m *DryRunResponse) String() string { return proto.CompactTextString(m) }
func (*DryRunResponse) ProtoMessage()    {}
func (*DryRunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{0}
}
func (m *DryRunResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DryRunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DryRunResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DryRunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DryRunResponse.Merge(m, src)
}
func (m *DryRunResponse) XXX_Size() int {
	return m.Size()
}
func (m *DryRunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DryRunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DryRunResponse proto.InternalMessageInfo

func (m *DryRunResponse) GetAlerts() []*DryRunResponse_Alert {
	if m != nil {
		return m.Alerts
	}
	return nil
}

func (m *DryRunResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DryRunResponse) Clone() *DryRunResponse {
	if m == nil {
		return nil
	}
	cloned := new(DryRunResponse)
	*cloned = *m

	if m.Alerts != nil {
		cloned.Alerts = make([]*DryRunResponse_Alert, len(m.Alerts))
		for idx, v := range m.Alerts {
			cloned.Alerts[idx] = v.Clone()
		}
	}
	return cloned
}

type DryRunResponse_Alert struct {
	Deployment           string   `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Violations           []string `protobuf:"bytes,2,rep,name=violations,proto3" json:"violations,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DryRunResponse_Alert) Reset()         { *m = DryRunResponse_Alert{} }
func (m *DryRunResponse_Alert) String() string { return proto.CompactTextString(m) }
func (*DryRunResponse_Alert) ProtoMessage()    {}
func (*DryRunResponse_Alert) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{0, 0}
}
func (m *DryRunResponse_Alert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DryRunResponse_Alert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DryRunResponse_Alert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DryRunResponse_Alert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DryRunResponse_Alert.Merge(m, src)
}
func (m *DryRunResponse_Alert) XXX_Size() int {
	return m.Size()
}
func (m *DryRunResponse_Alert) XXX_DiscardUnknown() {
	xxx_messageInfo_DryRunResponse_Alert.DiscardUnknown(m)
}

var xxx_messageInfo_DryRunResponse_Alert proto.InternalMessageInfo

func (m *DryRunResponse_Alert) GetDeployment() string {
	if m != nil {
		return m.Deployment
	}
	return ""
}

func (m *DryRunResponse_Alert) GetViolations() []string {
	if m != nil {
		return m.Violations
	}
	return nil
}

func (m *DryRunResponse_Alert) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DryRunResponse_Alert) Clone() *DryRunResponse_Alert {
	if m == nil {
		return nil
	}
	cloned := new(DryRunResponse_Alert)
	*cloned = *m

	if m.Violations != nil {
		cloned.Violations = make([]string, len(m.Violations))
		copy(cloned.Violations, m.Violations)
	}
	return cloned
}

type JobId struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobId) Reset()         { *m = JobId{} }
func (m *JobId) String() string { return proto.CompactTextString(m) }
func (*JobId) ProtoMessage()    {}
func (*JobId) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{1}
}
func (m *JobId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobId.Merge(m, src)
}
func (m *JobId) XXX_Size() int {
	return m.Size()
}
func (m *JobId) XXX_DiscardUnknown() {
	xxx_messageInfo_JobId.DiscardUnknown(m)
}

var xxx_messageInfo_JobId proto.InternalMessageInfo

func (m *JobId) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobId) MessageClone() proto.Message {
	return m.Clone()
}
func (m *JobId) Clone() *JobId {
	if m == nil {
		return nil
	}
	cloned := new(JobId)
	*cloned = *m

	return cloned
}

type DryRunJobStatusResponse struct {
	Pending              bool            `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	Result               *DryRunResponse `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DryRunJobStatusResponse) Reset()         { *m = DryRunJobStatusResponse{} }
func (m *DryRunJobStatusResponse) String() string { return proto.CompactTextString(m) }
func (*DryRunJobStatusResponse) ProtoMessage()    {}
func (*DryRunJobStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{2}
}
func (m *DryRunJobStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DryRunJobStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DryRunJobStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DryRunJobStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DryRunJobStatusResponse.Merge(m, src)
}
func (m *DryRunJobStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *DryRunJobStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DryRunJobStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DryRunJobStatusResponse proto.InternalMessageInfo

func (m *DryRunJobStatusResponse) GetPending() bool {
	if m != nil {
		return m.Pending
	}
	return false
}

func (m *DryRunJobStatusResponse) GetResult() *DryRunResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DryRunJobStatusResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DryRunJobStatusResponse) Clone() *DryRunJobStatusResponse {
	if m == nil {
		return nil
	}
	cloned := new(DryRunJobStatusResponse)
	*cloned = *m

	cloned.Result = m.Result.Clone()
	return cloned
}

type PolicyCategoriesResponse struct {
	Categories           []string `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyCategoriesResponse) Reset()         { *m = PolicyCategoriesResponse{} }
func (m *PolicyCategoriesResponse) String() string { return proto.CompactTextString(m) }
func (*PolicyCategoriesResponse) ProtoMessage()    {}
func (*PolicyCategoriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{3}
}
func (m *PolicyCategoriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyCategoriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyCategoriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyCategoriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyCategoriesResponse.Merge(m, src)
}
func (m *PolicyCategoriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *PolicyCategoriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyCategoriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyCategoriesResponse proto.InternalMessageInfo

func (m *PolicyCategoriesResponse) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *PolicyCategoriesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PolicyCategoriesResponse) Clone() *PolicyCategoriesResponse {
	if m == nil {
		return nil
	}
	cloned := new(PolicyCategoriesResponse)
	*cloned = *m

	if m.Categories != nil {
		cloned.Categories = make([]string, len(m.Categories))
		copy(cloned.Categories, m.Categories)
	}
	return cloned
}

type EnableDisablePolicyNotificationRequest struct {
	PolicyId             string   `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	NotifierIds          []string `protobuf:"bytes,2,rep,name=notifier_ids,json=notifierIds,proto3" json:"notifier_ids,omitempty"`
	Disable              bool     `protobuf:"varint,3,opt,name=disable,proto3" json:"disable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableDisablePolicyNotificationRequest) Reset() {
	*m = EnableDisablePolicyNotificationRequest{}
}
func (m *EnableDisablePolicyNotificationRequest) String() string { return proto.CompactTextString(m) }
func (*EnableDisablePolicyNotificationRequest) ProtoMessage()    {}
func (*EnableDisablePolicyNotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{4}
}
func (m *EnableDisablePolicyNotificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableDisablePolicyNotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableDisablePolicyNotificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableDisablePolicyNotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableDisablePolicyNotificationRequest.Merge(m, src)
}
func (m *EnableDisablePolicyNotificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *EnableDisablePolicyNotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableDisablePolicyNotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableDisablePolicyNotificationRequest proto.InternalMessageInfo

func (m *EnableDisablePolicyNotificationRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *EnableDisablePolicyNotificationRequest) GetNotifierIds() []string {
	if m != nil {
		return m.NotifierIds
	}
	return nil
}

func (m *EnableDisablePolicyNotificationRequest) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *EnableDisablePolicyNotificationRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *EnableDisablePolicyNotificationRequest) Clone() *EnableDisablePolicyNotificationRequest {
	if m == nil {
		return nil
	}
	cloned := new(EnableDisablePolicyNotificationRequest)
	*cloned = *m

	if m.NotifierIds != nil {
		cloned.NotifierIds = make([]string, len(m.NotifierIds))
		copy(cloned.NotifierIds, m.NotifierIds)
	}
	return cloned
}

type ListPoliciesResponse struct {
	Policies             []*storage.ListPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListPoliciesResponse) Reset()         { *m = ListPoliciesResponse{} }
func (m *ListPoliciesResponse) String() string { return proto.CompactTextString(m) }
func (*ListPoliciesResponse) ProtoMessage()    {}
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{5}
}
func (m *ListPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPoliciesResponse.Merge(m, src)
}
func (m *ListPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPoliciesResponse proto.InternalMessageInfo

func (m *ListPoliciesResponse) GetPolicies() []*storage.ListPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ListPoliciesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListPoliciesResponse) Clone() *ListPoliciesResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListPoliciesResponse)
	*cloned = *m

	if m.Policies != nil {
		cloned.Policies = make([]*storage.ListPolicy, len(m.Policies))
		for idx, v := range m.Policies {
			cloned.Policies[idx] = v.Clone()
		}
	}
	return cloned
}

type PostPolicyRequest struct {
	Policy                 *storage.Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	EnableStrictValidation bool            `protobuf:"varint,2,opt,name=enable_strict_validation,json=enableStrictValidation,proto3" json:"enable_strict_validation,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}        `json:"-"`
	XXX_unrecognized       []byte          `json:"-"`
	XXX_sizecache          int32           `json:"-"`
}

func (m *PostPolicyRequest) Reset()         { *m = PostPolicyRequest{} }
func (m *PostPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*PostPolicyRequest) ProtoMessage()    {}
func (*PostPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{6}
}
func (m *PostPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostPolicyRequest.Merge(m, src)
}
func (m *PostPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostPolicyRequest proto.InternalMessageInfo

func (m *PostPolicyRequest) GetPolicy() *storage.Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *PostPolicyRequest) GetEnableStrictValidation() bool {
	if m != nil {
		return m.EnableStrictValidation
	}
	return false
}

func (m *PostPolicyRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PostPolicyRequest) Clone() *PostPolicyRequest {
	if m == nil {
		return nil
	}
	cloned := new(PostPolicyRequest)
	*cloned = *m

	cloned.Policy = m.Policy.Clone()
	return cloned
}

type PatchPolicyRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to SetDisabled:
	//	*PatchPolicyRequest_Disabled
	SetDisabled          isPatchPolicyRequest_SetDisabled `protobuf_oneof:"set_disabled"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PatchPolicyRequest) Reset()         { *m = PatchPolicyRequest{} }
func (m *PatchPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*PatchPolicyRequest) ProtoMessage()    {}
func (*PatchPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{7}
}
func (m *PatchPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatchPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PatchPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PatchPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchPolicyRequest.Merge(m, src)
}
func (m *PatchPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *PatchPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PatchPolicyRequest proto.InternalMessageInfo

type isPatchPolicyRequest_SetDisabled interface {
	isPatchPolicyRequest_SetDisabled()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isPatchPolicyRequest_SetDisabled
}

type PatchPolicyRequest_Disabled struct {
	Disabled bool `protobuf:"varint,2,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}

func (*PatchPolicyRequest_Disabled) isPatchPolicyRequest_SetDisabled() {}
func (m *PatchPolicyRequest_Disabled) Clone() isPatchPolicyRequest_SetDisabled {
	if m == nil {
		return nil
	}
	cloned := new(PatchPolicyRequest_Disabled)
	*cloned = *m

	return cloned
}

func (m *PatchPolicyRequest) GetSetDisabled() isPatchPolicyRequest_SetDisabled {
	if m != nil {
		return m.SetDisabled
	}
	return nil
}

func (m *PatchPolicyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PatchPolicyRequest) GetDisabled() bool {
	if x, ok := m.GetSetDisabled().(*PatchPolicyRequest_Disabled); ok {
		return x.Disabled
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PatchPolicyRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PatchPolicyRequest_Disabled)(nil),
	}
}

func (m *PatchPolicyRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PatchPolicyRequest) Clone() *PatchPolicyRequest {
	if m == nil {
		return nil
	}
	cloned := new(PatchPolicyRequest)
	*cloned = *m

	if m.SetDisabled != nil {
		cloned.SetDisabled = m.SetDisabled.Clone()
	}
	return cloned
}

type ExportPoliciesRequest struct {
	PolicyIds            []string `protobuf:"bytes,1,rep,name=policy_ids,json=policyIds,proto3" json:"policy_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportPoliciesRequest) Reset()         { *m = ExportPoliciesRequest{} }
func (m *ExportPoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*ExportPoliciesRequest) ProtoMessage()    {}
func (*ExportPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{8}
}
func (m *ExportPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportPoliciesRequest.Merge(m, src)
}
func (m *ExportPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExportPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExportPoliciesRequest proto.InternalMessageInfo

func (m *ExportPoliciesRequest) GetPolicyIds() []string {
	if m != nil {
		return m.PolicyIds
	}
	return nil
}

func (m *ExportPoliciesRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ExportPoliciesRequest) Clone() *ExportPoliciesRequest {
	if m == nil {
		return nil
	}
	cloned := new(ExportPoliciesRequest)
	*cloned = *m

	if m.PolicyIds != nil {
		cloned.PolicyIds = make([]string, len(m.PolicyIds))
		copy(cloned.PolicyIds, m.PolicyIds)
	}
	return cloned
}

type PolicyError struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyError) Reset()         { *m = PolicyError{} }
func (m *PolicyError) String() string { return proto.CompactTextString(m) }
func (*PolicyError) ProtoMessage()    {}
func (*PolicyError) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{9}
}
func (m *PolicyError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyError.Merge(m, src)
}
func (m *PolicyError) XXX_Size() int {
	return m.Size()
}
func (m *PolicyError) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyError.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyError proto.InternalMessageInfo

func (m *PolicyError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PolicyError) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PolicyError) Clone() *PolicyError {
	if m == nil {
		return nil
	}
	cloned := new(PolicyError)
	*cloned = *m

	return cloned
}

type ExportPolicyError struct {
	PolicyId             string       `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Error                *PolicyError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ExportPolicyError) Reset()         { *m = ExportPolicyError{} }
func (m *ExportPolicyError) String() string { return proto.CompactTextString(m) }
func (*ExportPolicyError) ProtoMessage()    {}
func (*ExportPolicyError) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{10}
}
func (m *ExportPolicyError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportPolicyError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportPolicyError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportPolicyError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportPolicyError.Merge(m, src)
}
func (m *ExportPolicyError) XXX_Size() int {
	return m.Size()
}
func (m *ExportPolicyError) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportPolicyError.DiscardUnknown(m)
}

var xxx_messageInfo_ExportPolicyError proto.InternalMessageInfo

func (m *ExportPolicyError) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *ExportPolicyError) GetError() *PolicyError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExportPolicyError) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ExportPolicyError) Clone() *ExportPolicyError {
	if m == nil {
		return nil
	}
	cloned := new(ExportPolicyError)
	*cloned = *m

	cloned.Error = m.Error.Clone()
	return cloned
}

type ExportPoliciesErrorList struct {
	Errors               []*ExportPolicyError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ExportPoliciesErrorList) Reset()         { *m = ExportPoliciesErrorList{} }
func (m *ExportPoliciesErrorList) String() string { return proto.CompactTextString(m) }
func (*ExportPoliciesErrorList) ProtoMessage()    {}
func (*ExportPoliciesErrorList) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{11}
}
func (m *ExportPoliciesErrorList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportPoliciesErrorList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportPoliciesErrorList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportPoliciesErrorList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportPoliciesErrorList.Merge(m, src)
}
func (m *ExportPoliciesErrorList) XXX_Size() int {
	return m.Size()
}
func (m *ExportPoliciesErrorList) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportPoliciesErrorList.DiscardUnknown(m)
}

var xxx_messageInfo_ExportPoliciesErrorList proto.InternalMessageInfo

func (m *ExportPoliciesErrorList) GetErrors() []*ExportPolicyError {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *ExportPoliciesErrorList) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ExportPoliciesErrorList) Clone() *ExportPoliciesErrorList {
	if m == nil {
		return nil
	}
	cloned := new(ExportPoliciesErrorList)
	*cloned = *m

	if m.Errors != nil {
		cloned.Errors = make([]*ExportPolicyError, len(m.Errors))
		for idx, v := range m.Errors {
			cloned.Errors[idx] = v.Clone()
		}
	}
	return cloned
}

type PolicyFromSearchRequest struct {
	SearchParams         string   `protobuf:"bytes,1,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyFromSearchRequest) Reset()         { *m = PolicyFromSearchRequest{} }
func (m *PolicyFromSearchRequest) String() string { return proto.CompactTextString(m) }
func (*PolicyFromSearchRequest) ProtoMessage()    {}
func (*PolicyFromSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{12}
}
func (m *PolicyFromSearchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyFromSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyFromSearchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyFromSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyFromSearchRequest.Merge(m, src)
}
func (m *PolicyFromSearchRequest) XXX_Size() int {
	return m.Size()
}
func (m *PolicyFromSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyFromSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyFromSearchRequest proto.InternalMessageInfo

func (m *PolicyFromSearchRequest) GetSearchParams() string {
	if m != nil {
		return m.SearchParams
	}
	return ""
}

func (m *PolicyFromSearchRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PolicyFromSearchRequest) Clone() *PolicyFromSearchRequest {
	if m == nil {
		return nil
	}
	cloned := new(PolicyFromSearchRequest)
	*cloned = *m

	return cloned
}

type ImportPoliciesMetadata struct {
	Overwrite            bool     `protobuf:"varint,1,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportPoliciesMetadata) Reset()         { *m = ImportPoliciesMetadata{} }
func (m *ImportPoliciesMetadata) String() string { return proto.CompactTextString(m) }
func (*ImportPoliciesMetadata) ProtoMessage()    {}
func (*ImportPoliciesMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{13}
}
func (m *ImportPoliciesMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportPoliciesMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportPoliciesMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportPoliciesMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportPoliciesMetadata.Merge(m, src)
}
func (m *ImportPoliciesMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ImportPoliciesMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportPoliciesMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ImportPoliciesMetadata proto.InternalMessageInfo

func (m *ImportPoliciesMetadata) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

func (m *ImportPoliciesMetadata) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ImportPoliciesMetadata) Clone() *ImportPoliciesMetadata {
	if m == nil {
		return nil
	}
	cloned := new(ImportPoliciesMetadata)
	*cloned = *m

	return cloned
}

type ImportPoliciesRequest struct {
	Metadata             *ImportPoliciesMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Policies             []*storage.Policy       `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ImportPoliciesRequest) Reset()         { *m = ImportPoliciesRequest{} }
func (m *ImportPoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*ImportPoliciesRequest) ProtoMessage()    {}
func (*ImportPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{14}
}
func (m *ImportPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportPoliciesRequest.Merge(m, src)
}
func (m *ImportPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImportPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportPoliciesRequest proto.InternalMessageInfo

func (m *ImportPoliciesRequest) GetMetadata() *ImportPoliciesMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ImportPoliciesRequest) GetPolicies() []*storage.Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ImportPoliciesRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ImportPoliciesRequest) Clone() *ImportPoliciesRequest {
	if m == nil {
		return nil
	}
	cloned := new(ImportPoliciesRequest)
	*cloned = *m

	cloned.Metadata = m.Metadata.Clone()
	if m.Policies != nil {
		cloned.Policies = make([]*storage.Policy, len(m.Policies))
		for idx, v := range m.Policies {
			cloned.Policies[idx] = v.Clone()
		}
	}
	return cloned
}

type ImportPolicyError struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Metadata:
	//	*ImportPolicyError_DuplicateName
	//	*ImportPolicyError_ValidationError
	Metadata             isImportPolicyError_Metadata `protobuf_oneof:"metadata"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ImportPolicyError) Reset()         { *m = ImportPolicyError{} }
func (m *ImportPolicyError) String() string { return proto.CompactTextString(m) }
func (*ImportPolicyError) ProtoMessage()    {}
func (*ImportPolicyError) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{15}
}
func (m *ImportPolicyError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportPolicyError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportPolicyError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportPolicyError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportPolicyError.Merge(m, src)
}
func (m *ImportPolicyError) XXX_Size() int {
	return m.Size()
}
func (m *ImportPolicyError) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportPolicyError.DiscardUnknown(m)
}

var xxx_messageInfo_ImportPolicyError proto.InternalMessageInfo

type isImportPolicyError_Metadata interface {
	isImportPolicyError_Metadata()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isImportPolicyError_Metadata
}

type ImportPolicyError_DuplicateName struct {
	DuplicateName string `protobuf:"bytes,3,opt,name=duplicate_name,json=duplicateName,proto3,oneof" json:"duplicate_name,omitempty"`
}
type ImportPolicyError_ValidationError struct {
	ValidationError string `protobuf:"bytes,4,opt,name=validation_error,json=validationError,proto3,oneof" json:"validation_error,omitempty"`
}

func (*ImportPolicyError_DuplicateName) isImportPolicyError_Metadata() {}
func (m *ImportPolicyError_DuplicateName) Clone() isImportPolicyError_Metadata {
	if m == nil {
		return nil
	}
	cloned := new(ImportPolicyError_DuplicateName)
	*cloned = *m

	return cloned
}
func (*ImportPolicyError_ValidationError) isImportPolicyError_Metadata() {}
func (m *ImportPolicyError_ValidationError) Clone() isImportPolicyError_Metadata {
	if m == nil {
		return nil
	}
	cloned := new(ImportPolicyError_ValidationError)
	*cloned = *m

	return cloned
}

func (m *ImportPolicyError) GetMetadata() isImportPolicyError_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ImportPolicyError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ImportPolicyError) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ImportPolicyError) GetDuplicateName() string {
	if x, ok := m.GetMetadata().(*ImportPolicyError_DuplicateName); ok {
		return x.DuplicateName
	}
	return ""
}

func (m *ImportPolicyError) GetValidationError() string {
	if x, ok := m.GetMetadata().(*ImportPolicyError_ValidationError); ok {
		return x.ValidationError
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportPolicyError) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportPolicyError_DuplicateName)(nil),
		(*ImportPolicyError_ValidationError)(nil),
	}
}

func (m *ImportPolicyError) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ImportPolicyError) Clone() *ImportPolicyError {
	if m == nil {
		return nil
	}
	cloned := new(ImportPolicyError)
	*cloned = *m

	if m.Metadata != nil {
		cloned.Metadata = m.Metadata.Clone()
	}
	return cloned
}

type ImportPolicyResponse struct {
	Succeeded            bool                 `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Policy               *storage.Policy      `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	Errors               []*ImportPolicyError `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ImportPolicyResponse) Reset()         { *m = ImportPolicyResponse{} }
func (m *ImportPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*ImportPolicyResponse) ProtoMessage()    {}
func (*ImportPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{16}
}
func (m *ImportPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportPolicyResponse.Merge(m, src)
}
func (m *ImportPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImportPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportPolicyResponse proto.InternalMessageInfo

func (m *ImportPolicyResponse) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func (m *ImportPolicyResponse) GetPolicy() *storage.Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *ImportPolicyResponse) GetErrors() []*ImportPolicyError {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *ImportPolicyResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ImportPolicyResponse) Clone() *ImportPolicyResponse {
	if m == nil {
		return nil
	}
	cloned := new(ImportPolicyResponse)
	*cloned = *m

	cloned.Policy = m.Policy.Clone()
	if m.Errors != nil {
		cloned.Errors = make([]*ImportPolicyError, len(m.Errors))
		for idx, v := range m.Errors {
			cloned.Errors[idx] = v.Clone()
		}
	}
	return cloned
}

type ImportPoliciesResponse struct {
	Responses            []*ImportPolicyResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	AllSucceeded         bool                    `protobuf:"varint,2,opt,name=all_succeeded,json=allSucceeded,proto3" json:"all_succeeded,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ImportPoliciesResponse) Reset()         { *m = ImportPoliciesResponse{} }
func (m *ImportPoliciesResponse) String() string { return proto.CompactTextString(m) }
func (*ImportPoliciesResponse) ProtoMessage()    {}
func (*ImportPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{17}
}
func (m *ImportPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportPoliciesResponse.Merge(m, src)
}
func (m *ImportPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImportPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportPoliciesResponse proto.InternalMessageInfo

func (m *ImportPoliciesResponse) GetResponses() []*ImportPolicyResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *ImportPoliciesResponse) GetAllSucceeded() bool {
	if m != nil {
		return m.AllSucceeded
	}
	return false
}

func (m *ImportPoliciesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ImportPoliciesResponse) Clone() *ImportPoliciesResponse {
	if m == nil {
		return nil
	}
	cloned := new(ImportPoliciesResponse)
	*cloned = *m

	if m.Responses != nil {
		cloned.Responses = make([]*ImportPolicyResponse, len(m.Responses))
		for idx, v := range m.Responses {
			cloned.Responses[idx] = v.Clone()
		}
	}
	return cloned
}

type PolicyFromSearchResponse struct {
	Policy               *storage.Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	AlteredSearchTerms   []string        `protobuf:"bytes,2,rep,name=altered_search_terms,json=alteredSearchTerms,proto3" json:"altered_search_terms,omitempty"`
	HasNestedFields      bool            `protobuf:"varint,3,opt,name=has_nested_fields,json=hasNestedFields,proto3" json:"has_nested_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PolicyFromSearchResponse) Reset()         { *m = PolicyFromSearchResponse{} }
func (m *PolicyFromSearchResponse) String() string { return proto.CompactTextString(m) }
func (*PolicyFromSearchResponse) ProtoMessage()    {}
func (*PolicyFromSearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{18}
}
func (m *PolicyFromSearchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyFromSearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyFromSearchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyFromSearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyFromSearchResponse.Merge(m, src)
}
func (m *PolicyFromSearchResponse) XXX_Size() int {
	return m.Size()
}
func (m *PolicyFromSearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyFromSearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyFromSearchResponse proto.InternalMessageInfo

func (m *PolicyFromSearchResponse) GetPolicy() *storage.Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *PolicyFromSearchResponse) GetAlteredSearchTerms() []string {
	if m != nil {
		return m.AlteredSearchTerms
	}
	return nil
}

func (m *PolicyFromSearchResponse) GetHasNestedFields() bool {
	if m != nil {
		return m.HasNestedFields
	}
	return false
}

func (m *PolicyFromSearchResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PolicyFromSearchResponse) Clone() *PolicyFromSearchResponse {
	if m == nil {
		return nil
	}
	cloned := new(PolicyFromSearchResponse)
	*cloned = *m

	cloned.Policy = m.Policy.Clone()
	if m.AlteredSearchTerms != nil {
		cloned.AlteredSearchTerms = make([]string, len(m.AlteredSearchTerms))
		copy(cloned.AlteredSearchTerms, m.AlteredSearchTerms)
	}
	return cloned
}

type GetPolicyMitreVectorsRequest struct {
	Id                   string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Options              *GetPolicyMitreVectorsRequest_Options `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *GetPolicyMitreVectorsRequest) Reset()         { *m = GetPolicyMitreVectorsRequest{} }
func (m *GetPolicyMitreVectorsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPolicyMitreVectorsRequest) ProtoMessage()    {}
func (*GetPolicyMitreVectorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{19}
}
func (m *GetPolicyMitreVectorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicyMitreVectorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicyMitreVectorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicyMitreVectorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyMitreVectorsRequest.Merge(m, src)
}
func (m *GetPolicyMitreVectorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicyMitreVectorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyMitreVectorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyMitreVectorsRequest proto.InternalMessageInfo

func (m *GetPolicyMitreVectorsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetPolicyMitreVectorsRequest) GetOptions() *GetPolicyMitreVectorsRequest_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *GetPolicyMitreVectorsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetPolicyMitreVectorsRequest) Clone() *GetPolicyMitreVectorsRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetPolicyMitreVectorsRequest)
	*cloned = *m

	cloned.Options = m.Options.Clone()
	return cloned
}

type GetPolicyMitreVectorsRequest_Options struct {
	// If set to true, policy is excluded from the response.
	ExcludePolicy        bool     `protobuf:"varint,1,opt,name=exclude_policy,json=excludePolicy,proto3" json:"exclude_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPolicyMitreVectorsRequest_Options) Reset()         { *m = GetPolicyMitreVectorsRequest_Options{} }
func (m *GetPolicyMitreVectorsRequest_Options) String() string { return proto.CompactTextString(m) }
func (*GetPolicyMitreVectorsRequest_Options) ProtoMessage()    {}
func (*GetPolicyMitreVectorsRequest_Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{19, 0}
}
func (m *GetPolicyMitreVectorsRequest_Options) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicyMitreVectorsRequest_Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicyMitreVectorsRequest_Options.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicyMitreVectorsRequest_Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyMitreVectorsRequest_Options.Merge(m, src)
}
func (m *GetPolicyMitreVectorsRequest_Options) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicyMitreVectorsRequest_Options) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyMitreVectorsRequest_Options.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyMitreVectorsRequest_Options proto.InternalMessageInfo

func (m *GetPolicyMitreVectorsRequest_Options) GetExcludePolicy() bool {
	if m != nil {
		return m.ExcludePolicy
	}
	return false
}

func (m *GetPolicyMitreVectorsRequest_Options) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetPolicyMitreVectorsRequest_Options) Clone() *GetPolicyMitreVectorsRequest_Options {
	if m == nil {
		return nil
	}
	cloned := new(GetPolicyMitreVectorsRequest_Options)
	*cloned = *m

	return cloned
}

type GetPolicyMitreVectorsResponse struct {
	Policy               *storage.Policy              `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	Vectors              []*storage.MitreAttackVector `protobuf:"bytes,2,rep,name=vectors,proto3" json:"vectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetPolicyMitreVectorsResponse) Reset()         { *m = GetPolicyMitreVectorsResponse{} }
func (m *GetPolicyMitreVectorsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPolicyMitreVectorsResponse) ProtoMessage()    {}
func (*GetPolicyMitreVectorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa86ef403afe5233, []int{20}
}
func (m *GetPolicyMitreVectorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicyMitreVectorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicyMitreVectorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicyMitreVectorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyMitreVectorsResponse.Merge(m, src)
}
func (m *GetPolicyMitreVectorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicyMitreVectorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyMitreVectorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyMitreVectorsResponse proto.InternalMessageInfo

func (m *GetPolicyMitreVectorsResponse) GetPolicy() *storage.Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *GetPolicyMitreVectorsResponse) GetVectors() []*storage.MitreAttackVector {
	if m != nil {
		return m.Vectors
	}
	return nil
}

func (m *GetPolicyMitreVectorsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetPolicyMitreVectorsResponse) Clone() *GetPolicyMitreVectorsResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetPolicyMitreVectorsResponse)
	*cloned = *m

	cloned.Policy = m.Policy.Clone()
	if m.Vectors != nil {
		cloned.Vectors = make([]*storage.MitreAttackVector, len(m.Vectors))
		for idx, v := range m.Vectors {
			cloned.Vectors[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*DryRunResponse)(nil), "v1.DryRunResponse")
	proto.RegisterType((*DryRunResponse_Alert)(nil), "v1.DryRunResponse.Alert")
	proto.RegisterType((*JobId)(nil), "v1.JobId")
	proto.RegisterType((*DryRunJobStatusResponse)(nil), "v1.DryRunJobStatusResponse")
	proto.RegisterType((*PolicyCategoriesResponse)(nil), "v1.PolicyCategoriesResponse")
	proto.RegisterType((*EnableDisablePolicyNotificationRequest)(nil), "v1.EnableDisablePolicyNotificationRequest")
	proto.RegisterType((*ListPoliciesResponse)(nil), "v1.ListPoliciesResponse")
	proto.RegisterType((*PostPolicyRequest)(nil), "v1.PostPolicyRequest")
	proto.RegisterType((*PatchPolicyRequest)(nil), "v1.PatchPolicyRequest")
	proto.RegisterType((*ExportPoliciesRequest)(nil), "v1.ExportPoliciesRequest")
	proto.RegisterType((*PolicyError)(nil), "v1.PolicyError")
	proto.RegisterType((*ExportPolicyError)(nil), "v1.ExportPolicyError")
	proto.RegisterType((*ExportPoliciesErrorList)(nil), "v1.ExportPoliciesErrorList")
	proto.RegisterType((*PolicyFromSearchRequest)(nil), "v1.PolicyFromSearchRequest")
	proto.RegisterType((*ImportPoliciesMetadata)(nil), "v1.ImportPoliciesMetadata")
	proto.RegisterType((*ImportPoliciesRequest)(nil), "v1.ImportPoliciesRequest")
	proto.RegisterType((*ImportPolicyError)(nil), "v1.ImportPolicyError")
	proto.RegisterType((*ImportPolicyResponse)(nil), "v1.ImportPolicyResponse")
	proto.RegisterType((*ImportPoliciesResponse)(nil), "v1.ImportPoliciesResponse")
	proto.RegisterType((*PolicyFromSearchResponse)(nil), "v1.PolicyFromSearchResponse")
	proto.RegisterType((*GetPolicyMitreVectorsRequest)(nil), "v1.GetPolicyMitreVectorsRequest")
	proto.RegisterType((*GetPolicyMitreVectorsRequest_Options)(nil), "v1.GetPolicyMitreVectorsRequest.Options")
	proto.RegisterType((*GetPolicyMitreVectorsResponse)(nil), "v1.GetPolicyMitreVectorsResponse")
}

func init() { proto.RegisterFile("api/v1/policy_service.proto", fileDescriptor_aa86ef403afe5233) }

var fileDescriptor_aa86ef403afe5233 = []byte{
	// 1513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x5b, 0x4f, 0x1b, 0xc7,
	0x17, 0xcf, 0x9a, 0x70, 0xf1, 0xb1, 0x31, 0x30, 0xd8, 0xe0, 0x2c, 0xe0, 0xc0, 0x44, 0x09, 0x88,
	0x28, 0x76, 0xe0, 0xff, 0x17, 0xad, 0x52, 0xa9, 0x52, 0x08, 0x84, 0x10, 0x25, 0x94, 0x2e, 0x55,
	0x5a, 0x55, 0x95, 0xac, 0xf5, 0xee, 0x04, 0x36, 0xdd, 0xdd, 0x71, 0x67, 0xc6, 0x4e, 0xac, 0x34,
	0x7d, 0x88, 0x2a, 0xf5, 0xa1, 0x7d, 0xeb, 0x4b, 0x5f, 0xab, 0xf6, 0xb3, 0x54, 0x7d, 0xac, 0xd4,
	0x2f, 0x50, 0xa5, 0xfd, 0x20, 0xd5, 0xce, 0xcc, 0x5e, 0x7c, 0x81, 0xa4, 0x4f, 0xb0, 0xbf, 0x73,
	0xe6, 0x77, 0xae, 0x33, 0xe7, 0x18, 0x96, 0xec, 0xb6, 0xd7, 0xe8, 0x6e, 0x35, 0xda, 0xd4, 0xf7,
	0x9c, 0x5e, 0x93, 0x13, 0xd6, 0xf5, 0x1c, 0x52, 0x6f, 0x33, 0x2a, 0x28, 0xca, 0x75, 0xb7, 0xcc,
	0x79, 0xad, 0xe0, 0xd0, 0x20, 0xa0, 0xa1, 0x12, 0x98, 0x48, 0x83, 0x24, 0x68, 0x8b, 0x9e, 0xc6,
	0x62, 0x26, 0x4e, 0x6c, 0xe6, 0x9c, 0xf5, 0x33, 0x99, 0xcb, 0xa7, 0x94, 0x9e, 0xfa, 0xa4, 0x11,
	0xe9, 0xd8, 0x61, 0x48, 0x85, 0x2d, 0x3c, 0x1a, 0x72, 0x2d, 0x9d, 0xe7, 0x82, 0x32, 0xfb, 0x94,
	0x34, 0x02, 0x4f, 0xb0, 0xf8, 0x48, 0x39, 0x06, 0x95, 0x6b, 0x0a, 0xc5, 0xdf, 0x1b, 0x50, 0xda,
	0x63, 0x3d, 0xab, 0x13, 0x5a, 0x84, 0xb7, 0x69, 0xc8, 0x09, 0xba, 0x0d, 0x13, 0xb6, 0x4f, 0x98,
	0xe0, 0x55, 0x63, 0x75, 0x6c, 0xa3, 0xb0, 0x5d, 0xad, 0x77, 0xb7, 0xea, 0xfd, 0x3a, 0xf5, 0xbb,
	0x91, 0x82, 0xa5, 0xf5, 0xcc, 0x03, 0x18, 0x97, 0x00, 0xaa, 0x01, 0xb8, 0xa4, 0xed, 0xd3, 0x5e,
	0x40, 0x42, 0x51, 0x35, 0x56, 0x8d, 0x8d, 0xbc, 0x95, 0x41, 0x22, 0x79, 0xd7, 0xa3, 0xbe, 0x72,
	0xb6, 0x9a, 0x5b, 0x1d, 0x8b, 0xe4, 0x29, 0x82, 0x6b, 0x30, 0xfe, 0x90, 0xb6, 0x0e, 0x5d, 0x54,
	0x81, 0x89, 0x67, 0xb4, 0xd5, 0xf4, 0x5c, 0x4d, 0x32, 0xfe, 0x2c, 0x82, 0x71, 0x13, 0x16, 0x95,
	0x23, 0x0f, 0x69, 0xeb, 0x44, 0xd8, 0xa2, 0xc3, 0x13, 0xaf, 0xab, 0x30, 0xd9, 0x26, 0xa1, 0xeb,
	0x85, 0xa7, 0xf2, 0xc8, 0x94, 0x15, 0x7f, 0xa2, 0x4d, 0x98, 0x60, 0x84, 0x77, 0x7c, 0x51, 0xcd,
	0xad, 0x1a, 0x1b, 0x85, 0x6d, 0x34, 0x1c, 0x8f, 0xa5, 0x35, 0xf0, 0x1d, 0xa8, 0x1e, 0xcb, 0xf4,
	0xdc, 0xb3, 0x05, 0x39, 0xa5, 0xcc, 0x23, 0xa9, 0x85, 0x1a, 0x80, 0x93, 0xa0, 0x32, 0x37, 0x79,
	0x2b, 0x83, 0xe0, 0xd7, 0x06, 0xdc, 0xd8, 0x0f, 0xed, 0x96, 0x4f, 0xf6, 0x3c, 0x1e, 0xfd, 0x51,
	0x4c, 0x47, 0x54, 0x78, 0x4f, 0x3d, 0x47, 0x46, 0x68, 0x91, 0xaf, 0x3a, 0x84, 0x0b, 0xb4, 0x04,
	0x79, 0xdd, 0x20, 0x49, 0x84, 0x53, 0x0a, 0x38, 0x74, 0xd1, 0x1a, 0x14, 0x43, 0x79, 0x86, 0xb0,
	0xa6, 0xe7, 0xc6, 0x69, 0x2a, 0xc4, 0xd8, 0xa1, 0xcb, 0xa3, 0x60, 0x5d, 0x65, 0xa3, 0x3a, 0xa6,
	0x82, 0xd5, 0x9f, 0xf8, 0x00, 0xca, 0x8f, 0x3c, 0x2e, 0xa4, 0xe9, 0xac, 0xf3, 0x0d, 0x50, 0x06,
	0x62, 0xd7, 0x0b, 0xdb, 0xf3, 0x75, 0xdd, 0x10, 0xf5, 0xe4, 0x40, 0xcf, 0x4a, 0x94, 0x70, 0x17,
	0xe6, 0x8e, 0x69, 0x82, 0x6b, 0xbf, 0xd7, 0x61, 0x42, 0xb9, 0x29, 0x9d, 0x2e, 0x6c, 0xcf, 0x24,
	0x1c, 0x5a, 0x4f, 0x8b, 0xd1, 0xfb, 0x50, 0x25, 0x32, 0x15, 0x4d, 0x2e, 0x98, 0xe7, 0x88, 0x66,
	0xd7, 0xf6, 0x3d, 0x57, 0xe6, 0x40, 0x56, 0x61, 0xca, 0x5a, 0x50, 0xf2, 0x13, 0x29, 0x7e, 0x92,
	0x48, 0xb1, 0x05, 0xe8, 0xd8, 0x16, 0xce, 0x59, 0xbf, 0xe1, 0x12, 0xe4, 0x92, 0x4c, 0xe5, 0x3c,
	0x17, 0x2d, 0xc3, 0x94, 0x8e, 0xd8, 0x55, 0x7c, 0x0f, 0x2e, 0x59, 0x09, 0xb2, 0x5b, 0x82, 0x22,
	0x27, 0xa2, 0x19, 0x7f, 0xe3, 0x1d, 0xa8, 0xec, 0xbf, 0x68, 0x53, 0x96, 0x49, 0x8b, 0xa2, 0x5d,
	0x01, 0x48, 0xea, 0x10, 0x97, 0x34, 0x1f, 0x17, 0x82, 0xe3, 0x6b, 0x50, 0x50, 0x6e, 0xec, 0x33,
	0x46, 0x19, 0x2a, 0xc3, 0x38, 0x89, 0xfe, 0x89, 0x7b, 0x52, 0x7e, 0xe0, 0x4f, 0x61, 0x2e, 0x43,
	0xae, 0x55, 0x2f, 0x2c, 0xf0, 0xf5, 0x98, 0x27, 0xa7, 0x93, 0xd8, 0xdd, 0xaa, 0x67, 0x0e, 0xc7,
	0xc4, 0x0f, 0x60, 0xb1, 0xdf, 0x6b, 0x29, 0x8d, 0x8a, 0x85, 0x6e, 0xc1, 0x84, 0xd4, 0x89, 0x6b,
	0x59, 0x89, 0x28, 0x86, 0xbc, 0xb0, 0xb4, 0x12, 0xfe, 0x10, 0x16, 0x15, 0x7c, 0x9f, 0xd1, 0xe0,
	0x44, 0xbe, 0x27, 0x71, 0x06, 0xae, 0xc1, 0xb4, 0x7e, 0x60, 0xda, 0x36, 0xb3, 0x03, 0xae, 0x9d,
	0x2d, 0x2a, 0xf0, 0x58, 0x62, 0x78, 0x07, 0x16, 0x0e, 0x83, 0xac, 0x27, 0x8f, 0x89, 0xb0, 0x5d,
	0x5b, 0xd8, 0x68, 0x19, 0xf2, 0xb4, 0x4b, 0xd8, 0x73, 0xe6, 0x09, 0xa2, 0xef, 0x5d, 0x0a, 0xe0,
	0xaf, 0xa1, 0xd2, 0x7f, 0x2e, 0xb6, 0xba, 0x03, 0x53, 0x81, 0xa6, 0xd0, 0x9d, 0x64, 0x46, 0x11,
	0x8c, 0x36, 0x62, 0x25, 0xba, 0xe8, 0x66, 0xa6, 0x8b, 0x73, 0x32, 0xf2, 0xa1, 0x0e, 0x4c, 0x3b,
	0xf8, 0x17, 0x03, 0xe6, 0x32, 0x8c, 0xba, 0x32, 0x55, 0x98, 0x0c, 0x08, 0xe7, 0xf6, 0x29, 0xd1,
	0xa1, 0xc6, 0x9f, 0x08, 0xc1, 0x65, 0xd1, 0x6b, 0x13, 0x59, 0x95, 0xbc, 0x25, 0xff, 0x47, 0xeb,
	0x50, 0x72, 0x3b, 0x6d, 0x3f, 0xba, 0xbe, 0xa4, 0x19, 0xda, 0x81, 0xba, 0x6f, 0xf9, 0x07, 0x97,
	0xac, 0xe9, 0x04, 0x3f, 0xb2, 0x03, 0x82, 0x6e, 0xc2, 0x6c, 0xda, 0xe2, 0x4d, 0x55, 0xde, 0xcb,
	0x5a, 0x75, 0x26, 0x95, 0x48, 0x1f, 0x76, 0x21, 0x0d, 0x1f, 0xff, 0x60, 0x40, 0x39, 0xeb, 0x65,
	0x72, 0x63, 0x97, 0x21, 0xcf, 0x3b, 0x8e, 0x43, 0x88, 0x4b, 0xdc, 0x38, 0xb5, 0x09, 0x90, 0xb9,
	0x89, 0xb9, 0x8b, 0x6f, 0x62, 0xda, 0x2a, 0x63, 0x69, 0xab, 0x0c, 0xa5, 0x25, 0x69, 0x95, 0xce,
	0x60, 0xa9, 0x13, 0x7f, 0x76, 0x20, 0xcf, 0xf4, 0xff, 0x7d, 0x93, 0x61, 0x94, 0xf3, 0x56, 0xaa,
	0x1a, 0x75, 0x98, 0xed, 0xfb, 0xcd, 0x34, 0x16, 0x75, 0xff, 0x8b, 0xb6, 0xef, 0x9f, 0xc4, 0x18,
	0xfe, 0xd9, 0x88, 0x1f, 0xde, 0x6c, 0x8b, 0x6a, 0xcb, 0xef, 0xfc, 0xea, 0xdc, 0x86, 0xb2, 0xed,
	0x0b, 0xc2, 0x88, 0xdb, 0xd4, 0x4d, 0x2d, 0x08, 0x0b, 0xe2, 0x17, 0x14, 0x69, 0x99, 0x62, 0xff,
	0x24, 0x92, 0xa0, 0x4d, 0x98, 0x3b, 0xb3, 0x79, 0x33, 0x24, 0x5c, 0x10, 0xb7, 0xf9, 0xd4, 0x23,
	0xbe, 0xcb, 0xf5, 0x93, 0x3a, 0x73, 0x66, 0xf3, 0x23, 0x89, 0xdf, 0x97, 0x30, 0xfe, 0xd5, 0x80,
	0xe5, 0x03, 0xa2, 0x23, 0x7d, 0x1c, 0x4d, 0xd6, 0x27, 0xc4, 0x11, 0x94, 0xf1, 0xf3, 0x1e, 0xa9,
	0x5d, 0x98, 0xa4, 0xed, 0x78, 0xd4, 0x45, 0x8e, 0x6f, 0x44, 0xf9, 0xba, 0x88, 0xa2, 0xfe, 0x91,
	0xd2, 0xb7, 0xe2, 0x83, 0xe6, 0x6d, 0x98, 0xd4, 0x18, 0xba, 0x0e, 0x25, 0xf2, 0xc2, 0xf1, 0x3b,
	0x2e, 0x69, 0x66, 0xd2, 0x31, 0x65, 0x4d, 0x6b, 0x54, 0xb1, 0xe2, 0x6f, 0x60, 0xe5, 0x1c, 0x13,
	0xff, 0x35, 0x9d, 0xff, 0x87, 0xc9, 0xae, 0x3a, 0xab, 0x2f, 0x9b, 0x99, 0x68, 0x4a, 0xe2, 0xbb,
	0x42, 0xd8, 0xce, 0x97, 0x8a, 0xde, 0x8a, 0x55, 0xb7, 0x7f, 0x2b, 0xc2, 0xb4, 0x22, 0x3a, 0x51,
	0x2b, 0x0b, 0x3a, 0x84, 0x7c, 0xe2, 0x11, 0x9a, 0x8d, 0x72, 0x60, 0x11, 0x4e, 0x3b, 0xcc, 0x21,
	0xbb, 0xbd, 0xc3, 0x3d, 0x73, 0xd0, 0x3e, 0xbe, 0xf2, 0xfa, 0xcf, 0x7f, 0x7e, 0xcc, 0xcd, 0xa3,
	0xb9, 0x64, 0x91, 0xf2, 0x08, 0x6f, 0xbc, 0xf4, 0xdc, 0x57, 0xe8, 0x5b, 0x03, 0x2a, 0x23, 0xa3,
	0x43, 0xab, 0x6f, 0xcb, 0xad, 0xb9, 0x76, 0x81, 0x86, 0x4a, 0x0d, 0xbe, 0x21, 0x2d, 0xaf, 0xa2,
	0xda, 0x90, 0x65, 0xb5, 0x4a, 0xe9, 0x18, 0xd1, 0x23, 0x28, 0x66, 0xa7, 0x2c, 0x2a, 0xca, 0xa0,
	0xec, 0xe7, 0x1f, 0x77, 0x08, 0xeb, 0x99, 0xf2, 0x5a, 0x8c, 0x9a, 0xc2, 0xb8, 0x2c, 0xf9, 0x4b,
	0xa8, 0x98, 0xe5, 0x47, 0x16, 0x40, 0x3a, 0x6a, 0x51, 0x45, 0x8d, 0x83, 0x81, 0xd1, 0x3b, 0x9c,
	0xa5, 0x65, 0xc9, 0xb5, 0x80, 0xfb, 0xb8, 0xee, 0xc4, 0xb5, 0xdb, 0x87, 0xfc, 0x71, 0x27, 0xa6,
	0x1c, 0x3c, 0x6b, 0xe6, 0xe5, 0xbc, 0x88, 0x96, 0xcd, 0x98, 0xc6, 0x1c, 0x4e, 0xf6, 0x1d, 0x63,
	0x13, 0x1d, 0x41, 0x21, 0x33, 0x8d, 0xd1, 0x82, 0xf4, 0x6d, 0x68, 0x3c, 0x8f, 0xe0, 0xdb, 0x1e,
	0xcd, 0x77, 0x1f, 0x8a, 0x7b, 0xc4, 0x27, 0x82, 0x9c, 0xdb, 0x0d, 0x19, 0x2a, 0xdd, 0x07, 0x9b,
	0x23, 0xfa, 0xe0, 0x3b, 0x03, 0xae, 0xbe, 0x65, 0xd7, 0x42, 0x9b, 0x92, 0xe9, 0x9d, 0x16, 0xb2,
	0xac, 0xd5, 0x5b, 0xd2, 0xea, 0xfa, 0x36, 0xee, 0xb7, 0x9a, 0x8c, 0xf3, 0x57, 0x8d, 0x78, 0x13,
	0xe3, 0x51, 0x44, 0x07, 0x30, 0x6b, 0x11, 0x9b, 0x73, 0xc2, 0x79, 0xd2, 0x0e, 0x29, 0x5b, 0x96,
	0x78, 0x45, 0x12, 0x2f, 0xe2, 0x4a, 0x1f, 0x31, 0xd3, 0x87, 0xd1, 0x09, 0x14, 0xd5, 0x52, 0x7a,
	0x5e, 0xd1, 0x46, 0xec, 0xad, 0xb8, 0x26, 0x39, 0xab, 0x78, 0xbe, 0x8f, 0xd3, 0x65, 0x3d, 0xd6,
	0x09, 0x23, 0xef, 0x9e, 0x40, 0xe5, 0xa4, 0xd3, 0x0a, 0x3c, 0x91, 0xa5, 0x7e, 0x48, 0x5b, 0xe7,
	0xb4, 0x84, 0x5c, 0xbe, 0xf1, 0x9a, 0x24, 0x5d, 0xc2, 0x0b, 0x23, 0x48, 0x9f, 0xd1, 0x56, 0xc4,
	0x7b, 0x0a, 0x65, 0xd9, 0xeb, 0x03, 0xdb, 0x38, 0x4a, 0x59, 0xcc, 0xa5, 0xd4, 0xdd, 0xa1, 0x6d,
	0x1d, 0xaf, 0x4b, 0x13, 0x6b, 0xe8, 0xea, 0x68, 0x13, 0x8d, 0x97, 0x6a, 0xfb, 0x7f, 0x85, 0x8e,
	0x61, 0xe6, 0x9e, 0x1d, 0x3a, 0xc4, 0x4f, 0x98, 0xb2, 0x36, 0x32, 0xd9, 0xd5, 0x8c, 0x9b, 0x6f,
	0x65, 0xfc, 0x02, 0xe6, 0x93, 0x47, 0x20, 0xdd, 0xf2, 0xb3, 0x35, 0x5b, 0x4e, 0x17, 0xb2, 0xe1,
	0x9f, 0x01, 0x71, 0x83, 0xa3, 0x72, 0xfa, 0x33, 0x2f, 0x43, 0xe3, 0x43, 0xa9, 0x7f, 0x69, 0x43,
	0x57, 0x06, 0x76, 0xb3, 0x74, 0x0d, 0x32, 0xaf, 0x26, 0x45, 0x18, 0x94, 0x5f, 0x58, 0x5e, 0x22,
	0x95, 0xa3, 0x32, 0x30, 0x98, 0x1d, 0x9c, 0x9a, 0x68, 0x29, 0xf5, 0x7e, 0x68, 0xdd, 0xcb, 0x86,
	0x36, 0x3c, 0x68, 0xf1, 0x35, 0x69, 0x6e, 0x05, 0x57, 0xfb, 0xcc, 0x3d, 0x65, 0x34, 0xb8, 0xa5,
	0xe6, 0xa9, 0x2a, 0x7d, 0xa9, 0x7f, 0x43, 0x50, 0x11, 0x8e, 0x5c, 0xf4, 0x4c, 0x73, 0x94, 0xe8,
	0xc2, 0xe0, 0xbc, 0x40, 0x07, 0xb7, 0xfb, 0xde, 0xef, 0x6f, 0x6a, 0xc6, 0x1f, 0x6f, 0x6a, 0xc6,
	0x5f, 0x6f, 0x6a, 0xc6, 0x4f, 0x7f, 0xd7, 0x2e, 0x41, 0xd5, 0xa3, 0x75, 0x1e, 0xcd, 0x1c, 0x46,
	0x5f, 0xa8, 0xdf, 0xaf, 0x75, 0xbb, 0xed, 0xd5, 0xbb, 0x5b, 0x9f, 0x17, 0xea, 0x0d, 0xf5, 0x73,
	0xf9, 0x83, 0xee, 0xd6, 0x67, 0x63, 0xad, 0x09, 0x29, 0xfc, 0xdf, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x5b, 0x57, 0x68, 0x89, 0x8e, 0x0f, 0x00, 0x00,
}

func (m *DryRunResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DryRunResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DryRunResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Alerts) > 0 {
		for iNdEx := len(m.Alerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Alerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolicyService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DryRunResponse_Alert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DryRunResponse_Alert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DryRunResponse_Alert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Violations) > 0 {
		for iNdEx := len(m.Violations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Violations[iNdEx])
			copy(dAtA[i:], m.Violations[iNdEx])
			i = encodeVarintPolicyService(dAtA, i, uint64(len(m.Violations[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Deployment) > 0 {
		i -= len(m.Deployment)
		copy(dAtA[i:], m.Deployment)
		i = encodeVarintPolicyService(dAtA, i, uint64(len(m.Deployment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintPolicyService(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DryRunJobStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DryRunJobStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DryRunJobStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pending {
		i--
		if m.Pending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PolicyCategoriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyCategoriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCategoriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Categories) > 0 {
		for iNdEx := len(m.Categories) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Categories[iNdEx])
			copy(dAtA[i:], m.Categories[iNdEx])
			i = encodeVarintPolicyService(dAtA, i, uint64(len(m.Categories[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EnableDisablePolicyNotificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableDisablePolicyNotificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableDisablePolicyNotificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Disable {
		i--
		if m.Disable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.NotifierIds) > 0 {
		for iNdEx := len(m.NotifierIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotifierIds[iNdEx])
			copy(dAtA[i:], m.NotifierIds[iNdEx])
			i = encodeVarintPolicyService(dAtA, i, uint64(len(m.NotifierIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintPolicyService(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolicyService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EnableStrictValidation {
		i--
		if m.EnableStrictValidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PatchPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatchPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatchPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SetDisabled != nil {
		{
			size := m.SetDisabled.Size()
			i -= size
			if _, err := m.SetDisabled.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPolicyService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PatchPolicyRequest_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatchPolicyRequest_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Disabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ExportPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PolicyIds) > 0 {
		for iNdEx := len(m.PolicyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PolicyIds[iNdEx])
			copy(dAtA[i:], m.PolicyIds[iNdEx])
			i = encodeVarintPolicyService(dAtA, i, uint64(len(m.PolicyIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintPolicyService(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExportPolicyError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportPolicyError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportPolicyError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintPolicyService(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExportPoliciesErrorList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportPoliciesErrorList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportPoliciesErrorList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Errors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolicyService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyFromSearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyFromSearchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyFromSearchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SearchParams) > 0 {
		i -= len(m.SearchParams)
		copy(dAtA[i:], m.SearchParams)
		i = encodeVarintPolicyService(dAtA, i, uint64(len(m.SearchParams)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImportPoliciesMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportPoliciesMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportPoliciesMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Overwrite {
		i--
		if m.Overwrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImportPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolicyService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImportPolicyError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportPolicyError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportPolicyError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Metadata != nil {
		{
			size := m.Metadata.Size()
			i -= size
			if _, err := m.Metadata.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPolicyService(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintPolicyService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImportPolicyError_DuplicateName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportPolicyError_DuplicateName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DuplicateName)
	copy(dAtA[i:], m.DuplicateName)
	i = encodeVarintPolicyService(dAtA, i, uint64(len(m.DuplicateName)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *ImportPolicyError_ValidationError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportPolicyError_ValidationError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ValidationError)
	copy(dAtA[i:], m.ValidationError)
	i = encodeVarintPolicyService(dAtA, i, uint64(len(m.ValidationError)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *ImportPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Errors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolicyService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Succeeded {
		i--
		if m.Succeeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImportPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AllSucceeded {
		i--
		if m.AllSucceeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolicyService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyFromSearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyFromSearchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyFromSearchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasNestedFields {
		i--
		if m.HasNestedFields {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.AlteredSearchTerms) > 0 {
		for iNdEx := len(m.AlteredSearchTerms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AlteredSearchTerms[iNdEx])
			copy(dAtA[i:], m.AlteredSearchTerms[iNdEx])
			i = encodeVarintPolicyService(dAtA, i, uint64(len(m.AlteredSearchTerms[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicyMitreVectorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicyMitreVectorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicyMitreVectorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPolicyService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicyMitreVectorsRequest_Options) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicyMitreVectorsRequest_Options) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicyMitreVectorsRequest_Options) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExcludePolicy {
		i--
		if m.ExcludePolicy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicyMitreVectorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicyMitreVectorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicyMitreVectorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vectors) > 0 {
		for iNdEx := len(m.Vectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolicyService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPolicyService(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicyService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DryRunResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Alerts) > 0 {
		for _, e := range m.Alerts {
			l = e.Size()
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DryRunResponse_Alert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Deployment)
	if l > 0 {
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if len(m.Violations) > 0 {
		for _, s := range m.Violations {
			l = len(s)
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DryRunJobStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pending {
		n += 2
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PolicyCategoriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Categories) > 0 {
		for _, s := range m.Categories {
			l = len(s)
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnableDisablePolicyNotificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if len(m.NotifierIds) > 0 {
		for _, s := range m.NotifierIds {
			l = len(s)
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.Disable {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if m.EnableStrictValidation {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PatchPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if m.SetDisabled != nil {
		n += m.SetDisabled.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PatchPolicyRequest_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ExportPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PolicyIds) > 0 {
		for _, s := range m.PolicyIds {
			l = len(s)
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PolicyError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportPolicyError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportPoliciesErrorList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PolicyFromSearchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SearchParams)
	if l > 0 {
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImportPoliciesMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Overwrite {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImportPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImportPolicyError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPolicyService(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if m.Metadata != nil {
		n += m.Metadata.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImportPolicyError_DuplicateName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DuplicateName)
	n += 1 + l + sovPolicyService(uint64(l))
	return n
}
func (m *ImportPolicyError_ValidationError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidationError)
	n += 1 + l + sovPolicyService(uint64(l))
	return n
}
func (m *ImportPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Succeeded {
		n += 2
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImportPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.AllSucceeded {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PolicyFromSearchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if len(m.AlteredSearchTerms) > 0 {
		for _, s := range m.AlteredSearchTerms {
			l = len(s)
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.HasNestedFields {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPolicyMitreVectorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPolicyMitreVectorsRequest_Options) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludePolicy {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPolicyMitreVectorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovPolicyService(uint64(l))
	}
	if len(m.Vectors) > 0 {
		for _, e := range m.Vectors {
			l = e.Size()
			n += 1 + l + sovPolicyService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPolicyService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicyService(x uint64) (n int) {
	return sovPolicyService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DryRunResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryRunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryRunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alerts = append(m.Alerts, &DryRunResponse_Alert{})
			if err := m.Alerts[len(m.Alerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryRunResponse_Alert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Alert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Alert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Violations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Violations = append(m.Violations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryRunJobStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryRunJobStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryRunJobStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pending = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DryRunResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyCategoriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyCategoriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyCategoriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableDisablePolicyNotificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableDisablePolicyNotificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableDisablePolicyNotificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifierIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifierIds = append(m.NotifierIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &storage.ListPolicy{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &storage.Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStrictValidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableStrictValidation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatchPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatchPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatchPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SetDisabled = &PatchPolicyRequest_Disabled{b}
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyIds = append(m.PolicyIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportPolicyError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportPolicyError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportPolicyError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &PolicyError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportPoliciesErrorList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportPoliciesErrorList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportPoliciesErrorList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &ExportPolicyError{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyFromSearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyFromSearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyFromSearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchParams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchParams = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportPoliciesMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportPoliciesMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportPoliciesMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overwrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Overwrite = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ImportPoliciesMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &storage.Policy{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportPolicyError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportPolicyError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportPolicyError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuplicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = &ImportPolicyError_DuplicateName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = &ImportPolicyError_ValidationError{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeeded = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &storage.Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &ImportPolicyError{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &ImportPolicyResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSucceeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllSucceeded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyFromSearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyFromSearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyFromSearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &storage.Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlteredSearchTerms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlteredSearchTerms = append(m.AlteredSearchTerms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasNestedFields", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasNestedFields = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicyMitreVectorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPolicyMitreVectorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPolicyMitreVectorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &GetPolicyMitreVectorsRequest_Options{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicyMitreVectorsRequest_Options) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Options: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Options: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePolicy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludePolicy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicyMitreVectorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPolicyMitreVectorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPolicyMitreVectorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &storage.Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vectors = append(m.Vectors, &storage.MitreAttackVector{})
			if err := m.Vectors[len(m.Vectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicyService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicyService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicyService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicyService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicyService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicyService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicyService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicyService = fmt.Errorf("proto: unexpected end of group")
)
