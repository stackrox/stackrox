// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: internalapi/virtualmachine/v1/index_report.proto

//go:build !protoopaque

package v1

import (
	v4 "github.com/stackrox/rox/generated/internalapi/scanner/v4"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The index report is collected from the virtual machine agent and contains
// the package information.
type IndexReport struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	VsockCid      *string                `protobuf:"bytes,1,opt,name=vsock_cid,json=vsockCid" json:"vsock_cid,omitempty"`
	IndexV4       *v4.IndexReport        `protobuf:"bytes,2,opt,name=index_v4,json=indexV4" json:"index_v4,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexReport) Reset() {
	*x = IndexReport{}
	mi := &file_internalapi_virtualmachine_v1_index_report_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexReport) ProtoMessage() {}

func (x *IndexReport) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_virtualmachine_v1_index_report_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IndexReport) GetVsockCid() string {
	if x != nil && x.VsockCid != nil {
		return *x.VsockCid
	}
	return ""
}

func (x *IndexReport) GetIndexV4() *v4.IndexReport {
	if x != nil {
		return x.IndexV4
	}
	return nil
}

func (x *IndexReport) SetVsockCid(v string) {
	x.VsockCid = &v
}

func (x *IndexReport) SetIndexV4(v *v4.IndexReport) {
	x.IndexV4 = v
}

func (x *IndexReport) HasVsockCid() bool {
	if x == nil {
		return false
	}
	return x.VsockCid != nil
}

func (x *IndexReport) HasIndexV4() bool {
	if x == nil {
		return false
	}
	return x.IndexV4 != nil
}

func (x *IndexReport) ClearVsockCid() {
	x.VsockCid = nil
}

func (x *IndexReport) ClearIndexV4() {
	x.IndexV4 = nil
}

type IndexReport_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	VsockCid *string
	IndexV4  *v4.IndexReport
}

func (b0 IndexReport_builder) Build() *IndexReport {
	m0 := &IndexReport{}
	b, x := &b0, m0
	_, _ = b, x
	x.VsockCid = b.VsockCid
	x.IndexV4 = b.IndexV4
	return m0
}

// The index report event is sent to Central and contains additional information
// to match the index report to a virtual machine.
type IndexReportEvent struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// This is the id of the virtual machine resource that matches the vsock_cid
	// of the report.
	Id            *string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Index         *IndexReport `protobuf:"bytes,2,opt,name=index" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexReportEvent) Reset() {
	*x = IndexReportEvent{}
	mi := &file_internalapi_virtualmachine_v1_index_report_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexReportEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexReportEvent) ProtoMessage() {}

func (x *IndexReportEvent) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_virtualmachine_v1_index_report_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IndexReportEvent) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *IndexReportEvent) GetIndex() *IndexReport {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *IndexReportEvent) SetId(v string) {
	x.Id = &v
}

func (x *IndexReportEvent) SetIndex(v *IndexReport) {
	x.Index = v
}

func (x *IndexReportEvent) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *IndexReportEvent) HasIndex() bool {
	if x == nil {
		return false
	}
	return x.Index != nil
}

func (x *IndexReportEvent) ClearId() {
	x.Id = nil
}

func (x *IndexReportEvent) ClearIndex() {
	x.Index = nil
}

type IndexReportEvent_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// This is the id of the virtual machine resource that matches the vsock_cid
	// of the report.
	Id    *string
	Index *IndexReport
}

func (b0 IndexReportEvent_builder) Build() *IndexReportEvent {
	m0 := &IndexReportEvent{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Index = b.Index
	return m0
}

var File_internalapi_virtualmachine_v1_index_report_proto protoreflect.FileDescriptor

const file_internalapi_virtualmachine_v1_index_report_proto_rawDesc = "" +
	"\n" +
	"0internalapi/virtualmachine/v1/index_report.proto\x12\x11virtualmachine.v1\x1a)internalapi/scanner/v4/index_report.proto\x1a!google/protobuf/go_features.proto\"^\n" +
	"\vIndexReport\x12\x1b\n" +
	"\tvsock_cid\x18\x01 \x01(\tR\bvsockCid\x122\n" +
	"\bindex_v4\x18\x02 \x01(\v2\x17.scanner.v4.IndexReportR\aindexV4\"X\n" +
	"\x10IndexReportEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x124\n" +
	"\x05index\x18\x02 \x01(\v2\x1e.virtualmachine.v1.IndexReportR\x05indexB,Z\"./internalapi/virtualmachine/v1;v1\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_internalapi_virtualmachine_v1_index_report_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_internalapi_virtualmachine_v1_index_report_proto_goTypes = []any{
	(*IndexReport)(nil),      // 0: virtualmachine.v1.IndexReport
	(*IndexReportEvent)(nil), // 1: virtualmachine.v1.IndexReportEvent
	(*v4.IndexReport)(nil),   // 2: scanner.v4.IndexReport
}
var file_internalapi_virtualmachine_v1_index_report_proto_depIdxs = []int32{
	2, // 0: virtualmachine.v1.IndexReport.index_v4:type_name -> scanner.v4.IndexReport
	0, // 1: virtualmachine.v1.IndexReportEvent.index:type_name -> virtualmachine.v1.IndexReport
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_internalapi_virtualmachine_v1_index_report_proto_init() }
func file_internalapi_virtualmachine_v1_index_report_proto_init() {
	if File_internalapi_virtualmachine_v1_index_report_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internalapi_virtualmachine_v1_index_report_proto_rawDesc), len(file_internalapi_virtualmachine_v1_index_report_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internalapi_virtualmachine_v1_index_report_proto_goTypes,
		DependencyIndexes: file_internalapi_virtualmachine_v1_index_report_proto_depIdxs,
		MessageInfos:      file_internalapi_virtualmachine_v1_index_report_proto_msgTypes,
	}.Build()
	File_internalapi_virtualmachine_v1_index_report_proto = out.File
	file_internalapi_virtualmachine_v1_index_report_proto_goTypes = nil
	file_internalapi_virtualmachine_v1_index_report_proto_depIdxs = nil
}
