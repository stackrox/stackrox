// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: internalapi/sensor/admission_control_iservice.proto

package sensor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdmissionControlManagementService_Communicate_FullMethodName  = "/sensor.AdmissionControlManagementService/Communicate"
	AdmissionControlManagementService_PolicyAlerts_FullMethodName = "/sensor.AdmissionControlManagementService/PolicyAlerts"
)

// AdmissionControlManagementServiceClient is the client API for AdmissionControlManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A Sensor service that allows node scrapes to report results.
type AdmissionControlManagementServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MsgFromAdmissionControl, MsgToAdmissionControl], error)
	PolicyAlerts(ctx context.Context, in *AdmissionControlAlerts, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type admissionControlManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdmissionControlManagementServiceClient(cc grpc.ClientConnInterface) AdmissionControlManagementServiceClient {
	return &admissionControlManagementServiceClient{cc}
}

func (c *admissionControlManagementServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MsgFromAdmissionControl, MsgToAdmissionControl], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdmissionControlManagementService_ServiceDesc.Streams[0], AdmissionControlManagementService_Communicate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MsgFromAdmissionControl, MsgToAdmissionControl]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdmissionControlManagementService_CommunicateClient = grpc.BidiStreamingClient[MsgFromAdmissionControl, MsgToAdmissionControl]

func (c *admissionControlManagementServiceClient) PolicyAlerts(ctx context.Context, in *AdmissionControlAlerts, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdmissionControlManagementService_PolicyAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdmissionControlManagementServiceServer is the server API for AdmissionControlManagementService service.
// All implementations should embed UnimplementedAdmissionControlManagementServiceServer
// for forward compatibility.
//
// A Sensor service that allows node scrapes to report results.
type AdmissionControlManagementServiceServer interface {
	Communicate(grpc.BidiStreamingServer[MsgFromAdmissionControl, MsgToAdmissionControl]) error
	PolicyAlerts(context.Context, *AdmissionControlAlerts) (*emptypb.Empty, error)
}

// UnimplementedAdmissionControlManagementServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdmissionControlManagementServiceServer struct{}

func (UnimplementedAdmissionControlManagementServiceServer) Communicate(grpc.BidiStreamingServer[MsgFromAdmissionControl, MsgToAdmissionControl]) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedAdmissionControlManagementServiceServer) PolicyAlerts(context.Context, *AdmissionControlAlerts) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyAlerts not implemented")
}
func (UnimplementedAdmissionControlManagementServiceServer) testEmbeddedByValue() {}

// UnsafeAdmissionControlManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdmissionControlManagementServiceServer will
// result in compilation errors.
type UnsafeAdmissionControlManagementServiceServer interface {
	mustEmbedUnimplementedAdmissionControlManagementServiceServer()
}

func RegisterAdmissionControlManagementServiceServer(s grpc.ServiceRegistrar, srv AdmissionControlManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdmissionControlManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdmissionControlManagementService_ServiceDesc, srv)
}

func _AdmissionControlManagementService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdmissionControlManagementServiceServer).Communicate(&grpc.GenericServerStream[MsgFromAdmissionControl, MsgToAdmissionControl]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdmissionControlManagementService_CommunicateServer = grpc.BidiStreamingServer[MsgFromAdmissionControl, MsgToAdmissionControl]

func _AdmissionControlManagementService_PolicyAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdmissionControlAlerts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionControlManagementServiceServer).PolicyAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmissionControlManagementService_PolicyAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionControlManagementServiceServer).PolicyAlerts(ctx, req.(*AdmissionControlAlerts))
	}
	return interceptor(ctx, in, info, handler)
}

// AdmissionControlManagementService_ServiceDesc is the grpc.ServiceDesc for AdmissionControlManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdmissionControlManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.AdmissionControlManagementService",
	HandlerType: (*AdmissionControlManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PolicyAlerts",
			Handler:    _AdmissionControlManagementService_PolicyAlerts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _AdmissionControlManagementService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/sensor/admission_control_iservice.proto",
}
