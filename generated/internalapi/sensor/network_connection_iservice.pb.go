// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: internalapi/sensor/network_connection_iservice.proto

//go:build !protoopaque

package sensor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkConnectionInfoMessage struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to Msg:
	//
	//	*NetworkConnectionInfoMessage_Register
	//	*NetworkConnectionInfoMessage_Info
	Msg           isNetworkConnectionInfoMessage_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkConnectionInfoMessage) Reset() {
	*x = NetworkConnectionInfoMessage{}
	mi := &file_internalapi_sensor_network_connection_iservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkConnectionInfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConnectionInfoMessage) ProtoMessage() {}

func (x *NetworkConnectionInfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_sensor_network_connection_iservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NetworkConnectionInfoMessage) GetMsg() isNetworkConnectionInfoMessage_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *NetworkConnectionInfoMessage) GetRegister() *CollectorRegisterRequest {
	if x != nil {
		if x, ok := x.Msg.(*NetworkConnectionInfoMessage_Register); ok {
			return x.Register
		}
	}
	return nil
}

func (x *NetworkConnectionInfoMessage) GetInfo() *NetworkConnectionInfo {
	if x != nil {
		if x, ok := x.Msg.(*NetworkConnectionInfoMessage_Info); ok {
			return x.Info
		}
	}
	return nil
}

func (x *NetworkConnectionInfoMessage) SetRegister(v *CollectorRegisterRequest) {
	if v == nil {
		x.Msg = nil
		return
	}
	x.Msg = &NetworkConnectionInfoMessage_Register{v}
}

func (x *NetworkConnectionInfoMessage) SetInfo(v *NetworkConnectionInfo) {
	if v == nil {
		x.Msg = nil
		return
	}
	x.Msg = &NetworkConnectionInfoMessage_Info{v}
}

func (x *NetworkConnectionInfoMessage) HasMsg() bool {
	if x == nil {
		return false
	}
	return x.Msg != nil
}

func (x *NetworkConnectionInfoMessage) HasRegister() bool {
	if x == nil {
		return false
	}
	_, ok := x.Msg.(*NetworkConnectionInfoMessage_Register)
	return ok
}

func (x *NetworkConnectionInfoMessage) HasInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.Msg.(*NetworkConnectionInfoMessage_Info)
	return ok
}

func (x *NetworkConnectionInfoMessage) ClearMsg() {
	x.Msg = nil
}

func (x *NetworkConnectionInfoMessage) ClearRegister() {
	if _, ok := x.Msg.(*NetworkConnectionInfoMessage_Register); ok {
		x.Msg = nil
	}
}

func (x *NetworkConnectionInfoMessage) ClearInfo() {
	if _, ok := x.Msg.(*NetworkConnectionInfoMessage_Info); ok {
		x.Msg = nil
	}
}

const NetworkConnectionInfoMessage_Msg_not_set_case case_NetworkConnectionInfoMessage_Msg = 0
const NetworkConnectionInfoMessage_Register_case case_NetworkConnectionInfoMessage_Msg = 1
const NetworkConnectionInfoMessage_Info_case case_NetworkConnectionInfoMessage_Msg = 2

func (x *NetworkConnectionInfoMessage) WhichMsg() case_NetworkConnectionInfoMessage_Msg {
	if x == nil {
		return NetworkConnectionInfoMessage_Msg_not_set_case
	}
	switch x.Msg.(type) {
	case *NetworkConnectionInfoMessage_Register:
		return NetworkConnectionInfoMessage_Register_case
	case *NetworkConnectionInfoMessage_Info:
		return NetworkConnectionInfoMessage_Info_case
	default:
		return NetworkConnectionInfoMessage_Msg_not_set_case
	}
}

type NetworkConnectionInfoMessage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof Msg:
	Register *CollectorRegisterRequest
	Info     *NetworkConnectionInfo
	// -- end of Msg
}

func (b0 NetworkConnectionInfoMessage_builder) Build() *NetworkConnectionInfoMessage {
	m0 := &NetworkConnectionInfoMessage{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Register != nil {
		x.Msg = &NetworkConnectionInfoMessage_Register{b.Register}
	}
	if b.Info != nil {
		x.Msg = &NetworkConnectionInfoMessage_Info{b.Info}
	}
	return m0
}

type case_NetworkConnectionInfoMessage_Msg protoreflect.FieldNumber

func (x case_NetworkConnectionInfoMessage_Msg) String() string {
	md := file_internalapi_sensor_network_connection_iservice_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isNetworkConnectionInfoMessage_Msg interface {
	isNetworkConnectionInfoMessage_Msg()
}

type NetworkConnectionInfoMessage_Register struct {
	Register *CollectorRegisterRequest `protobuf:"bytes,1,opt,name=register,oneof"`
}

type NetworkConnectionInfoMessage_Info struct {
	Info *NetworkConnectionInfo `protobuf:"bytes,2,opt,name=info,oneof"`
}

func (*NetworkConnectionInfoMessage_Register) isNetworkConnectionInfoMessage_Msg() {}

func (*NetworkConnectionInfoMessage_Info) isNetworkConnectionInfoMessage_Msg() {}

type NetworkFlowsControlMessage struct {
	state             protoimpl.MessageState `protogen:"hybrid.v1"`
	PublicIpAddresses *IPAddressList         `protobuf:"bytes,1,opt,name=public_ip_addresses,json=publicIpAddresses" json:"public_ip_addresses,omitempty"`
	IpNetworks        *IPNetworkList         `protobuf:"bytes,2,opt,name=ip_networks,json=ipNetworks" json:"ip_networks,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkFlowsControlMessage) Reset() {
	*x = NetworkFlowsControlMessage{}
	mi := &file_internalapi_sensor_network_connection_iservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkFlowsControlMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkFlowsControlMessage) ProtoMessage() {}

func (x *NetworkFlowsControlMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_sensor_network_connection_iservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NetworkFlowsControlMessage) GetPublicIpAddresses() *IPAddressList {
	if x != nil {
		return x.PublicIpAddresses
	}
	return nil
}

func (x *NetworkFlowsControlMessage) GetIpNetworks() *IPNetworkList {
	if x != nil {
		return x.IpNetworks
	}
	return nil
}

func (x *NetworkFlowsControlMessage) SetPublicIpAddresses(v *IPAddressList) {
	x.PublicIpAddresses = v
}

func (x *NetworkFlowsControlMessage) SetIpNetworks(v *IPNetworkList) {
	x.IpNetworks = v
}

func (x *NetworkFlowsControlMessage) HasPublicIpAddresses() bool {
	if x == nil {
		return false
	}
	return x.PublicIpAddresses != nil
}

func (x *NetworkFlowsControlMessage) HasIpNetworks() bool {
	if x == nil {
		return false
	}
	return x.IpNetworks != nil
}

func (x *NetworkFlowsControlMessage) ClearPublicIpAddresses() {
	x.PublicIpAddresses = nil
}

func (x *NetworkFlowsControlMessage) ClearIpNetworks() {
	x.IpNetworks = nil
}

type NetworkFlowsControlMessage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PublicIpAddresses *IPAddressList
	IpNetworks        *IPNetworkList
}

func (b0 NetworkFlowsControlMessage_builder) Build() *NetworkFlowsControlMessage {
	m0 := &NetworkFlowsControlMessage{}
	b, x := &b0, m0
	_, _ = b, x
	x.PublicIpAddresses = b.PublicIpAddresses
	x.IpNetworks = b.IpNetworks
	return m0
}

type IPAddressList struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// A list of IPv4 addresses, encoded in correct byte order (i.e., 127.0.0.1 is encoded as 0x7f000001). On a
	// little-endian system, you must convert to big endian to interpret the value as a binary address.
	Ipv4Addresses []uint32 `protobuf:"fixed32,1,rep,packed,name=ipv4_addresses,json=ipv4Addresses" json:"ipv4_addresses,omitempty"`
	// A list of IPv6 addresses, as uint64 pairs. Each pair is ordered in network order (big endian, i.e., first high,
	// then low); each uint64 is encoded in the correct byte order and may need to be converted to big endian on little
	// endian System. E.g., the IPv6 address ::1 (local loopback) is encoded as a `0` uint64 followed by a `1` uint64.
	// This field must always have an even number of values; otherwise it should be discarded.
	Ipv6Addresses []uint64 `protobuf:"fixed64,2,rep,packed,name=ipv6_addresses,json=ipv6Addresses" json:"ipv6_addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPAddressList) Reset() {
	*x = IPAddressList{}
	mi := &file_internalapi_sensor_network_connection_iservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPAddressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAddressList) ProtoMessage() {}

func (x *IPAddressList) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_sensor_network_connection_iservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IPAddressList) GetIpv4Addresses() []uint32 {
	if x != nil {
		return x.Ipv4Addresses
	}
	return nil
}

func (x *IPAddressList) GetIpv6Addresses() []uint64 {
	if x != nil {
		return x.Ipv6Addresses
	}
	return nil
}

func (x *IPAddressList) SetIpv4Addresses(v []uint32) {
	x.Ipv4Addresses = v
}

func (x *IPAddressList) SetIpv6Addresses(v []uint64) {
	x.Ipv6Addresses = v
}

type IPAddressList_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A list of IPv4 addresses, encoded in correct byte order (i.e., 127.0.0.1 is encoded as 0x7f000001). On a
	// little-endian system, you must convert to big endian to interpret the value as a binary address.
	Ipv4Addresses []uint32
	// A list of IPv6 addresses, as uint64 pairs. Each pair is ordered in network order (big endian, i.e., first high,
	// then low); each uint64 is encoded in the correct byte order and may need to be converted to big endian on little
	// endian System. E.g., the IPv6 address ::1 (local loopback) is encoded as a `0` uint64 followed by a `1` uint64.
	// This field must always have an even number of values; otherwise it should be discarded.
	Ipv6Addresses []uint64
}

func (b0 IPAddressList_builder) Build() *IPAddressList {
	m0 := &IPAddressList{}
	b, x := &b0, m0
	_, _ = b, x
	x.Ipv4Addresses = b.Ipv4Addresses
	x.Ipv6Addresses = b.Ipv6Addresses
	return m0
}

type IPNetworkList struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// A list of IPv4 networks, as a sequence of bytes. First four bytes represent IP followed by the byte representing
	// the network prefix length. Each sequence encoded in correct byte order (i.e., 127.0.0.1/8 is encoded as 0x7f0000018).
	// On a little-endian system, you must convert to big endian to interpret the value as a binary address.
	// This field must always have an 5x number of values; otherwise it should be discarded.
	Ipv4Networks []byte `protobuf:"bytes,1,opt,name=ipv4_networks,json=ipv4Networks" json:"ipv4_networks,omitempty"`
	// A list of IPv6 networks, as a sequence of bytes. First 16 bytes representing IP followed by the byte representing
	// the network prefix length. Each IP sequence is ordered in network order (big endian, i.e., first high, then low).
	// Each order is encoded in the correct byte order and may need to be converted to big endian on little endian System.
	// This field must always have an 17x number of values; otherwise it should be discarded.
	Ipv6Networks  []byte `protobuf:"bytes,2,opt,name=ipv6_networks,json=ipv6Networks" json:"ipv6_networks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPNetworkList) Reset() {
	*x = IPNetworkList{}
	mi := &file_internalapi_sensor_network_connection_iservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPNetworkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPNetworkList) ProtoMessage() {}

func (x *IPNetworkList) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_sensor_network_connection_iservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IPNetworkList) GetIpv4Networks() []byte {
	if x != nil {
		return x.Ipv4Networks
	}
	return nil
}

func (x *IPNetworkList) GetIpv6Networks() []byte {
	if x != nil {
		return x.Ipv6Networks
	}
	return nil
}

func (x *IPNetworkList) SetIpv4Networks(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Ipv4Networks = v
}

func (x *IPNetworkList) SetIpv6Networks(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Ipv6Networks = v
}

type IPNetworkList_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A list of IPv4 networks, as a sequence of bytes. First four bytes represent IP followed by the byte representing
	// the network prefix length. Each sequence encoded in correct byte order (i.e., 127.0.0.1/8 is encoded as 0x7f0000018).
	// On a little-endian system, you must convert to big endian to interpret the value as a binary address.
	// This field must always have an 5x number of values; otherwise it should be discarded.
	Ipv4Networks []byte
	// A list of IPv6 networks, as a sequence of bytes. First 16 bytes representing IP followed by the byte representing
	// the network prefix length. Each IP sequence is ordered in network order (big endian, i.e., first high, then low).
	// Each order is encoded in the correct byte order and may need to be converted to big endian on little endian System.
	// This field must always have an 17x number of values; otherwise it should be discarded.
	Ipv6Networks []byte
}

func (b0 IPNetworkList_builder) Build() *IPNetworkList {
	m0 := &IPNetworkList{}
	b, x := &b0, m0
	_, _ = b, x
	x.Ipv4Networks = b.Ipv4Networks
	x.Ipv6Networks = b.Ipv6Networks
	return m0
}

var File_internalapi_sensor_network_connection_iservice_proto protoreflect.FileDescriptor

const file_internalapi_sensor_network_connection_iservice_proto_rawDesc = "" +
	"\n" +
	"4internalapi/sensor/network_connection_iservice.proto\x12\x06sensor\x1a\"internalapi/sensor/collector.proto\x1a0internalapi/sensor/network_connection_info.proto\x1a!google/protobuf/go_features.proto\"\x9a\x01\n" +
	"\x1cNetworkConnectionInfoMessage\x12>\n" +
	"\bregister\x18\x01 \x01(\v2 .sensor.CollectorRegisterRequestH\x00R\bregister\x123\n" +
	"\x04info\x18\x02 \x01(\v2\x1d.sensor.NetworkConnectionInfoH\x00R\x04infoB\x05\n" +
	"\x03msg\"\x9b\x01\n" +
	"\x1aNetworkFlowsControlMessage\x12E\n" +
	"\x13public_ip_addresses\x18\x01 \x01(\v2\x15.sensor.IPAddressListR\x11publicIpAddresses\x126\n" +
	"\vip_networks\x18\x02 \x01(\v2\x15.sensor.IPNetworkListR\n" +
	"ipNetworks\"]\n" +
	"\rIPAddressList\x12%\n" +
	"\x0eipv4_addresses\x18\x01 \x03(\aR\ripv4Addresses\x12%\n" +
	"\x0eipv6_addresses\x18\x02 \x03(\x06R\ripv6Addresses\"Y\n" +
	"\rIPNetworkList\x12#\n" +
	"\ripv4_networks\x18\x01 \x01(\fR\fipv4Networks\x12#\n" +
	"\ripv6_networks\x18\x02 \x01(\fR\fipv6Networks2\x89\x01\n" +
	"\x1cNetworkConnectionInfoService\x12i\n" +
	"\x19PushNetworkConnectionInfo\x12$.sensor.NetworkConnectionInfoMessage\x1a\".sensor.NetworkFlowsControlMessage(\x010\x01B0Z\x1b./internalapi/sensor;sensor\xf8\x01\x01\x92\x03\r\xd2>\x02\x10\x02\b\x02\x10\x01 \x020\x01b\beditionsp\xe8\a"

var file_internalapi_sensor_network_connection_iservice_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_internalapi_sensor_network_connection_iservice_proto_goTypes = []any{
	(*NetworkConnectionInfoMessage)(nil), // 0: sensor.NetworkConnectionInfoMessage
	(*NetworkFlowsControlMessage)(nil),   // 1: sensor.NetworkFlowsControlMessage
	(*IPAddressList)(nil),                // 2: sensor.IPAddressList
	(*IPNetworkList)(nil),                // 3: sensor.IPNetworkList
	(*CollectorRegisterRequest)(nil),     // 4: sensor.CollectorRegisterRequest
	(*NetworkConnectionInfo)(nil),        // 5: sensor.NetworkConnectionInfo
}
var file_internalapi_sensor_network_connection_iservice_proto_depIdxs = []int32{
	4, // 0: sensor.NetworkConnectionInfoMessage.register:type_name -> sensor.CollectorRegisterRequest
	5, // 1: sensor.NetworkConnectionInfoMessage.info:type_name -> sensor.NetworkConnectionInfo
	2, // 2: sensor.NetworkFlowsControlMessage.public_ip_addresses:type_name -> sensor.IPAddressList
	3, // 3: sensor.NetworkFlowsControlMessage.ip_networks:type_name -> sensor.IPNetworkList
	0, // 4: sensor.NetworkConnectionInfoService.PushNetworkConnectionInfo:input_type -> sensor.NetworkConnectionInfoMessage
	1, // 5: sensor.NetworkConnectionInfoService.PushNetworkConnectionInfo:output_type -> sensor.NetworkFlowsControlMessage
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_internalapi_sensor_network_connection_iservice_proto_init() }
func file_internalapi_sensor_network_connection_iservice_proto_init() {
	if File_internalapi_sensor_network_connection_iservice_proto != nil {
		return
	}
	file_internalapi_sensor_collector_proto_init()
	file_internalapi_sensor_network_connection_info_proto_init()
	file_internalapi_sensor_network_connection_iservice_proto_msgTypes[0].OneofWrappers = []any{
		(*NetworkConnectionInfoMessage_Register)(nil),
		(*NetworkConnectionInfoMessage_Info)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internalapi_sensor_network_connection_iservice_proto_rawDesc), len(file_internalapi_sensor_network_connection_iservice_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internalapi_sensor_network_connection_iservice_proto_goTypes,
		DependencyIndexes: file_internalapi_sensor_network_connection_iservice_proto_depIdxs,
		MessageInfos:      file_internalapi_sensor_network_connection_iservice_proto_msgTypes,
	}.Build()
	File_internalapi_sensor_network_connection_iservice_proto = out.File
	file_internalapi_sensor_network_connection_iservice_proto_goTypes = nil
	file_internalapi_sensor_network_connection_iservice_proto_depIdxs = nil
}
