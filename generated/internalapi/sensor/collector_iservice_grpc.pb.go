// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: internalapi/sensor/collector_iservice.proto

package sensor

import (
	context "context"
	v1 "github.com/stackrox/rox/generated/api/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectorService_Communicate_FullMethodName               = "/sensor.CollectorService/Communicate"
	CollectorService_PushProcesses_FullMethodName             = "/sensor.CollectorService/PushProcesses"
	CollectorService_PushNetworkConnectionInfo_FullMethodName = "/sensor.CollectorService/PushNetworkConnectionInfo"
)

// CollectorServiceClient is the client API for CollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MsgFromCollector, MsgToCollector], error)
	PushProcesses(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProcessSignal, v1.Empty], error)
	PushNetworkConnectionInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NetworkConnectionInfo, NetworkFlowsControlMessage], error)
}

type collectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorServiceClient(cc grpc.ClientConnInterface) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MsgFromCollector, MsgToCollector], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CollectorService_ServiceDesc.Streams[0], CollectorService_Communicate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MsgFromCollector, MsgToCollector]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorService_CommunicateClient = grpc.BidiStreamingClient[MsgFromCollector, MsgToCollector]

func (c *collectorServiceClient) PushProcesses(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProcessSignal, v1.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CollectorService_ServiceDesc.Streams[1], CollectorService_PushProcesses_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProcessSignal, v1.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorService_PushProcessesClient = grpc.BidiStreamingClient[ProcessSignal, v1.Empty]

func (c *collectorServiceClient) PushNetworkConnectionInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NetworkConnectionInfo, NetworkFlowsControlMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CollectorService_ServiceDesc.Streams[2], CollectorService_PushNetworkConnectionInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NetworkConnectionInfo, NetworkFlowsControlMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorService_PushNetworkConnectionInfoClient = grpc.BidiStreamingClient[NetworkConnectionInfo, NetworkFlowsControlMessage]

// CollectorServiceServer is the server API for CollectorService service.
// All implementations should embed UnimplementedCollectorServiceServer
// for forward compatibility.
type CollectorServiceServer interface {
	Communicate(grpc.BidiStreamingServer[MsgFromCollector, MsgToCollector]) error
	PushProcesses(grpc.BidiStreamingServer[ProcessSignal, v1.Empty]) error
	PushNetworkConnectionInfo(grpc.BidiStreamingServer[NetworkConnectionInfo, NetworkFlowsControlMessage]) error
}

// UnimplementedCollectorServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectorServiceServer struct{}

func (UnimplementedCollectorServiceServer) Communicate(grpc.BidiStreamingServer[MsgFromCollector, MsgToCollector]) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedCollectorServiceServer) PushProcesses(grpc.BidiStreamingServer[ProcessSignal, v1.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method PushProcesses not implemented")
}
func (UnimplementedCollectorServiceServer) PushNetworkConnectionInfo(grpc.BidiStreamingServer[NetworkConnectionInfo, NetworkFlowsControlMessage]) error {
	return status.Errorf(codes.Unimplemented, "method PushNetworkConnectionInfo not implemented")
}
func (UnimplementedCollectorServiceServer) testEmbeddedByValue() {}

// UnsafeCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServiceServer will
// result in compilation errors.
type UnsafeCollectorServiceServer interface {
	mustEmbedUnimplementedCollectorServiceServer()
}

func RegisterCollectorServiceServer(s grpc.ServiceRegistrar, srv CollectorServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollectorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectorService_ServiceDesc, srv)
}

func _CollectorService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServiceServer).Communicate(&grpc.GenericServerStream[MsgFromCollector, MsgToCollector]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorService_CommunicateServer = grpc.BidiStreamingServer[MsgFromCollector, MsgToCollector]

func _CollectorService_PushProcesses_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServiceServer).PushProcesses(&grpc.GenericServerStream[ProcessSignal, v1.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorService_PushProcessesServer = grpc.BidiStreamingServer[ProcessSignal, v1.Empty]

func _CollectorService_PushNetworkConnectionInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServiceServer).PushNetworkConnectionInfo(&grpc.GenericServerStream[NetworkConnectionInfo, NetworkFlowsControlMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorService_PushNetworkConnectionInfoServer = grpc.BidiStreamingServer[NetworkConnectionInfo, NetworkFlowsControlMessage]

// CollectorService_ServiceDesc is the grpc.ServiceDesc for CollectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _CollectorService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PushProcesses",
			Handler:       _CollectorService_PushProcesses_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PushNetworkConnectionInfo",
			Handler:       _CollectorService_PushNetworkConnectionInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/sensor/collector_iservice.proto",
}
