// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internalapi/sensor/collector_iservice.proto

package sensor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CollectorService_Communicate_FullMethodName = "/sensor.CollectorService/Communicate"
)

// CollectorServiceClient is the client API for CollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorServiceClient interface {
	Communicate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CollectorService_CommunicateClient, error)
}

type collectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorServiceClient(cc grpc.ClientConnInterface) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) Communicate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CollectorService_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CollectorService_ServiceDesc.Streams[0], CollectorService_Communicate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorServiceCommunicateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CollectorService_CommunicateClient interface {
	Recv() (*MsgToCollector, error)
	grpc.ClientStream
}

type collectorServiceCommunicateClient struct {
	grpc.ClientStream
}

func (x *collectorServiceCommunicateClient) Recv() (*MsgToCollector, error) {
	m := new(MsgToCollector)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectorServiceServer is the server API for CollectorService service.
// All implementations should embed UnimplementedCollectorServiceServer
// for forward compatibility
type CollectorServiceServer interface {
	Communicate(*emptypb.Empty, CollectorService_CommunicateServer) error
}

// UnimplementedCollectorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCollectorServiceServer struct {
}

func (UnimplementedCollectorServiceServer) Communicate(*emptypb.Empty, CollectorService_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}

// UnsafeCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServiceServer will
// result in compilation errors.
type UnsafeCollectorServiceServer interface {
	mustEmbedUnimplementedCollectorServiceServer()
}

func RegisterCollectorServiceServer(s grpc.ServiceRegistrar, srv CollectorServiceServer) {
	s.RegisterService(&CollectorService_ServiceDesc, srv)
}

func _CollectorService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectorServiceServer).Communicate(m, &collectorServiceCommunicateServer{stream})
}

type CollectorService_CommunicateServer interface {
	Send(*MsgToCollector) error
	grpc.ServerStream
}

type collectorServiceCommunicateServer struct {
	grpc.ServerStream
}

func (x *collectorServiceCommunicateServer) Send(m *MsgToCollector) error {
	return x.ServerStream.SendMsg(m)
}

// CollectorService_ServiceDesc is the grpc.ServiceDesc for CollectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _CollectorService_Communicate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internalapi/sensor/collector_iservice.proto",
}
