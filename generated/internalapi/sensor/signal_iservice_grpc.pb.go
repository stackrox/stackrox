// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: internalapi/sensor/signal_iservice.proto

package sensor

import (
	context "context"
	v1 "github.com/stackrox/rox/generated/api/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SignalService_PushSignals_FullMethodName = "/sensor.SignalService/PushSignals"
)

// SignalServiceClient is the client API for SignalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A Sensor service that allows Collector to push Signal messages
type SignalServiceClient interface {
	// Note: the response is a stream due to a bug in the C++ GRPC client library. The server is not expected to
	// send anything via this stream.
	PushSignals(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SignalStreamMessage, v1.Empty], error)
}

type signalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalServiceClient(cc grpc.ClientConnInterface) SignalServiceClient {
	return &signalServiceClient{cc}
}

func (c *signalServiceClient) PushSignals(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SignalStreamMessage, v1.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SignalService_ServiceDesc.Streams[0], SignalService_PushSignals_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SignalStreamMessage, v1.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SignalService_PushSignalsClient = grpc.BidiStreamingClient[SignalStreamMessage, v1.Empty]

// SignalServiceServer is the server API for SignalService service.
// All implementations should embed UnimplementedSignalServiceServer
// for forward compatibility.
//
// A Sensor service that allows Collector to push Signal messages
type SignalServiceServer interface {
	// Note: the response is a stream due to a bug in the C++ GRPC client library. The server is not expected to
	// send anything via this stream.
	PushSignals(grpc.BidiStreamingServer[SignalStreamMessage, v1.Empty]) error
}

// UnimplementedSignalServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSignalServiceServer struct{}

func (UnimplementedSignalServiceServer) PushSignals(grpc.BidiStreamingServer[SignalStreamMessage, v1.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method PushSignals not implemented")
}
func (UnimplementedSignalServiceServer) testEmbeddedByValue() {}

// UnsafeSignalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignalServiceServer will
// result in compilation errors.
type UnsafeSignalServiceServer interface {
	mustEmbedUnimplementedSignalServiceServer()
}

func RegisterSignalServiceServer(s grpc.ServiceRegistrar, srv SignalServiceServer) {
	// If the following call pancis, it indicates UnimplementedSignalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SignalService_ServiceDesc, srv)
}

func _SignalService_PushSignals_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignalServiceServer).PushSignals(&grpc.GenericServerStream[SignalStreamMessage, v1.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SignalService_PushSignalsServer = grpc.BidiStreamingServer[SignalStreamMessage, v1.Empty]

// SignalService_ServiceDesc is the grpc.ServiceDesc for SignalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.SignalService",
	HandlerType: (*SignalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushSignals",
			Handler:       _SignalService_PushSignals_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/sensor/signal_iservice.proto",
}
