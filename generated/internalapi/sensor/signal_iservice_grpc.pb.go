// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internalapi/sensor/signal_iservice.proto

package sensor

import (
	context "context"
	v1 "github.com/stackrox/rox/generated/api/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SignalService_PushSignals_FullMethodName = "/sensor.SignalService/PushSignals"
)

// SignalServiceClient is the client API for SignalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignalServiceClient interface {
	// Note: the response is a stream due to a bug in the C++ GRPC client library. The server is not expected to
	// send anything via this stream.
	PushSignals(ctx context.Context, opts ...grpc.CallOption) (SignalService_PushSignalsClient, error)
}

type signalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalServiceClient(cc grpc.ClientConnInterface) SignalServiceClient {
	return &signalServiceClient{cc}
}

func (c *signalServiceClient) PushSignals(ctx context.Context, opts ...grpc.CallOption) (SignalService_PushSignalsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignalService_ServiceDesc.Streams[0], SignalService_PushSignals_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &signalServicePushSignalsClient{stream}
	return x, nil
}

type SignalService_PushSignalsClient interface {
	Send(*SignalStreamMessage) error
	Recv() (*v1.Empty, error)
	grpc.ClientStream
}

type signalServicePushSignalsClient struct {
	grpc.ClientStream
}

func (x *signalServicePushSignalsClient) Send(m *SignalStreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signalServicePushSignalsClient) Recv() (*v1.Empty, error) {
	m := new(v1.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignalServiceServer is the server API for SignalService service.
// All implementations should embed UnimplementedSignalServiceServer
// for forward compatibility
type SignalServiceServer interface {
	// Note: the response is a stream due to a bug in the C++ GRPC client library. The server is not expected to
	// send anything via this stream.
	PushSignals(SignalService_PushSignalsServer) error
}

// UnimplementedSignalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSignalServiceServer struct {
}

func (UnimplementedSignalServiceServer) PushSignals(SignalService_PushSignalsServer) error {
	return status.Errorf(codes.Unimplemented, "method PushSignals not implemented")
}

// UnsafeSignalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignalServiceServer will
// result in compilation errors.
type UnsafeSignalServiceServer interface {
	mustEmbedUnimplementedSignalServiceServer()
}

func RegisterSignalServiceServer(s grpc.ServiceRegistrar, srv SignalServiceServer) {
	s.RegisterService(&SignalService_ServiceDesc, srv)
}

func _SignalService_PushSignals_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignalServiceServer).PushSignals(&signalServicePushSignalsServer{stream})
}

type SignalService_PushSignalsServer interface {
	Send(*v1.Empty) error
	Recv() (*SignalStreamMessage, error)
	grpc.ServerStream
}

type signalServicePushSignalsServer struct {
	grpc.ServerStream
}

func (x *signalServicePushSignalsServer) Send(m *v1.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signalServicePushSignalsServer) Recv() (*SignalStreamMessage, error) {
	m := new(SignalStreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignalService_ServiceDesc is the grpc.ServiceDesc for SignalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.SignalService",
	HandlerType: (*SignalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushSignals",
			Handler:       _SignalService_PushSignals_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/sensor/signal_iservice.proto",
}
