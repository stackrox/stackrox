// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/sensor/compliance_nodescan.proto

package sensor

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Names and data types are designed to follow proto/storage/node.proto as close as possible
// Next tag: 5
type FullNodeScan struct {
	Id                   string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Node ID,store" sql:"pk"`
	Name                 string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" search:"Node,store"`
	ScanTime             *types.Timestamp         `protobuf:"bytes,3,opt,name=scan_time,json=scanTime,proto3" json:"scan_time,omitempty" search:"Node Scan Time,store"`
	Components           []*FullNodeScanComponent `protobuf:"bytes,4,rep,name=components,proto3" json:"components,omitempty" sql:"-"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *FullNodeScan) Reset()         { *m = FullNodeScan{} }
func (m *FullNodeScan) String() string { return proto.CompactTextString(m) }
func (*FullNodeScan) ProtoMessage()    {}
func (*FullNodeScan) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c2ec431e25d2b87, []int{0}
}
func (m *FullNodeScan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullNodeScan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullNodeScan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullNodeScan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullNodeScan.Merge(m, src)
}
func (m *FullNodeScan) XXX_Size() int {
	return m.Size()
}
func (m *FullNodeScan) XXX_DiscardUnknown() {
	xxx_messageInfo_FullNodeScan.DiscardUnknown(m)
}

var xxx_messageInfo_FullNodeScan proto.InternalMessageInfo

func (m *FullNodeScan) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FullNodeScan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FullNodeScan) GetScanTime() *types.Timestamp {
	if m != nil {
		return m.ScanTime
	}
	return nil
}

func (m *FullNodeScan) GetComponents() []*FullNodeScanComponent {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *FullNodeScan) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FullNodeScan) Clone() *FullNodeScan {
	if m == nil {
		return nil
	}
	cloned := new(FullNodeScan)
	*cloned = *m

	cloned.ScanTime = m.ScanTime.Clone()
	if m.Components != nil {
		cloned.Components = make([]*FullNodeScanComponent, len(m.Components))
		for idx, v := range m.Components {
			cloned.Components[idx] = v.Clone()
		}
	}
	return cloned
}

type FullNodeScanComponent struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" search:"Component,store"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" search:"Component Version,store"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FullNodeScanComponent) Reset()         { *m = FullNodeScanComponent{} }
func (m *FullNodeScanComponent) String() string { return proto.CompactTextString(m) }
func (*FullNodeScanComponent) ProtoMessage()    {}
func (*FullNodeScanComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c2ec431e25d2b87, []int{1}
}
func (m *FullNodeScanComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullNodeScanComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullNodeScanComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullNodeScanComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullNodeScanComponent.Merge(m, src)
}
func (m *FullNodeScanComponent) XXX_Size() int {
	return m.Size()
}
func (m *FullNodeScanComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_FullNodeScanComponent.DiscardUnknown(m)
}

var xxx_messageInfo_FullNodeScanComponent proto.InternalMessageInfo

func (m *FullNodeScanComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FullNodeScanComponent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FullNodeScanComponent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FullNodeScanComponent) Clone() *FullNodeScanComponent {
	if m == nil {
		return nil
	}
	cloned := new(FullNodeScanComponent)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*FullNodeScan)(nil), "sensor.FullNodeScan")
	proto.RegisterType((*FullNodeScanComponent)(nil), "sensor.FullNodeScanComponent")
}

func init() {
	proto.RegisterFile("internalapi/sensor/compliance_nodescan.proto", fileDescriptor_6c2ec431e25d2b87)
}

var fileDescriptor_6c2ec431e25d2b87 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0x6f, 0xd2, 0xaa, 0xbd, 0x75, 0xef, 0x94, 0x0b, 0x22, 0xaa, 0x68, 0x6c, 0x02, 0x43,
	0x25, 0x4a, 0x82, 0xda, 0xad, 0x03, 0x43, 0x40, 0x48, 0x30, 0x30, 0x14, 0xc4, 0xd0, 0xa5, 0x72,
	0x13, 0x13, 0x22, 0x12, 0x3b, 0xc4, 0x29, 0xef, 0xc0, 0x1b, 0xf4, 0x91, 0x18, 0x79, 0x82, 0x08,
	0x95, 0x37, 0xc8, 0x13, 0x20, 0xc7, 0x31, 0x6a, 0x05, 0x9b, 0x75, 0xf4, 0x7f, 0x47, 0xdf, 0xf9,
	0x0d, 0x86, 0x11, 0xcd, 0x49, 0x46, 0x71, 0x8c, 0xd3, 0xc8, 0xe5, 0x84, 0x72, 0x96, 0xb9, 0x3e,
	0x4b, 0xd2, 0x38, 0xc2, 0xd4, 0x27, 0x73, 0xca, 0x02, 0xc2, 0x7d, 0x4c, 0x9d, 0x34, 0x63, 0x39,
	0x33, 0x5a, 0x32, 0xd1, 0x83, 0x21, 0x63, 0x61, 0x4c, 0xdc, 0x6a, 0xba, 0x58, 0x3e, 0xb8, 0x79,
	0x94, 0x10, 0x9e, 0xe3, 0x24, 0x95, 0xc1, 0xde, 0x4e, 0xc8, 0x42, 0x56, 0x3d, 0x5d, 0xf1, 0x92,
	0x53, 0x7b, 0xa5, 0x83, 0x7f, 0x97, 0xcb, 0x38, 0xbe, 0x61, 0x01, 0xb9, 0xf5, 0x31, 0x35, 0xc6,
	0x40, 0x8f, 0x02, 0x53, 0x43, 0xda, 0xa0, 0xe3, 0x1d, 0x96, 0x05, 0x84, 0x9c, 0xe0, 0xcc, 0x7f,
	0x9c, 0xd8, 0x22, 0x81, 0xae, 0x2e, 0x86, 0x3c, 0x67, 0x19, 0xb1, 0x11, 0x7f, 0x8e, 0x27, 0x76,
	0xfa, 0x64, 0x4f, 0xf5, 0x28, 0x30, 0x8e, 0x41, 0x93, 0xe2, 0x84, 0x98, 0x7a, 0x85, 0xed, 0x95,
	0x05, 0xfc, 0xbf, 0x89, 0xd5, 0xcc, 0xb4, 0x0a, 0x19, 0x33, 0xd0, 0x11, 0xfe, 0x73, 0x21, 0x68,
	0x36, 0x90, 0x36, 0xe8, 0x8e, 0x7a, 0x8e, 0xb4, 0x77, 0x94, 0xbd, 0x73, 0xa7, 0xec, 0xbd, 0x83,
	0xb2, 0x80, 0xfd, 0x2d, 0x09, 0xe1, 0x89, 0x44, 0x40, 0xed, 0xfd, 0x2b, 0xf6, 0x89, 0x81, 0x71,
	0x0d, 0x80, 0xa8, 0x8a, 0x51, 0x42, 0x73, 0x6e, 0x36, 0x51, 0x63, 0xd0, 0x1d, 0xf5, 0x1d, 0x59,
	0x91, 0xb3, 0x79, 0xe7, 0xb9, 0x4a, 0x79, 0xdd, 0xb2, 0x80, 0xed, 0xea, 0x9a, 0x13, 0x7b, 0xba,
	0x41, 0xdb, 0xaf, 0x1a, 0xd8, 0xfd, 0x15, 0x31, 0x4e, 0xeb, 0x73, 0x65, 0x4b, 0xfb, 0x65, 0x01,
	0x4d, 0x25, 0xf8, 0x1d, 0xda, 0xbe, 0xf9, 0x0c, 0xb4, 0x5f, 0x48, 0xc6, 0x23, 0x46, 0xeb, 0x8e,
	0x8e, 0xca, 0x02, 0xa2, 0x1f, 0x10, 0xba, 0x97, 0x21, 0x05, 0x2b, 0xc8, 0x33, 0xdf, 0xd6, 0x96,
	0xf6, 0xbe, 0xb6, 0xb4, 0x8f, 0xb5, 0xa5, 0xad, 0x3e, 0xad, 0x3f, 0xb3, 0xfa, 0xdf, 0x17, 0xad,
	0xaa, 0xb2, 0xf1, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x87, 0xa9, 0x9b, 0x36, 0x02, 0x00,
	0x00,
}

func (m *FullNodeScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullNodeScan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullNodeScan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Components) > 0 {
		for iNdEx := len(m.Components) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Components[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceNodescan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ScanTime != nil {
		{
			size, err := m.ScanTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceNodescan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintComplianceNodescan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceNodescan(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FullNodeScanComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullNodeScanComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullNodeScanComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintComplianceNodescan(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintComplianceNodescan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceNodescan(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceNodescan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FullNodeScan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceNodescan(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovComplianceNodescan(uint64(l))
	}
	if m.ScanTime != nil {
		l = m.ScanTime.Size()
		n += 1 + l + sovComplianceNodescan(uint64(l))
	}
	if len(m.Components) > 0 {
		for _, e := range m.Components {
			l = e.Size()
			n += 1 + l + sovComplianceNodescan(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FullNodeScanComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovComplianceNodescan(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovComplianceNodescan(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceNodescan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceNodescan(x uint64) (n int) {
	return sovComplianceNodescan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FullNodeScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceNodescan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullNodeScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullNodeScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceNodescan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceNodescan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceNodescan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanTime == nil {
				m.ScanTime = &types.Timestamp{}
			}
			if err := m.ScanTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceNodescan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Components = append(m.Components, &FullNodeScanComponent{})
			if err := m.Components[len(m.Components)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceNodescan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullNodeScanComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceNodescan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullNodeScanComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullNodeScanComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceNodescan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceNodescan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceNodescan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceNodescan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceNodescan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceNodescan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceNodescan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceNodescan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceNodescan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceNodescan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceNodescan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceNodescan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceNodescan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceNodescan = fmt.Errorf("proto: unexpected end of group")
)
