// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/sensor/cert_distribution_iservice.proto

package sensor

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FetchCertificateRequest struct {
	ServiceType          storage.ServiceType `protobuf:"varint,1,opt,name=service_type,json=serviceType,proto3,enum=storage.ServiceType" json:"service_type,omitempty"`
	ServiceAccountToken  string              `protobuf:"bytes,2,opt,name=service_account_token,json=serviceAccountToken,proto3" json:"service_account_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FetchCertificateRequest) Reset()         { *m = FetchCertificateRequest{} }
func (m *FetchCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*FetchCertificateRequest) ProtoMessage()    {}
func (*FetchCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc1f5deeeb84e10, []int{0}
}
func (m *FetchCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchCertificateRequest.Merge(m, src)
}
func (m *FetchCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchCertificateRequest proto.InternalMessageInfo

func (m *FetchCertificateRequest) GetServiceType() storage.ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return storage.ServiceType_UNKNOWN_SERVICE
}

func (m *FetchCertificateRequest) GetServiceAccountToken() string {
	if m != nil {
		return m.ServiceAccountToken
	}
	return ""
}

func (m *FetchCertificateRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FetchCertificateRequest) Clone() *FetchCertificateRequest {
	if m == nil {
		return nil
	}
	cloned := new(FetchCertificateRequest)
	*cloned = *m

	return cloned
}

type FetchCertificateResponse struct {
	PemCert              string   `protobuf:"bytes,1,opt,name=pem_cert,json=pemCert,proto3" json:"pem_cert,omitempty"`
	PemKey               string   `protobuf:"bytes,2,opt,name=pem_key,json=pemKey,proto3" json:"pem_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchCertificateResponse) Reset()         { *m = FetchCertificateResponse{} }
func (m *FetchCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*FetchCertificateResponse) ProtoMessage()    {}
func (*FetchCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc1f5deeeb84e10, []int{1}
}
func (m *FetchCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchCertificateResponse.Merge(m, src)
}
func (m *FetchCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchCertificateResponse proto.InternalMessageInfo

func (m *FetchCertificateResponse) GetPemCert() string {
	if m != nil {
		return m.PemCert
	}
	return ""
}

func (m *FetchCertificateResponse) GetPemKey() string {
	if m != nil {
		return m.PemKey
	}
	return ""
}

func (m *FetchCertificateResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FetchCertificateResponse) Clone() *FetchCertificateResponse {
	if m == nil {
		return nil
	}
	cloned := new(FetchCertificateResponse)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*FetchCertificateRequest)(nil), "sensor.FetchCertificateRequest")
	proto.RegisterType((*FetchCertificateResponse)(nil), "sensor.FetchCertificateResponse")
}

func init() {
	proto.RegisterFile("internalapi/sensor/cert_distribution_iservice.proto", fileDescriptor_bfc1f5deeeb84e10)
}

var fileDescriptor_bfc1f5deeeb84e10 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0x3f, 0x7f, 0x43, 0xa1, 0x06, 0x21, 0x64, 0x40, 0x2d, 0x45, 0x0a, 0x55, 0xa7, 0x2e,
	0x38, 0x52, 0x3a, 0x30, 0x30, 0xf1, 0x47, 0x2c, 0x48, 0x0c, 0xa1, 0x2c, 0x2c, 0x56, 0xea, 0x5e,
	0xc0, 0x2a, 0xb1, 0x8d, 0x7d, 0x83, 0x94, 0x17, 0xe0, 0x19, 0x78, 0x24, 0x46, 0x1e, 0x01, 0x85,
	0x17, 0x41, 0xa9, 0x53, 0x81, 0xa8, 0x3a, 0xd9, 0xd6, 0xf9, 0xdd, 0xeb, 0x73, 0xcf, 0xa5, 0x23,
	0xa5, 0x11, 0x9c, 0xce, 0x9e, 0x32, 0xab, 0x62, 0x0f, 0xda, 0x1b, 0x17, 0x4b, 0x70, 0x28, 0xa6,
	0xca, 0xa3, 0x53, 0x93, 0x02, 0x95, 0xd1, 0x42, 0x79, 0x70, 0x2f, 0x4a, 0x02, 0xb7, 0xce, 0xa0,
	0x61, 0xad, 0x00, 0xf6, 0x22, 0x8f, 0xc6, 0x65, 0x0f, 0x10, 0x37, 0xb2, 0x50, 0x53, 0xd0, 0xa8,
	0xb0, 0x0c, 0xdc, 0xe0, 0x95, 0xd0, 0xce, 0x25, 0xa0, 0x7c, 0x3c, 0x07, 0x87, 0xea, 0x5e, 0xc9,
	0x0c, 0x21, 0x85, 0xe7, 0x02, 0x3c, 0xb2, 0x63, 0xba, 0xb9, 0xa8, 0xc2, 0xd2, 0x42, 0x97, 0xf4,
	0xc9, 0x70, 0x2b, 0xd9, 0xe5, 0x4d, 0x4b, 0x7e, 0x13, 0xc4, 0x71, 0x69, 0x21, 0xdd, 0xf0, 0x3f,
	0x0f, 0x96, 0xd0, 0xbd, 0x45, 0x61, 0x26, 0xa5, 0x29, 0x34, 0x0a, 0x34, 0x33, 0xd0, 0xdd, 0xff,
	0x7d, 0x32, 0x6c, 0xa7, 0x3b, 0x8d, 0x78, 0x1a, 0xb4, 0x71, 0x2d, 0x0d, 0xae, 0x69, 0x77, 0xd9,
	0x87, 0xb7, 0x46, 0x7b, 0x60, 0xfb, 0x74, 0xdd, 0x42, 0x2e, 0xea, 0xa1, 0xe7, 0x26, 0xda, 0xe9,
	0x9a, 0x85, 0xbc, 0x26, 0x59, 0x87, 0xd6, 0x57, 0x31, 0x83, 0xb2, 0x69, 0xde, 0xb2, 0x90, 0x5f,
	0x41, 0x99, 0x58, 0xda, 0xa9, 0x81, 0x8b, 0x5f, 0x19, 0x35, 0x7e, 0xd9, 0x2d, 0xdd, 0xfe, 0xfb,
	0x15, 0x3b, 0xe4, 0x21, 0x30, 0xbe, 0x22, 0x8c, 0x5e, 0x7f, 0x35, 0x10, 0x5c, 0x9e, 0x1d, 0xbd,
	0x57, 0x11, 0xf9, 0xa8, 0x22, 0xf2, 0x59, 0x45, 0xe4, 0xed, 0x2b, 0xfa, 0x77, 0x77, 0xc0, 0xe3,
	0xe5, 0xdd, 0x9d, 0x84, 0x63, 0xd2, 0x9a, 0x2f, 0x60, 0xf4, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x52,
	0xef, 0x73, 0xda, 0xdf, 0x01, 0x00, 0x00,
}

func (m *FetchCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceAccountToken) > 0 {
		i -= len(m.ServiceAccountToken)
		copy(dAtA[i:], m.ServiceAccountToken)
		i = encodeVarintCertDistributionIservice(dAtA, i, uint64(len(m.ServiceAccountToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceType != 0 {
		i = encodeVarintCertDistributionIservice(dAtA, i, uint64(m.ServiceType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PemKey) > 0 {
		i -= len(m.PemKey)
		copy(dAtA[i:], m.PemKey)
		i = encodeVarintCertDistributionIservice(dAtA, i, uint64(len(m.PemKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PemCert) > 0 {
		i -= len(m.PemCert)
		copy(dAtA[i:], m.PemCert)
		i = encodeVarintCertDistributionIservice(dAtA, i, uint64(len(m.PemCert)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCertDistributionIservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovCertDistributionIservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FetchCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceType != 0 {
		n += 1 + sovCertDistributionIservice(uint64(m.ServiceType))
	}
	l = len(m.ServiceAccountToken)
	if l > 0 {
		n += 1 + l + sovCertDistributionIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PemCert)
	if l > 0 {
		n += 1 + l + sovCertDistributionIservice(uint64(l))
	}
	l = len(m.PemKey)
	if l > 0 {
		n += 1 + l + sovCertDistributionIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCertDistributionIservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCertDistributionIservice(x uint64) (n int) {
	return sovCertDistributionIservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FetchCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertDistributionIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			m.ServiceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertDistributionIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceType |= storage.ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertDistributionIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertDistributionIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertDistributionIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccountToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertDistributionIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCertDistributionIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertDistributionIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PemCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertDistributionIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertDistributionIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertDistributionIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PemCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PemKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertDistributionIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertDistributionIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertDistributionIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PemKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertDistributionIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCertDistributionIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCertDistributionIservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCertDistributionIservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertDistributionIservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertDistributionIservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCertDistributionIservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCertDistributionIservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCertDistributionIservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCertDistributionIservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCertDistributionIservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCertDistributionIservice = fmt.Errorf("proto: unexpected end of group")
)
