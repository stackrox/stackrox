// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: internalapi/sensor/compliance_iservice.proto

package sensor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComplianceService_Communicate_FullMethodName = "/sensor.ComplianceService/Communicate"
)

// ComplianceServiceClient is the client API for ComplianceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A Sensor service that allows Compliance to report node scrapes results, audit events, and node scans v2.
type ComplianceServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MsgFromCompliance, MsgToCompliance], error)
}

type complianceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceServiceClient(cc grpc.ClientConnInterface) ComplianceServiceClient {
	return &complianceServiceClient{cc}
}

func (c *complianceServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MsgFromCompliance, MsgToCompliance], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ComplianceService_ServiceDesc.Streams[0], ComplianceService_Communicate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MsgFromCompliance, MsgToCompliance]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ComplianceService_CommunicateClient = grpc.BidiStreamingClient[MsgFromCompliance, MsgToCompliance]

// ComplianceServiceServer is the server API for ComplianceService service.
// All implementations should embed UnimplementedComplianceServiceServer
// for forward compatibility.
//
// A Sensor service that allows Compliance to report node scrapes results, audit events, and node scans v2.
type ComplianceServiceServer interface {
	Communicate(grpc.BidiStreamingServer[MsgFromCompliance, MsgToCompliance]) error
}

// UnimplementedComplianceServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComplianceServiceServer struct{}

func (UnimplementedComplianceServiceServer) Communicate(grpc.BidiStreamingServer[MsgFromCompliance, MsgToCompliance]) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedComplianceServiceServer) testEmbeddedByValue() {}

// UnsafeComplianceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplianceServiceServer will
// result in compilation errors.
type UnsafeComplianceServiceServer interface {
	mustEmbedUnimplementedComplianceServiceServer()
}

func RegisterComplianceServiceServer(s grpc.ServiceRegistrar, srv ComplianceServiceServer) {
	// If the following call pancis, it indicates UnimplementedComplianceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComplianceService_ServiceDesc, srv)
}

func _ComplianceService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComplianceServiceServer).Communicate(&grpc.GenericServerStream[MsgFromCompliance, MsgToCompliance]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ComplianceService_CommunicateServer = grpc.BidiStreamingServer[MsgFromCompliance, MsgToCompliance]

// ComplianceService_ServiceDesc is the grpc.ServiceDesc for ComplianceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplianceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.ComplianceService",
	HandlerType: (*ComplianceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _ComplianceService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/sensor/compliance_iservice.proto",
}
