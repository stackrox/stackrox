// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: internalapi/sensor/sfa_iservice.proto

package sensor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileActivityService_Communicate_FullMethodName = "/sensor.FileActivityService/Communicate"
)

// FileActivityServiceClient is the client API for FileActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileActivityServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileActivity, emptypb.Empty], error)
}

type fileActivityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileActivityServiceClient(cc grpc.ClientConnInterface) FileActivityServiceClient {
	return &fileActivityServiceClient{cc}
}

func (c *fileActivityServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileActivity, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileActivityService_ServiceDesc.Streams[0], FileActivityService_Communicate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileActivity, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileActivityService_CommunicateClient = grpc.ClientStreamingClient[FileActivity, emptypb.Empty]

// FileActivityServiceServer is the server API for FileActivityService service.
// All implementations should embed UnimplementedFileActivityServiceServer
// for forward compatibility.
type FileActivityServiceServer interface {
	Communicate(grpc.ClientStreamingServer[FileActivity, emptypb.Empty]) error
}

// UnimplementedFileActivityServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileActivityServiceServer struct{}

func (UnimplementedFileActivityServiceServer) Communicate(grpc.ClientStreamingServer[FileActivity, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedFileActivityServiceServer) testEmbeddedByValue() {}

// UnsafeFileActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileActivityServiceServer will
// result in compilation errors.
type UnsafeFileActivityServiceServer interface {
	mustEmbedUnimplementedFileActivityServiceServer()
}

func RegisterFileActivityServiceServer(s grpc.ServiceRegistrar, srv FileActivityServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileActivityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileActivityService_ServiceDesc, srv)
}

func _FileActivityService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileActivityServiceServer).Communicate(&grpc.GenericServerStream[FileActivity, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileActivityService_CommunicateServer = grpc.ClientStreamingServer[FileActivity, emptypb.Empty]

// FileActivityService_ServiceDesc is the grpc.ServiceDesc for FileActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.FileActivityService",
	HandlerType: (*FileActivityServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _FileActivityService_Communicate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/sensor/sfa_iservice.proto",
}
