// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internalapi/sensor/network_connection_iservice.proto

package sensor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkConnectionInfoService_PushNetworkConnectionInfo_FullMethodName = "/sensor.NetworkConnectionInfoService/PushNetworkConnectionInfo"
)

// NetworkConnectionInfoServiceClient is the client API for NetworkConnectionInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkConnectionInfoServiceClient interface {
	// Note: the response is a stream due to a bug in the C++ GRPC client library. The server is not expected to
	// send anything via this stream.
	PushNetworkConnectionInfo(ctx context.Context, opts ...grpc.CallOption) (NetworkConnectionInfoService_PushNetworkConnectionInfoClient, error)
}

type networkConnectionInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkConnectionInfoServiceClient(cc grpc.ClientConnInterface) NetworkConnectionInfoServiceClient {
	return &networkConnectionInfoServiceClient{cc}
}

func (c *networkConnectionInfoServiceClient) PushNetworkConnectionInfo(ctx context.Context, opts ...grpc.CallOption) (NetworkConnectionInfoService_PushNetworkConnectionInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkConnectionInfoService_ServiceDesc.Streams[0], NetworkConnectionInfoService_PushNetworkConnectionInfo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &networkConnectionInfoServicePushNetworkConnectionInfoClient{stream}
	return x, nil
}

type NetworkConnectionInfoService_PushNetworkConnectionInfoClient interface {
	Send(*NetworkConnectionInfoMessage) error
	Recv() (*NetworkFlowsControlMessage, error)
	grpc.ClientStream
}

type networkConnectionInfoServicePushNetworkConnectionInfoClient struct {
	grpc.ClientStream
}

func (x *networkConnectionInfoServicePushNetworkConnectionInfoClient) Send(m *NetworkConnectionInfoMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkConnectionInfoServicePushNetworkConnectionInfoClient) Recv() (*NetworkFlowsControlMessage, error) {
	m := new(NetworkFlowsControlMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkConnectionInfoServiceServer is the server API for NetworkConnectionInfoService service.
// All implementations should embed UnimplementedNetworkConnectionInfoServiceServer
// for forward compatibility
type NetworkConnectionInfoServiceServer interface {
	// Note: the response is a stream due to a bug in the C++ GRPC client library. The server is not expected to
	// send anything via this stream.
	PushNetworkConnectionInfo(NetworkConnectionInfoService_PushNetworkConnectionInfoServer) error
}

// UnimplementedNetworkConnectionInfoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNetworkConnectionInfoServiceServer struct {
}

func (UnimplementedNetworkConnectionInfoServiceServer) PushNetworkConnectionInfo(NetworkConnectionInfoService_PushNetworkConnectionInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method PushNetworkConnectionInfo not implemented")
}

// UnsafeNetworkConnectionInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkConnectionInfoServiceServer will
// result in compilation errors.
type UnsafeNetworkConnectionInfoServiceServer interface {
	mustEmbedUnimplementedNetworkConnectionInfoServiceServer()
}

func RegisterNetworkConnectionInfoServiceServer(s grpc.ServiceRegistrar, srv NetworkConnectionInfoServiceServer) {
	s.RegisterService(&NetworkConnectionInfoService_ServiceDesc, srv)
}

func _NetworkConnectionInfoService_PushNetworkConnectionInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkConnectionInfoServiceServer).PushNetworkConnectionInfo(&networkConnectionInfoServicePushNetworkConnectionInfoServer{stream})
}

type NetworkConnectionInfoService_PushNetworkConnectionInfoServer interface {
	Send(*NetworkFlowsControlMessage) error
	Recv() (*NetworkConnectionInfoMessage, error)
	grpc.ServerStream
}

type networkConnectionInfoServicePushNetworkConnectionInfoServer struct {
	grpc.ServerStream
}

func (x *networkConnectionInfoServicePushNetworkConnectionInfoServer) Send(m *NetworkFlowsControlMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkConnectionInfoServicePushNetworkConnectionInfoServer) Recv() (*NetworkConnectionInfoMessage, error) {
	m := new(NetworkConnectionInfoMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkConnectionInfoService_ServiceDesc is the grpc.ServiceDesc for NetworkConnectionInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkConnectionInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.NetworkConnectionInfoService",
	HandlerType: (*NetworkConnectionInfoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushNetworkConnectionInfo",
			Handler:       _NetworkConnectionInfoService_PushNetworkConnectionInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/sensor/network_connection_iservice.proto",
}
