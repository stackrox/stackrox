// Code generated by protoc-gen-go-immutable. DO NOT EDIT.

package sensor

import (
	storage "github.com/stackrox/rox/generated/storage"
)

import (
	"iter"
	"time"
)

// ImmutableNetworkConnectionInfo is an immutable interface for NetworkConnectionInfo
type ImmutableNetworkConnectionInfo interface {
	// Network connections that were added from the last time state was sent.
	GetImmutableUpdatedConnections() iter.Seq[ImmutableNetworkConnection]
	// Listening endpoints that were added from the last time state was sent.
	GetImmutableUpdatedEndpoints() iter.Seq[ImmutableNetworkEndpoint]
	// For active connections, the timestamp of the entire message serves as the latest timestamp
	// that connection was deemed active = the connection was not closed yet at that moment.
	// This is set by Collector and it is the time of creation of the message in Collector.
	GetImmutableTime() time.Time
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *NetworkConnectionInfo
}

// GetImmutableUpdatedConnections implements ImmutableNetworkConnectionInfo
func (m *NetworkConnectionInfo) GetImmutableUpdatedConnections() iter.Seq[ImmutableNetworkConnection] {
	return func(yield func(ImmutableNetworkConnection) bool) {
		if m == nil || m.UpdatedConnections == nil {
			return
		}
		for _, v := range m.UpdatedConnections {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableUpdatedEndpoints implements ImmutableNetworkConnectionInfo
func (m *NetworkConnectionInfo) GetImmutableUpdatedEndpoints() iter.Seq[ImmutableNetworkEndpoint] {
	return func(yield func(ImmutableNetworkEndpoint) bool) {
		if m == nil || m.UpdatedEndpoints == nil {
			return
		}
		for _, v := range m.UpdatedEndpoints {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableTime implements ImmutableNetworkConnectionInfo
func (m *NetworkConnectionInfo) GetImmutableTime() time.Time {
	if m == nil || m.Time == nil {
		return time.Time{}
	}
	return m.Time.AsTime()
}

// Verify that NetworkConnectionInfo implements ImmutableNetworkConnectionInfo
var _ ImmutableNetworkConnectionInfo = (*NetworkConnectionInfo)(nil)

// ImmutableNetworkConnection is an immutable interface for NetworkConnection
type ImmutableNetworkConnection interface {
	GetSocketFamily() SocketFamily
	GetImmutableLocalAddress() ImmutableNetworkAddress
	GetImmutableRemoteAddress() ImmutableNetworkAddress
	GetProtocol() storage.L4Protocol
	GetRole() ClientServerRole
	GetContainerId() string
	// If this connection was closed, this gives the timestamp when it was closed. If this is unset, we treat it as an
	// open connection.
	GetImmutableCloseTimestamp() time.Time
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *NetworkConnection
}

// GetImmutableLocalAddress implements ImmutableNetworkConnection
func (m *NetworkConnection) GetImmutableLocalAddress() ImmutableNetworkAddress {
	return m.GetLocalAddress()
}

// GetImmutableRemoteAddress implements ImmutableNetworkConnection
func (m *NetworkConnection) GetImmutableRemoteAddress() ImmutableNetworkAddress {
	return m.GetRemoteAddress()
}

// GetImmutableCloseTimestamp implements ImmutableNetworkConnection
func (m *NetworkConnection) GetImmutableCloseTimestamp() time.Time {
	if m == nil || m.CloseTimestamp == nil {
		return time.Time{}
	}
	return m.CloseTimestamp.AsTime()
}

// Verify that NetworkConnection implements ImmutableNetworkConnection
var _ ImmutableNetworkConnection = (*NetworkConnection)(nil)

// ImmutableNetworkEndpoint is an immutable interface for NetworkEndpoint
type ImmutableNetworkEndpoint interface {
	GetSocketFamily() SocketFamily
	GetProtocol() storage.L4Protocol
	// The address_data part might be empty to indicate "all interfaces", or to simply save space.
	GetImmutableListenAddress() ImmutableNetworkAddress
	GetContainerId() string
	// If we're no longer listening on this endpoint, this gives the timestamp when the listen socket
	// was shutdown. If this is unset, we treat it as an actively listening endpoint.
	GetImmutableCloseTimestamp() time.Time
	GetOriginator() *storage.NetworkProcessUniqueKey
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *NetworkEndpoint
}

// GetImmutableListenAddress implements ImmutableNetworkEndpoint
func (m *NetworkEndpoint) GetImmutableListenAddress() ImmutableNetworkAddress {
	return m.GetListenAddress()
}

// GetImmutableCloseTimestamp implements ImmutableNetworkEndpoint
func (m *NetworkEndpoint) GetImmutableCloseTimestamp() time.Time {
	if m == nil || m.CloseTimestamp == nil {
		return time.Time{}
	}
	return m.CloseTimestamp.AsTime()
}

// Verify that NetworkEndpoint implements ImmutableNetworkEndpoint
var _ ImmutableNetworkEndpoint = (*NetworkEndpoint)(nil)

// ImmutableNetworkAddress is an immutable interface for NetworkAddress
type ImmutableNetworkAddress interface {
	GetAddressData() []byte
	GetPort() uint32
	// Represents an IPV4 or IPV6 network. First 4/16 bytes representing network address whereas following byte represents
	// the length of network prefix. If used, this field must have 5 or 17 bytes; otherwise it should be discarded.
	// `ip_network` and `address_data` usage should be mutually exclusive.
	GetIpNetwork() []byte
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *NetworkAddress
}

// Verify that NetworkAddress implements ImmutableNetworkAddress
var _ ImmutableNetworkAddress = (*NetworkAddress)(nil)
