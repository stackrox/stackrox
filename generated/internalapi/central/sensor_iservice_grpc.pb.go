// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internalapi/central/sensor_iservice.proto

package central

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SensorService_Communicate_FullMethodName = "/central.SensorService/Communicate"
)

// SensorServiceClient is the client API for SensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (SensorService_CommunicateClient, error)
}

type sensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorServiceClient(cc grpc.ClientConnInterface) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (SensorService_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &SensorService_ServiceDesc.Streams[0], SensorService_Communicate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorServiceCommunicateClient{stream}
	return x, nil
}

type SensorService_CommunicateClient interface {
	Send(*MsgFromSensor) error
	Recv() (*MsgToSensor, error)
	grpc.ClientStream
}

type sensorServiceCommunicateClient struct {
	grpc.ClientStream
}

func (x *sensorServiceCommunicateClient) Send(m *MsgFromSensor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sensorServiceCommunicateClient) Recv() (*MsgToSensor, error) {
	m := new(MsgToSensor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorServiceServer is the server API for SensorService service.
// All implementations should embed UnimplementedSensorServiceServer
// for forward compatibility
type SensorServiceServer interface {
	Communicate(SensorService_CommunicateServer) error
}

// UnimplementedSensorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSensorServiceServer struct {
}

func (UnimplementedSensorServiceServer) Communicate(SensorService_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}

// UnsafeSensorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorServiceServer will
// result in compilation errors.
type UnsafeSensorServiceServer interface {
	mustEmbedUnimplementedSensorServiceServer()
}

func RegisterSensorServiceServer(s grpc.ServiceRegistrar, srv SensorServiceServer) {
	s.RegisterService(&SensorService_ServiceDesc, srv)
}

func _SensorService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensorServiceServer).Communicate(&sensorServiceCommunicateServer{stream})
}

type SensorService_CommunicateServer interface {
	Send(*MsgToSensor) error
	Recv() (*MsgFromSensor, error)
	grpc.ServerStream
}

type sensorServiceCommunicateServer struct {
	grpc.ServerStream
}

func (x *sensorServiceCommunicateServer) Send(m *MsgToSensor) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sensorServiceCommunicateServer) Recv() (*MsgFromSensor, error) {
	m := new(MsgFromSensor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorService_ServiceDesc is the grpc.ServiceDesc for SensorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "central.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _SensorService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/central/sensor_iservice.proto",
}
