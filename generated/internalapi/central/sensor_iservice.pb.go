// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/central/sensor_iservice.proto

package central

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MsgFromSensor struct {
	HashKey   string `protobuf:"bytes,7,opt,name=hash_key,json=hashKey,proto3" json:"hash_key,omitempty"`
	DedupeKey string `protobuf:"bytes,8,opt,name=dedupe_key,json=dedupeKey,proto3" json:"dedupe_key,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*MsgFromSensor_Event
	//	*MsgFromSensor_NetworkFlowUpdate
	//	*MsgFromSensor_ScrapeUpdate
	//	*MsgFromSensor_NetworkPoliciesResponse
	//	*MsgFromSensor_ClusterStatusUpdate
	//	*MsgFromSensor_TelemetryDataResponse
	//	*MsgFromSensor_ClusterHealthInfo
	//	*MsgFromSensor_Hello
	//	*MsgFromSensor_AuditLogStatusInfo
	//	*MsgFromSensor_IssueLocalScannerCertsRequest
	Msg                  isMsgFromSensor_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MsgFromSensor) Reset()         { *m = MsgFromSensor{} }
func (m *MsgFromSensor) String() string { return proto.CompactTextString(m) }
func (*MsgFromSensor) ProtoMessage()    {}
func (*MsgFromSensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{0}
}
func (m *MsgFromSensor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFromSensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFromSensor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFromSensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFromSensor.Merge(m, src)
}
func (m *MsgFromSensor) XXX_Size() int {
	return m.Size()
}
func (m *MsgFromSensor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFromSensor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFromSensor proto.InternalMessageInfo

type isMsgFromSensor_Msg interface {
	isMsgFromSensor_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isMsgFromSensor_Msg
}

type MsgFromSensor_Event struct {
	Event *SensorEvent `protobuf:"bytes,1,opt,name=event,proto3,oneof" json:"event,omitempty"`
}
type MsgFromSensor_NetworkFlowUpdate struct {
	NetworkFlowUpdate *NetworkFlowUpdate `protobuf:"bytes,2,opt,name=network_flow_update,json=networkFlowUpdate,proto3,oneof" json:"network_flow_update,omitempty"`
}
type MsgFromSensor_ScrapeUpdate struct {
	ScrapeUpdate *ScrapeUpdate `protobuf:"bytes,3,opt,name=scrape_update,json=scrapeUpdate,proto3,oneof" json:"scrape_update,omitempty"`
}
type MsgFromSensor_NetworkPoliciesResponse struct {
	NetworkPoliciesResponse *NetworkPoliciesResponse `protobuf:"bytes,4,opt,name=network_policies_response,json=networkPoliciesResponse,proto3,oneof" json:"network_policies_response,omitempty"`
}
type MsgFromSensor_ClusterStatusUpdate struct {
	ClusterStatusUpdate *ClusterStatusUpdate `protobuf:"bytes,5,opt,name=cluster_status_update,json=clusterStatusUpdate,proto3,oneof" json:"cluster_status_update,omitempty"`
}
type MsgFromSensor_TelemetryDataResponse struct {
	TelemetryDataResponse *PullTelemetryDataResponse `protobuf:"bytes,6,opt,name=telemetry_data_response,json=telemetryDataResponse,proto3,oneof" json:"telemetry_data_response,omitempty"`
}
type MsgFromSensor_ClusterHealthInfo struct {
	ClusterHealthInfo *RawClusterHealthInfo `protobuf:"bytes,9,opt,name=cluster_health_info,json=clusterHealthInfo,proto3,oneof" json:"cluster_health_info,omitempty"`
}
type MsgFromSensor_Hello struct {
	Hello *SensorHello `protobuf:"bytes,10,opt,name=hello,proto3,oneof" json:"hello,omitempty"`
}
type MsgFromSensor_AuditLogStatusInfo struct {
	AuditLogStatusInfo *AuditLogStatusInfo `protobuf:"bytes,11,opt,name=audit_log_status_info,json=auditLogStatusInfo,proto3,oneof" json:"audit_log_status_info,omitempty"`
}
type MsgFromSensor_IssueLocalScannerCertsRequest struct {
	IssueLocalScannerCertsRequest *IssueLocalScannerCertsRequest `protobuf:"bytes,12,opt,name=issue_local_scanner_certs_request,json=issueLocalScannerCertsRequest,proto3,oneof" json:"issue_local_scanner_certs_request,omitempty"`
}

func (*MsgFromSensor_Event) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_Event) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_Event)
	*cloned = *m

	cloned.Event = m.Event.Clone()
	return cloned
}
func (*MsgFromSensor_NetworkFlowUpdate) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_NetworkFlowUpdate) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_NetworkFlowUpdate)
	*cloned = *m

	cloned.NetworkFlowUpdate = m.NetworkFlowUpdate.Clone()
	return cloned
}
func (*MsgFromSensor_ScrapeUpdate) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_ScrapeUpdate) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_ScrapeUpdate)
	*cloned = *m

	cloned.ScrapeUpdate = m.ScrapeUpdate.Clone()
	return cloned
}
func (*MsgFromSensor_NetworkPoliciesResponse) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_NetworkPoliciesResponse) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_NetworkPoliciesResponse)
	*cloned = *m

	cloned.NetworkPoliciesResponse = m.NetworkPoliciesResponse.Clone()
	return cloned
}
func (*MsgFromSensor_ClusterStatusUpdate) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_ClusterStatusUpdate) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_ClusterStatusUpdate)
	*cloned = *m

	cloned.ClusterStatusUpdate = m.ClusterStatusUpdate.Clone()
	return cloned
}
func (*MsgFromSensor_TelemetryDataResponse) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_TelemetryDataResponse) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_TelemetryDataResponse)
	*cloned = *m

	cloned.TelemetryDataResponse = m.TelemetryDataResponse.Clone()
	return cloned
}
func (*MsgFromSensor_ClusterHealthInfo) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_ClusterHealthInfo) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_ClusterHealthInfo)
	*cloned = *m

	cloned.ClusterHealthInfo = m.ClusterHealthInfo.Clone()
	return cloned
}
func (*MsgFromSensor_Hello) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_Hello) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_Hello)
	*cloned = *m

	cloned.Hello = m.Hello.Clone()
	return cloned
}
func (*MsgFromSensor_AuditLogStatusInfo) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_AuditLogStatusInfo) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_AuditLogStatusInfo)
	*cloned = *m

	cloned.AuditLogStatusInfo = m.AuditLogStatusInfo.Clone()
	return cloned
}
func (*MsgFromSensor_IssueLocalScannerCertsRequest) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_IssueLocalScannerCertsRequest) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_IssueLocalScannerCertsRequest)
	*cloned = *m

	cloned.IssueLocalScannerCertsRequest = m.IssueLocalScannerCertsRequest.Clone()
	return cloned
}

func (m *MsgFromSensor) GetMsg() isMsgFromSensor_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *MsgFromSensor) GetHashKey() string {
	if m != nil {
		return m.HashKey
	}
	return ""
}

func (m *MsgFromSensor) GetDedupeKey() string {
	if m != nil {
		return m.DedupeKey
	}
	return ""
}

func (m *MsgFromSensor) GetEvent() *SensorEvent {
	if x, ok := m.GetMsg().(*MsgFromSensor_Event); ok {
		return x.Event
	}
	return nil
}

func (m *MsgFromSensor) GetNetworkFlowUpdate() *NetworkFlowUpdate {
	if x, ok := m.GetMsg().(*MsgFromSensor_NetworkFlowUpdate); ok {
		return x.NetworkFlowUpdate
	}
	return nil
}

func (m *MsgFromSensor) GetScrapeUpdate() *ScrapeUpdate {
	if x, ok := m.GetMsg().(*MsgFromSensor_ScrapeUpdate); ok {
		return x.ScrapeUpdate
	}
	return nil
}

func (m *MsgFromSensor) GetNetworkPoliciesResponse() *NetworkPoliciesResponse {
	if x, ok := m.GetMsg().(*MsgFromSensor_NetworkPoliciesResponse); ok {
		return x.NetworkPoliciesResponse
	}
	return nil
}

func (m *MsgFromSensor) GetClusterStatusUpdate() *ClusterStatusUpdate {
	if x, ok := m.GetMsg().(*MsgFromSensor_ClusterStatusUpdate); ok {
		return x.ClusterStatusUpdate
	}
	return nil
}

func (m *MsgFromSensor) GetTelemetryDataResponse() *PullTelemetryDataResponse {
	if x, ok := m.GetMsg().(*MsgFromSensor_TelemetryDataResponse); ok {
		return x.TelemetryDataResponse
	}
	return nil
}

func (m *MsgFromSensor) GetClusterHealthInfo() *RawClusterHealthInfo {
	if x, ok := m.GetMsg().(*MsgFromSensor_ClusterHealthInfo); ok {
		return x.ClusterHealthInfo
	}
	return nil
}

func (m *MsgFromSensor) GetHello() *SensorHello {
	if x, ok := m.GetMsg().(*MsgFromSensor_Hello); ok {
		return x.Hello
	}
	return nil
}

func (m *MsgFromSensor) GetAuditLogStatusInfo() *AuditLogStatusInfo {
	if x, ok := m.GetMsg().(*MsgFromSensor_AuditLogStatusInfo); ok {
		return x.AuditLogStatusInfo
	}
	return nil
}

func (m *MsgFromSensor) GetIssueLocalScannerCertsRequest() *IssueLocalScannerCertsRequest {
	if x, ok := m.GetMsg().(*MsgFromSensor_IssueLocalScannerCertsRequest); ok {
		return x.IssueLocalScannerCertsRequest
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgFromSensor) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgFromSensor_Event)(nil),
		(*MsgFromSensor_NetworkFlowUpdate)(nil),
		(*MsgFromSensor_ScrapeUpdate)(nil),
		(*MsgFromSensor_NetworkPoliciesResponse)(nil),
		(*MsgFromSensor_ClusterStatusUpdate)(nil),
		(*MsgFromSensor_TelemetryDataResponse)(nil),
		(*MsgFromSensor_ClusterHealthInfo)(nil),
		(*MsgFromSensor_Hello)(nil),
		(*MsgFromSensor_AuditLogStatusInfo)(nil),
		(*MsgFromSensor_IssueLocalScannerCertsRequest)(nil),
	}
}

func (m *MsgFromSensor) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MsgFromSensor) Clone() *MsgFromSensor {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor)
	*cloned = *m

	if m.Msg != nil {
		cloned.Msg = m.Msg.Clone()
	}
	return cloned
}

type ReassessPolicies struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReassessPolicies) Reset()         { *m = ReassessPolicies{} }
func (m *ReassessPolicies) String() string { return proto.CompactTextString(m) }
func (*ReassessPolicies) ProtoMessage()    {}
func (*ReassessPolicies) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{1}
}
func (m *ReassessPolicies) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReassessPolicies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReassessPolicies.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReassessPolicies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReassessPolicies.Merge(m, src)
}
func (m *ReassessPolicies) XXX_Size() int {
	return m.Size()
}
func (m *ReassessPolicies) XXX_DiscardUnknown() {
	xxx_messageInfo_ReassessPolicies.DiscardUnknown(m)
}

var xxx_messageInfo_ReassessPolicies proto.InternalMessageInfo

func (m *ReassessPolicies) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReassessPolicies) Clone() *ReassessPolicies {
	if m == nil {
		return nil
	}
	cloned := new(ReassessPolicies)
	*cloned = *m

	return cloned
}

type ReprocessDeployments struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReprocessDeployments) Reset()         { *m = ReprocessDeployments{} }
func (m *ReprocessDeployments) String() string { return proto.CompactTextString(m) }
func (*ReprocessDeployments) ProtoMessage()    {}
func (*ReprocessDeployments) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{2}
}
func (m *ReprocessDeployments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReprocessDeployments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReprocessDeployments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReprocessDeployments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReprocessDeployments.Merge(m, src)
}
func (m *ReprocessDeployments) XXX_Size() int {
	return m.Size()
}
func (m *ReprocessDeployments) XXX_DiscardUnknown() {
	xxx_messageInfo_ReprocessDeployments.DiscardUnknown(m)
}

var xxx_messageInfo_ReprocessDeployments proto.InternalMessageInfo

func (m *ReprocessDeployments) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReprocessDeployments) Clone() *ReprocessDeployments {
	if m == nil {
		return nil
	}
	cloned := new(ReprocessDeployments)
	*cloned = *m

	return cloned
}

type MsgToSensor struct {
	// Types that are valid to be assigned to Msg:
	//	*MsgToSensor_Enforcement
	//	*MsgToSensor_ScrapeCommand
	//	*MsgToSensor_NetworkPoliciesCommand
	//	*MsgToSensor_ClusterConfig
	//	*MsgToSensor_SensorUpgradeTrigger
	//	*MsgToSensor_TelemetryDataRequest
	//	*MsgToSensor_PolicySync
	//	*MsgToSensor_ReassessPolicies
	//	*MsgToSensor_BaselineSync
	//	*MsgToSensor_CancelPullTelemetryDataRequest
	//	*MsgToSensor_PushNetworkEntitiesRequest
	//	*MsgToSensor_Hello
	//	*MsgToSensor_NetworkBaselineSync
	//	*MsgToSensor_AuditLogSync
	//	*MsgToSensor_ReprocessDeployment
	//	*MsgToSensor_InvalidateImageCache
	//	*MsgToSensor_IssueLocalScannerCertsResponse
	//	*MsgToSensor_UpdatedImage
	//	*MsgToSensor_ReprocessDeployments
	Msg                  isMsgToSensor_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MsgToSensor) Reset()         { *m = MsgToSensor{} }
func (m *MsgToSensor) String() string { return proto.CompactTextString(m) }
func (*MsgToSensor) ProtoMessage()    {}
func (*MsgToSensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{3}
}
func (m *MsgToSensor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToSensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToSensor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToSensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToSensor.Merge(m, src)
}
func (m *MsgToSensor) XXX_Size() int {
	return m.Size()
}
func (m *MsgToSensor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToSensor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToSensor proto.InternalMessageInfo

type isMsgToSensor_Msg interface {
	isMsgToSensor_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isMsgToSensor_Msg
}

type MsgToSensor_Enforcement struct {
	Enforcement *SensorEnforcement `protobuf:"bytes,1,opt,name=enforcement,proto3,oneof" json:"enforcement,omitempty"`
}
type MsgToSensor_ScrapeCommand struct {
	ScrapeCommand *ScrapeCommand `protobuf:"bytes,2,opt,name=scrape_command,json=scrapeCommand,proto3,oneof" json:"scrape_command,omitempty"`
}
type MsgToSensor_NetworkPoliciesCommand struct {
	NetworkPoliciesCommand *NetworkPoliciesCommand `protobuf:"bytes,3,opt,name=network_policies_command,json=networkPoliciesCommand,proto3,oneof" json:"network_policies_command,omitempty"`
}
type MsgToSensor_ClusterConfig struct {
	ClusterConfig *ClusterConfig `protobuf:"bytes,4,opt,name=cluster_config,json=clusterConfig,proto3,oneof" json:"cluster_config,omitempty"`
}
type MsgToSensor_SensorUpgradeTrigger struct {
	SensorUpgradeTrigger *SensorUpgradeTrigger `protobuf:"bytes,5,opt,name=sensor_upgrade_trigger,json=sensorUpgradeTrigger,proto3,oneof" json:"sensor_upgrade_trigger,omitempty"`
}
type MsgToSensor_TelemetryDataRequest struct {
	TelemetryDataRequest *PullTelemetryDataRequest `protobuf:"bytes,6,opt,name=telemetry_data_request,json=telemetryDataRequest,proto3,oneof" json:"telemetry_data_request,omitempty"`
}
type MsgToSensor_PolicySync struct {
	PolicySync *PolicySync `protobuf:"bytes,7,opt,name=policy_sync,json=policySync,proto3,oneof" json:"policy_sync,omitempty"`
}
type MsgToSensor_ReassessPolicies struct {
	ReassessPolicies *ReassessPolicies `protobuf:"bytes,8,opt,name=reassess_policies,json=reassessPolicies,proto3,oneof" json:"reassess_policies,omitempty"`
}
type MsgToSensor_BaselineSync struct {
	BaselineSync *BaselineSync `protobuf:"bytes,9,opt,name=baseline_sync,json=baselineSync,proto3,oneof" json:"baseline_sync,omitempty"`
}
type MsgToSensor_CancelPullTelemetryDataRequest struct {
	CancelPullTelemetryDataRequest *CancelPullTelemetryDataRequest `protobuf:"bytes,10,opt,name=cancel_pull_telemetry_data_request,json=cancelPullTelemetryDataRequest,proto3,oneof" json:"cancel_pull_telemetry_data_request,omitempty"`
}
type MsgToSensor_PushNetworkEntitiesRequest struct {
	PushNetworkEntitiesRequest *PushNetworkEntitiesRequest `protobuf:"bytes,11,opt,name=push_network_entities_request,json=pushNetworkEntitiesRequest,proto3,oneof" json:"push_network_entities_request,omitempty"`
}
type MsgToSensor_Hello struct {
	Hello *CentralHello `protobuf:"bytes,12,opt,name=hello,proto3,oneof" json:"hello,omitempty"`
}
type MsgToSensor_NetworkBaselineSync struct {
	NetworkBaselineSync *NetworkBaselineSync `protobuf:"bytes,13,opt,name=network_baseline_sync,json=networkBaselineSync,proto3,oneof" json:"network_baseline_sync,omitempty"`
}
type MsgToSensor_AuditLogSync struct {
	AuditLogSync *AuditLogSync `protobuf:"bytes,14,opt,name=audit_log_sync,json=auditLogSync,proto3,oneof" json:"audit_log_sync,omitempty"`
}
type MsgToSensor_ReprocessDeployment struct {
	ReprocessDeployment *ReprocessDeployment `protobuf:"bytes,15,opt,name=reprocess_deployment,json=reprocessDeployment,proto3,oneof" json:"reprocess_deployment,omitempty"`
}
type MsgToSensor_InvalidateImageCache struct {
	InvalidateImageCache *InvalidateImageCache `protobuf:"bytes,16,opt,name=invalidate_image_cache,json=invalidateImageCache,proto3,oneof" json:"invalidate_image_cache,omitempty"`
}
type MsgToSensor_IssueLocalScannerCertsResponse struct {
	IssueLocalScannerCertsResponse *IssueLocalScannerCertsResponse `protobuf:"bytes,17,opt,name=issue_local_scanner_certs_response,json=issueLocalScannerCertsResponse,proto3,oneof" json:"issue_local_scanner_certs_response,omitempty"`
}
type MsgToSensor_UpdatedImage struct {
	UpdatedImage *storage.Image `protobuf:"bytes,18,opt,name=updated_image,json=updatedImage,proto3,oneof" json:"updated_image,omitempty"`
}
type MsgToSensor_ReprocessDeployments struct {
	ReprocessDeployments *ReprocessDeployments `protobuf:"bytes,19,opt,name=ReprocessDeployments,proto3,oneof" json:"ReprocessDeployments,omitempty"`
}

func (*MsgToSensor_Enforcement) isMsgToSensor_Msg() {}
func (m *MsgToSensor_Enforcement) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_Enforcement)
	*cloned = *m

	cloned.Enforcement = m.Enforcement.Clone()
	return cloned
}
func (*MsgToSensor_ScrapeCommand) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ScrapeCommand) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ScrapeCommand)
	*cloned = *m

	cloned.ScrapeCommand = m.ScrapeCommand.Clone()
	return cloned
}
func (*MsgToSensor_NetworkPoliciesCommand) isMsgToSensor_Msg() {}
func (m *MsgToSensor_NetworkPoliciesCommand) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_NetworkPoliciesCommand)
	*cloned = *m

	cloned.NetworkPoliciesCommand = m.NetworkPoliciesCommand.Clone()
	return cloned
}
func (*MsgToSensor_ClusterConfig) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ClusterConfig) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ClusterConfig)
	*cloned = *m

	cloned.ClusterConfig = m.ClusterConfig.Clone()
	return cloned
}
func (*MsgToSensor_SensorUpgradeTrigger) isMsgToSensor_Msg() {}
func (m *MsgToSensor_SensorUpgradeTrigger) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_SensorUpgradeTrigger)
	*cloned = *m

	cloned.SensorUpgradeTrigger = m.SensorUpgradeTrigger.Clone()
	return cloned
}
func (*MsgToSensor_TelemetryDataRequest) isMsgToSensor_Msg() {}
func (m *MsgToSensor_TelemetryDataRequest) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_TelemetryDataRequest)
	*cloned = *m

	cloned.TelemetryDataRequest = m.TelemetryDataRequest.Clone()
	return cloned
}
func (*MsgToSensor_PolicySync) isMsgToSensor_Msg() {}
func (m *MsgToSensor_PolicySync) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_PolicySync)
	*cloned = *m

	cloned.PolicySync = m.PolicySync.Clone()
	return cloned
}
func (*MsgToSensor_ReassessPolicies) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ReassessPolicies) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ReassessPolicies)
	*cloned = *m

	cloned.ReassessPolicies = m.ReassessPolicies.Clone()
	return cloned
}
func (*MsgToSensor_BaselineSync) isMsgToSensor_Msg() {}
func (m *MsgToSensor_BaselineSync) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_BaselineSync)
	*cloned = *m

	cloned.BaselineSync = m.BaselineSync.Clone()
	return cloned
}
func (*MsgToSensor_CancelPullTelemetryDataRequest) isMsgToSensor_Msg() {}
func (m *MsgToSensor_CancelPullTelemetryDataRequest) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_CancelPullTelemetryDataRequest)
	*cloned = *m

	cloned.CancelPullTelemetryDataRequest = m.CancelPullTelemetryDataRequest.Clone()
	return cloned
}
func (*MsgToSensor_PushNetworkEntitiesRequest) isMsgToSensor_Msg() {}
func (m *MsgToSensor_PushNetworkEntitiesRequest) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_PushNetworkEntitiesRequest)
	*cloned = *m

	cloned.PushNetworkEntitiesRequest = m.PushNetworkEntitiesRequest.Clone()
	return cloned
}
func (*MsgToSensor_Hello) isMsgToSensor_Msg() {}
func (m *MsgToSensor_Hello) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_Hello)
	*cloned = *m

	cloned.Hello = m.Hello.Clone()
	return cloned
}
func (*MsgToSensor_NetworkBaselineSync) isMsgToSensor_Msg() {}
func (m *MsgToSensor_NetworkBaselineSync) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_NetworkBaselineSync)
	*cloned = *m

	cloned.NetworkBaselineSync = m.NetworkBaselineSync.Clone()
	return cloned
}
func (*MsgToSensor_AuditLogSync) isMsgToSensor_Msg() {}
func (m *MsgToSensor_AuditLogSync) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_AuditLogSync)
	*cloned = *m

	cloned.AuditLogSync = m.AuditLogSync.Clone()
	return cloned
}
func (*MsgToSensor_ReprocessDeployment) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ReprocessDeployment) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ReprocessDeployment)
	*cloned = *m

	cloned.ReprocessDeployment = m.ReprocessDeployment.Clone()
	return cloned
}
func (*MsgToSensor_InvalidateImageCache) isMsgToSensor_Msg() {}
func (m *MsgToSensor_InvalidateImageCache) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_InvalidateImageCache)
	*cloned = *m

	cloned.InvalidateImageCache = m.InvalidateImageCache.Clone()
	return cloned
}
func (*MsgToSensor_IssueLocalScannerCertsResponse) isMsgToSensor_Msg() {}
func (m *MsgToSensor_IssueLocalScannerCertsResponse) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_IssueLocalScannerCertsResponse)
	*cloned = *m

	cloned.IssueLocalScannerCertsResponse = m.IssueLocalScannerCertsResponse.Clone()
	return cloned
}
func (*MsgToSensor_UpdatedImage) isMsgToSensor_Msg() {}
func (m *MsgToSensor_UpdatedImage) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_UpdatedImage)
	*cloned = *m

	cloned.UpdatedImage = m.UpdatedImage.Clone()
	return cloned
}
func (*MsgToSensor_ReprocessDeployments) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ReprocessDeployments) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ReprocessDeployments)
	*cloned = *m

	cloned.ReprocessDeployments = m.ReprocessDeployments.Clone()
	return cloned
}

func (m *MsgToSensor) GetMsg() isMsgToSensor_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *MsgToSensor) GetEnforcement() *SensorEnforcement {
	if x, ok := m.GetMsg().(*MsgToSensor_Enforcement); ok {
		return x.Enforcement
	}
	return nil
}

func (m *MsgToSensor) GetScrapeCommand() *ScrapeCommand {
	if x, ok := m.GetMsg().(*MsgToSensor_ScrapeCommand); ok {
		return x.ScrapeCommand
	}
	return nil
}

func (m *MsgToSensor) GetNetworkPoliciesCommand() *NetworkPoliciesCommand {
	if x, ok := m.GetMsg().(*MsgToSensor_NetworkPoliciesCommand); ok {
		return x.NetworkPoliciesCommand
	}
	return nil
}

func (m *MsgToSensor) GetClusterConfig() *ClusterConfig {
	if x, ok := m.GetMsg().(*MsgToSensor_ClusterConfig); ok {
		return x.ClusterConfig
	}
	return nil
}

func (m *MsgToSensor) GetSensorUpgradeTrigger() *SensorUpgradeTrigger {
	if x, ok := m.GetMsg().(*MsgToSensor_SensorUpgradeTrigger); ok {
		return x.SensorUpgradeTrigger
	}
	return nil
}

func (m *MsgToSensor) GetTelemetryDataRequest() *PullTelemetryDataRequest {
	if x, ok := m.GetMsg().(*MsgToSensor_TelemetryDataRequest); ok {
		return x.TelemetryDataRequest
	}
	return nil
}

func (m *MsgToSensor) GetPolicySync() *PolicySync {
	if x, ok := m.GetMsg().(*MsgToSensor_PolicySync); ok {
		return x.PolicySync
	}
	return nil
}

func (m *MsgToSensor) GetReassessPolicies() *ReassessPolicies {
	if x, ok := m.GetMsg().(*MsgToSensor_ReassessPolicies); ok {
		return x.ReassessPolicies
	}
	return nil
}

func (m *MsgToSensor) GetBaselineSync() *BaselineSync {
	if x, ok := m.GetMsg().(*MsgToSensor_BaselineSync); ok {
		return x.BaselineSync
	}
	return nil
}

func (m *MsgToSensor) GetCancelPullTelemetryDataRequest() *CancelPullTelemetryDataRequest {
	if x, ok := m.GetMsg().(*MsgToSensor_CancelPullTelemetryDataRequest); ok {
		return x.CancelPullTelemetryDataRequest
	}
	return nil
}

func (m *MsgToSensor) GetPushNetworkEntitiesRequest() *PushNetworkEntitiesRequest {
	if x, ok := m.GetMsg().(*MsgToSensor_PushNetworkEntitiesRequest); ok {
		return x.PushNetworkEntitiesRequest
	}
	return nil
}

func (m *MsgToSensor) GetHello() *CentralHello {
	if x, ok := m.GetMsg().(*MsgToSensor_Hello); ok {
		return x.Hello
	}
	return nil
}

func (m *MsgToSensor) GetNetworkBaselineSync() *NetworkBaselineSync {
	if x, ok := m.GetMsg().(*MsgToSensor_NetworkBaselineSync); ok {
		return x.NetworkBaselineSync
	}
	return nil
}

func (m *MsgToSensor) GetAuditLogSync() *AuditLogSync {
	if x, ok := m.GetMsg().(*MsgToSensor_AuditLogSync); ok {
		return x.AuditLogSync
	}
	return nil
}

func (m *MsgToSensor) GetReprocessDeployment() *ReprocessDeployment {
	if x, ok := m.GetMsg().(*MsgToSensor_ReprocessDeployment); ok {
		return x.ReprocessDeployment
	}
	return nil
}

func (m *MsgToSensor) GetInvalidateImageCache() *InvalidateImageCache {
	if x, ok := m.GetMsg().(*MsgToSensor_InvalidateImageCache); ok {
		return x.InvalidateImageCache
	}
	return nil
}

func (m *MsgToSensor) GetIssueLocalScannerCertsResponse() *IssueLocalScannerCertsResponse {
	if x, ok := m.GetMsg().(*MsgToSensor_IssueLocalScannerCertsResponse); ok {
		return x.IssueLocalScannerCertsResponse
	}
	return nil
}

func (m *MsgToSensor) GetUpdatedImage() *storage.Image {
	if x, ok := m.GetMsg().(*MsgToSensor_UpdatedImage); ok {
		return x.UpdatedImage
	}
	return nil
}

func (m *MsgToSensor) GetReprocessDeployments() *ReprocessDeployments {
	if x, ok := m.GetMsg().(*MsgToSensor_ReprocessDeployments); ok {
		return x.ReprocessDeployments
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgToSensor) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgToSensor_Enforcement)(nil),
		(*MsgToSensor_ScrapeCommand)(nil),
		(*MsgToSensor_NetworkPoliciesCommand)(nil),
		(*MsgToSensor_ClusterConfig)(nil),
		(*MsgToSensor_SensorUpgradeTrigger)(nil),
		(*MsgToSensor_TelemetryDataRequest)(nil),
		(*MsgToSensor_PolicySync)(nil),
		(*MsgToSensor_ReassessPolicies)(nil),
		(*MsgToSensor_BaselineSync)(nil),
		(*MsgToSensor_CancelPullTelemetryDataRequest)(nil),
		(*MsgToSensor_PushNetworkEntitiesRequest)(nil),
		(*MsgToSensor_Hello)(nil),
		(*MsgToSensor_NetworkBaselineSync)(nil),
		(*MsgToSensor_AuditLogSync)(nil),
		(*MsgToSensor_ReprocessDeployment)(nil),
		(*MsgToSensor_InvalidateImageCache)(nil),
		(*MsgToSensor_IssueLocalScannerCertsResponse)(nil),
		(*MsgToSensor_UpdatedImage)(nil),
		(*MsgToSensor_ReprocessDeployments)(nil),
	}
}

func (m *MsgToSensor) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MsgToSensor) Clone() *MsgToSensor {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor)
	*cloned = *m

	if m.Msg != nil {
		cloned.Msg = m.Msg.Clone()
	}
	return cloned
}

type AuditLogSync struct {
	NodeAuditLogFileStates map[string]*storage.AuditLogFileState `protobuf:"bytes,1,rep,name=node_audit_log_file_states,json=nodeAuditLogFileStates,proto3" json:"node_audit_log_file_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral   struct{}                              `json:"-"`
	XXX_unrecognized       []byte                                `json:"-"`
	XXX_sizecache          int32                                 `json:"-"`
}

func (m *AuditLogSync) Reset()         { *m = AuditLogSync{} }
func (m *AuditLogSync) String() string { return proto.CompactTextString(m) }
func (*AuditLogSync) ProtoMessage()    {}
func (*AuditLogSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{4}
}
func (m *AuditLogSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditLogSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditLogSync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditLogSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditLogSync.Merge(m, src)
}
func (m *AuditLogSync) XXX_Size() int {
	return m.Size()
}
func (m *AuditLogSync) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditLogSync.DiscardUnknown(m)
}

var xxx_messageInfo_AuditLogSync proto.InternalMessageInfo

func (m *AuditLogSync) GetNodeAuditLogFileStates() map[string]*storage.AuditLogFileState {
	if m != nil {
		return m.NodeAuditLogFileStates
	}
	return nil
}

func (m *AuditLogSync) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AuditLogSync) Clone() *AuditLogSync {
	if m == nil {
		return nil
	}
	cloned := new(AuditLogSync)
	*cloned = *m

	if m.NodeAuditLogFileStates != nil {
		cloned.NodeAuditLogFileStates = make(map[string]*storage.AuditLogFileState, len(m.NodeAuditLogFileStates))
		for k, v := range m.NodeAuditLogFileStates {
			cloned.NodeAuditLogFileStates[k] = v.Clone()
		}
	}
	return cloned
}

type AuditLogStatusInfo struct {
	NodeAuditLogFileStates map[string]*storage.AuditLogFileState `protobuf:"bytes,1,rep,name=node_audit_log_file_states,json=nodeAuditLogFileStates,proto3" json:"node_audit_log_file_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral   struct{}                              `json:"-"`
	XXX_unrecognized       []byte                                `json:"-"`
	XXX_sizecache          int32                                 `json:"-"`
}

func (m *AuditLogStatusInfo) Reset()         { *m = AuditLogStatusInfo{} }
func (m *AuditLogStatusInfo) String() string { return proto.CompactTextString(m) }
func (*AuditLogStatusInfo) ProtoMessage()    {}
func (*AuditLogStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{5}
}
func (m *AuditLogStatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditLogStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditLogStatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditLogStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditLogStatusInfo.Merge(m, src)
}
func (m *AuditLogStatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *AuditLogStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditLogStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AuditLogStatusInfo proto.InternalMessageInfo

func (m *AuditLogStatusInfo) GetNodeAuditLogFileStates() map[string]*storage.AuditLogFileState {
	if m != nil {
		return m.NodeAuditLogFileStates
	}
	return nil
}

func (m *AuditLogStatusInfo) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AuditLogStatusInfo) Clone() *AuditLogStatusInfo {
	if m == nil {
		return nil
	}
	cloned := new(AuditLogStatusInfo)
	*cloned = *m

	if m.NodeAuditLogFileStates != nil {
		cloned.NodeAuditLogFileStates = make(map[string]*storage.AuditLogFileState, len(m.NodeAuditLogFileStates))
		for k, v := range m.NodeAuditLogFileStates {
			cloned.NodeAuditLogFileStates[k] = v.Clone()
		}
	}
	return cloned
}

type ReprocessDeployment struct {
	DeploymentIds        []string `protobuf:"bytes,1,rep,name=deployment_ids,json=deploymentIds,proto3" json:"deployment_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReprocessDeployment) Reset()         { *m = ReprocessDeployment{} }
func (m *ReprocessDeployment) String() string { return proto.CompactTextString(m) }
func (*ReprocessDeployment) ProtoMessage()    {}
func (*ReprocessDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{6}
}
func (m *ReprocessDeployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReprocessDeployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReprocessDeployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReprocessDeployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReprocessDeployment.Merge(m, src)
}
func (m *ReprocessDeployment) XXX_Size() int {
	return m.Size()
}
func (m *ReprocessDeployment) XXX_DiscardUnknown() {
	xxx_messageInfo_ReprocessDeployment.DiscardUnknown(m)
}

var xxx_messageInfo_ReprocessDeployment proto.InternalMessageInfo

func (m *ReprocessDeployment) GetDeploymentIds() []string {
	if m != nil {
		return m.DeploymentIds
	}
	return nil
}

func (m *ReprocessDeployment) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReprocessDeployment) Clone() *ReprocessDeployment {
	if m == nil {
		return nil
	}
	cloned := new(ReprocessDeployment)
	*cloned = *m

	if m.DeploymentIds != nil {
		cloned.DeploymentIds = make([]string, len(m.DeploymentIds))
		copy(cloned.DeploymentIds, m.DeploymentIds)
	}
	return cloned
}

type InvalidateImageCache struct {
	ImageKeys            []*InvalidateImageCache_ImageKey `protobuf:"bytes,1,rep,name=image_keys,json=imageKeys,proto3" json:"image_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *InvalidateImageCache) Reset()         { *m = InvalidateImageCache{} }
func (m *InvalidateImageCache) String() string { return proto.CompactTextString(m) }
func (*InvalidateImageCache) ProtoMessage()    {}
func (*InvalidateImageCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{7}
}
func (m *InvalidateImageCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateImageCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateImageCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateImageCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateImageCache.Merge(m, src)
}
func (m *InvalidateImageCache) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateImageCache) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateImageCache.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateImageCache proto.InternalMessageInfo

func (m *InvalidateImageCache) GetImageKeys() []*InvalidateImageCache_ImageKey {
	if m != nil {
		return m.ImageKeys
	}
	return nil
}

func (m *InvalidateImageCache) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InvalidateImageCache) Clone() *InvalidateImageCache {
	if m == nil {
		return nil
	}
	cloned := new(InvalidateImageCache)
	*cloned = *m

	if m.ImageKeys != nil {
		cloned.ImageKeys = make([]*InvalidateImageCache_ImageKey, len(m.ImageKeys))
		for idx, v := range m.ImageKeys {
			cloned.ImageKeys[idx] = v.Clone()
		}
	}
	return cloned
}

type InvalidateImageCache_ImageKey struct {
	ImageId              string   `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ImageFullName        string   `protobuf:"bytes,2,opt,name=image_full_name,json=imageFullName,proto3" json:"image_full_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvalidateImageCache_ImageKey) Reset()         { *m = InvalidateImageCache_ImageKey{} }
func (m *InvalidateImageCache_ImageKey) String() string { return proto.CompactTextString(m) }
func (*InvalidateImageCache_ImageKey) ProtoMessage()    {}
func (*InvalidateImageCache_ImageKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{7, 0}
}
func (m *InvalidateImageCache_ImageKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateImageCache_ImageKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateImageCache_ImageKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateImageCache_ImageKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateImageCache_ImageKey.Merge(m, src)
}
func (m *InvalidateImageCache_ImageKey) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateImageCache_ImageKey) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateImageCache_ImageKey.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateImageCache_ImageKey proto.InternalMessageInfo

func (m *InvalidateImageCache_ImageKey) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *InvalidateImageCache_ImageKey) GetImageFullName() string {
	if m != nil {
		return m.ImageFullName
	}
	return ""
}

func (m *InvalidateImageCache_ImageKey) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InvalidateImageCache_ImageKey) Clone() *InvalidateImageCache_ImageKey {
	if m == nil {
		return nil
	}
	cloned := new(InvalidateImageCache_ImageKey)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*MsgFromSensor)(nil), "central.MsgFromSensor")
	proto.RegisterType((*ReassessPolicies)(nil), "central.ReassessPolicies")
	proto.RegisterType((*ReprocessDeployments)(nil), "central.ReprocessDeployments")
	proto.RegisterType((*MsgToSensor)(nil), "central.MsgToSensor")
	proto.RegisterType((*AuditLogSync)(nil), "central.AuditLogSync")
	proto.RegisterMapType((map[string]*storage.AuditLogFileState)(nil), "central.AuditLogSync.NodeAuditLogFileStatesEntry")
	proto.RegisterType((*AuditLogStatusInfo)(nil), "central.AuditLogStatusInfo")
	proto.RegisterMapType((map[string]*storage.AuditLogFileState)(nil), "central.AuditLogStatusInfo.NodeAuditLogFileStatesEntry")
	proto.RegisterType((*ReprocessDeployment)(nil), "central.ReprocessDeployment")
	proto.RegisterType((*InvalidateImageCache)(nil), "central.InvalidateImageCache")
	proto.RegisterType((*InvalidateImageCache_ImageKey)(nil), "central.InvalidateImageCache.ImageKey")
}

func init() {
	proto.RegisterFile("internalapi/central/sensor_iservice.proto", fileDescriptor_9d0a66b7b73dbb5d)
}

var fileDescriptor_9d0a66b7b73dbb5d = []byte{
	// 1327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x15, 0xe3, 0x3a, 0x8e, 0x57, 0x96, 0xe3, 0xac, 0x65, 0x85, 0x56, 0x6a, 0xc7, 0x51, 0x10,
	0xc7, 0x05, 0x5a, 0x27, 0x75, 0xd1, 0x0b, 0x8a, 0xb4, 0x41, 0xe3, 0xd8, 0x90, 0x91, 0x4b, 0x5d,
	0x2a, 0x79, 0xe8, 0x05, 0x25, 0x36, 0xe4, 0x48, 0x22, 0xb2, 0x5a, 0xb2, 0xbb, 0xa4, 0x0d, 0xfd,
	0x49, 0x3f, 0xa2, 0x1f, 0xd2, 0xc7, 0x7e, 0x42, 0xeb, 0xf6, 0x03, 0xfa, 0xd2, 0xf7, 0x62, 0x2f,
	0xbc, 0x88, 0xa2, 0x89, 0x3e, 0xf6, 0x49, 0xda, 0x99, 0x33, 0xb3, 0xb3, 0xb3, 0x73, 0x66, 0x96,
	0xe8, 0xbd, 0x80, 0xc5, 0xc0, 0x19, 0xa1, 0x24, 0x0a, 0x1e, 0x78, 0xc0, 0x62, 0x4e, 0xe8, 0x03,
	0x01, 0x4c, 0x84, 0xdc, 0x0d, 0x04, 0xf0, 0xb3, 0xc0, 0x83, 0xfd, 0x88, 0x87, 0x71, 0x88, 0x97,
	0x8c, 0xba, 0xbb, 0x57, 0x65, 0xe3, 0xd1, 0x44, 0xc4, 0xc0, 0x5d, 0x2f, 0x64, 0xc3, 0x60, 0xa4,
	0x4d, 0xea, 0x91, 0x22, 0x26, 0x71, 0x22, 0x0c, 0x72, 0xb7, 0x0a, 0xc9, 0x20, 0x3e, 0x0f, 0xf9,
	0x5b, 0x77, 0x48, 0xc3, 0x73, 0x83, 0xbb, 0x57, 0x85, 0x8b, 0x42, 0x1a, 0x78, 0x53, 0x57, 0x4c,
	0x99, 0x67, 0x60, 0xf7, 0x6b, 0x8e, 0x05, 0x67, 0xc0, 0x62, 0x51, 0x17, 0xa1, 0x01, 0x26, 0xd1,
	0x88, 0x13, 0xdf, 0x1c, 0xbf, 0x7b, 0xb7, 0x0a, 0x19, 0x03, 0x85, 0x09, 0xc4, 0x7c, 0x5a, 0xb7,
	0xef, 0x1b, 0x22, 0x80, 0x06, 0x0c, 0x8a, 0x01, 0xde, 0xae, 0x02, 0x8e, 0x81, 0xd2, 0xd0, 0x00,
	0x1e, 0xd4, 0x25, 0xa4, 0xca, 0x63, 0xe5, 0xd6, 0x34, 0xf4, 0x08, 0x75, 0x85, 0x47, 0x18, 0x03,
	0x6e, 0x80, 0x1b, 0x22, 0x0e, 0x39, 0x19, 0x41, 0x7a, 0x11, 0x46, 0xbc, 0x9e, 0x8a, 0x83, 0x09,
	0x19, 0x99, 0x43, 0xf7, 0xfe, 0xb8, 0x8a, 0x5a, 0x2f, 0xc4, 0xe8, 0x98, 0x87, 0x93, 0x81, 0x4a,
	0x0a, 0xde, 0x44, 0xd7, 0xc6, 0x44, 0x8c, 0xdd, 0xb7, 0x30, 0xb5, 0x97, 0x76, 0xac, 0xbd, 0x65,
	0x67, 0x49, 0xae, 0x9f, 0xc1, 0x14, 0x6f, 0x21, 0xe4, 0x83, 0x9f, 0x44, 0xa0, 0x94, 0xd7, 0x94,
	0x72, 0x59, 0x4b, 0xa4, 0xfa, 0x7d, 0xb4, 0xa8, 0x52, 0x6f, 0x5b, 0x3b, 0xd6, 0x5e, 0xf3, 0xa0,
	0xbd, 0x6f, 0x82, 0xdc, 0xd7, 0x9e, 0x8f, 0xa4, 0xae, 0xdf, 0x70, 0x34, 0x08, 0x3f, 0x47, 0xeb,
	0xc5, 0xeb, 0x77, 0x93, 0xc8, 0x27, 0x31, 0xd8, 0x57, 0x94, 0x6d, 0x37, 0xb3, 0x7d, 0xa9, 0x31,
	0xc7, 0x34, 0x3c, 0x7f, 0xad, 0x10, 0xfd, 0x86, 0x73, 0x83, 0x95, 0x85, 0xf8, 0x11, 0x6a, 0x09,
	0x8f, 0x93, 0x08, 0x52, 0x3f, 0x0b, 0xca, 0xcf, 0x46, 0x1e, 0x83, 0xd2, 0x66, 0x2e, 0x56, 0x44,
	0x61, 0x8d, 0x7f, 0x44, 0x9b, 0x69, 0x2c, 0xaa, 0xd4, 0x02, 0x10, 0x2e, 0x07, 0x11, 0x85, 0x4c,
	0x80, 0xfd, 0x8e, 0xf2, 0xb4, 0x53, 0x8e, 0xe8, 0xd4, 0x00, 0x1d, 0x83, 0xeb, 0x37, 0x9c, 0x9b,
	0xac, 0x5a, 0x85, 0x1d, 0xb4, 0x31, 0x4b, 0x8a, 0x34, 0xca, 0x45, 0xe5, 0xfb, 0xdd, 0xcc, 0xf7,
	0xa1, 0x46, 0x0d, 0x14, 0x28, 0x0b, 0x76, 0xdd, 0x9b, 0x17, 0xe3, 0x1f, 0xd0, 0xcd, 0xac, 0x38,
	0x5d, 0x9f, 0xc4, 0x24, 0x8f, 0xf8, 0xaa, 0xf2, 0xda, 0xcb, 0xbc, 0x9e, 0x26, 0x94, 0xbe, 0x4a,
	0xb1, 0x4f, 0x49, 0x4c, 0x0a, 0x31, 0x6f, 0xc4, 0x55, 0x0a, 0xfc, 0x35, 0x4a, 0x37, 0x75, 0xc7,
	0x40, 0x68, 0x3c, 0x76, 0x03, 0x36, 0x0c, 0xed, 0x65, 0xe5, 0x79, 0x2b, 0xf3, 0xec, 0x90, 0x73,
	0x13, 0x72, 0x5f, 0xa1, 0x4e, 0xd8, 0x30, 0x94, 0x17, 0xe4, 0x95, 0x85, 0xb2, 0x38, 0x54, 0xf5,
	0xdb, 0xa8, 0xb2, 0x38, 0xfa, 0x52, 0x27, 0x8b, 0x43, 0x81, 0xf0, 0x29, 0xda, 0x20, 0x89, 0x1f,
	0xc4, 0x2e, 0x0d, 0x47, 0x69, 0xca, 0x54, 0x00, 0x4d, 0x65, 0x7d, 0x2b, 0xb3, 0xfe, 0x4a, 0xa2,
	0x9e, 0x87, 0x23, 0x9d, 0x1a, 0xb3, 0x3d, 0x26, 0x73, 0x52, 0xcc, 0xd1, 0x9d, 0x40, 0x88, 0x04,
	0xdc, 0x19, 0xc6, 0xb8, 0x1e, 0xf0, 0x58, 0xde, 0xf5, 0x4f, 0x09, 0x88, 0xd8, 0x5e, 0x51, 0xde,
	0x77, 0x33, 0xef, 0x27, 0xd2, 0xe2, 0xb9, 0x34, 0x18, 0x68, 0xfc, 0xa1, 0x84, 0x3b, 0x1a, 0xdd,
	0x6f, 0x38, 0x5b, 0x41, 0x1d, 0xe0, 0xc9, 0x22, 0x5a, 0x98, 0x88, 0x51, 0x0f, 0xa3, 0x35, 0x07,
	0x88, 0x10, 0x20, 0x44, 0x5a, 0x19, 0xbd, 0x0e, 0x6a, 0x3b, 0x10, 0xf1, 0xd0, 0x03, 0x21, 0x9e,
	0x42, 0x44, 0xc3, 0xe9, 0x44, 0x36, 0xad, 0xde, 0x3f, 0x4d, 0xd4, 0x7c, 0x21, 0x46, 0xaf, 0x42,
	0xc3, 0xc6, 0x2f, 0x51, 0x13, 0xd8, 0x30, 0xe4, 0x1e, 0x4c, 0x72, 0x66, 0x75, 0xcb, 0xcc, 0xca,
	0x11, 0xfd, 0x86, 0x53, 0x34, 0xc0, 0x8f, 0xd1, 0xaa, 0xe1, 0x85, 0x17, 0x4e, 0x26, 0x84, 0xf9,
	0x86, 0x60, 0x9d, 0x12, 0x31, 0x0e, 0xb5, 0xb6, 0xdf, 0x70, 0x0c, 0x8f, 0x8c, 0x00, 0x7f, 0x8f,
	0xec, 0x39, 0x6a, 0xa4, 0xae, 0x34, 0xc7, 0x6e, 0x5f, 0xc6, 0x8c, 0xdc, 0x67, 0x87, 0x55, 0x6a,
	0x64, 0x74, 0xb3, 0x63, 0xc5, 0x90, 0xad, 0x53, 0x26, 0xc4, 0xa1, 0xd2, 0xca, 0xe8, 0xbc, 0xa2,
	0x00, 0xbf, 0x46, 0x9d, 0xd9, 0x5e, 0xee, 0xc6, 0x3c, 0x18, 0x8d, 0x80, 0x1b, 0x66, 0x6d, 0x95,
	0x32, 0xf5, 0x5a, 0xa3, 0x5e, 0x69, 0x50, 0xbf, 0xe1, 0xb4, 0x45, 0x85, 0x1c, 0x7f, 0x8b, 0x3a,
	0x73, 0xdc, 0xd2, 0x15, 0xa2, 0xa9, 0x75, 0xa7, 0x8e, 0x5a, 0x69, 0x71, 0xb4, 0xe3, 0x0a, 0x39,
	0xfe, 0x04, 0x35, 0x0b, 0xd3, 0x4c, 0x75, 0xd8, 0xe6, 0xc1, 0x7a, 0xee, 0x4f, 0xe9, 0x06, 0x53,
	0xe6, 0xf5, 0x1b, 0x0e, 0x8a, 0xb2, 0x15, 0xee, 0xa3, 0x1b, 0xdc, 0x14, 0x51, 0x76, 0x11, 0xaa,
	0x05, 0x37, 0x0f, 0x36, 0x73, 0x3a, 0x96, 0xca, 0xac, 0xdf, 0x70, 0xd6, 0x78, 0x49, 0x26, 0x5b,
	0xe5, 0xcc, 0x78, 0x31, 0xa4, 0xce, 0x5b, 0xe5, 0x13, 0xa3, 0x35, 0x51, 0xac, 0xbc, 0x29, 0xac,
	0x71, 0x82, 0x7a, 0x1e, 0x61, 0x1e, 0x50, 0x37, 0x4a, 0x28, 0x75, 0x2f, 0x49, 0x93, 0x26, 0xf9,
	0xfd, 0xfc, 0x1a, 0x95, 0x49, 0x4d, 0xb2, 0xb6, 0xbd, 0x5a, 0x04, 0x1e, 0xa3, 0xad, 0x28, 0x11,
	0x63, 0x37, 0xad, 0x45, 0x60, 0x71, 0x10, 0xeb, 0x36, 0xad, 0x77, 0xd4, 0x8d, 0xe1, 0x6e, 0xe1,
	0x62, 0xc4, 0xd8, 0xd4, 0xe3, 0x91, 0xc1, 0xe6, 0xbb, 0x75, 0xa3, 0x4b, 0xb5, 0xf8, 0x83, 0xb4,
	0x51, 0xad, 0x94, 0xd2, 0x72, 0xa8, 0x7f, 0x4b, 0x9d, 0xca, 0x41, 0x1b, 0x95, 0x43, 0xdb, 0x6e,
	0x95, 0x5a, 0xbb, 0xd9, 0xae, 0x94, 0xdc, 0x74, 0x06, 0x16, 0xc5, 0xf8, 0x0b, 0xb4, 0x5a, 0xe8,
	0x7e, 0xd2, 0xd9, 0x6a, 0x29, 0x96, 0xac, 0xed, 0x99, 0x2b, 0x22, 0x85, 0x35, 0xfe, 0x06, 0xb5,
	0x79, 0xda, 0x5b, 0x5c, 0x3f, 0x6b, 0x2e, 0xf6, 0xf5, 0x52, 0x44, 0x15, 0x0d, 0x48, 0x46, 0xc4,
	0xe7, 0xc5, 0x92, 0x67, 0x01, 0x3b, 0x23, 0x34, 0x90, 0xa3, 0xc7, 0x55, 0x0f, 0x08, 0xd7, 0x23,
	0xde, 0x18, 0xec, 0xb5, 0x12, 0xcf, 0x4e, 0x32, 0xd8, 0x89, 0x44, 0x1d, 0x4a, 0x90, 0x24, 0x43,
	0x50, 0x21, 0x97, 0xc5, 0x54, 0xd7, 0x94, 0xcd, 0x38, 0xbb, 0x51, 0x2a, 0xa6, 0xcb, 0xba, 0x72,
	0x36, 0xd3, 0xb6, 0x83, 0x5a, 0x04, 0xfe, 0x18, 0xb5, 0xf4, 0xfc, 0xf5, 0xf5, 0x51, 0x6c, 0xac,
	0x76, 0x58, 0xdd, 0x37, 0x2f, 0xa4, 0x7d, 0x15, 0xa2, 0xcc, 0xab, 0x81, 0xa9, 0x35, 0x1e, 0x54,
	0xf7, 0x6c, 0x7b, 0xbd, 0x3c, 0x14, 0x2b, 0x40, 0x32, 0x05, 0x55, 0xf2, 0x74, 0x46, 0xfc, 0x65,
	0xa1, 0x95, 0xe2, 0xa5, 0xe2, 0x09, 0xea, 0xb2, 0xd0, 0x07, 0x37, 0x2f, 0x84, 0x61, 0x40, 0x41,
	0xcd, 0x42, 0x10, 0xb6, 0xb5, 0xb3, 0xb0, 0xd7, 0x3c, 0xf8, 0xb0, 0xb2, 0x1e, 0xf6, 0x5f, 0x86,
	0x3e, 0xa4, 0x82, 0xe3, 0x80, 0xc2, 0x40, 0xd9, 0x1c, 0xb1, 0x98, 0x4f, 0x9d, 0x0e, 0xab, 0x54,
	0x76, 0x01, 0xdd, 0xaa, 0x31, 0xc3, 0x6b, 0x68, 0x41, 0x3e, 0xf9, 0x2c, 0xf5, 0xe4, 0x93, 0x7f,
	0xf1, 0x43, 0xb4, 0x78, 0x46, 0x68, 0x92, 0x3f, 0xd8, 0xd2, 0xdc, 0xcd, 0xb9, 0x70, 0x34, 0xf0,
	0xf3, 0x2b, 0x9f, 0x59, 0xbd, 0xbf, 0x2d, 0x84, 0xe7, 0x47, 0x36, 0x16, 0xff, 0xe1, 0xb0, 0x9f,
	0xd6, 0xcc, 0xfc, 0xff, 0xf3, 0x91, 0x1f, 0xa1, 0xf5, 0x8a, 0x8b, 0xc7, 0xf7, 0xd0, 0x6a, 0x4e,
	0x4d, 0x37, 0xf0, 0xf5, 0x31, 0x97, 0x9d, 0x56, 0x2e, 0x3d, 0xf1, 0x45, 0xef, 0x17, 0x0b, 0xb5,
	0xab, 0x28, 0x85, 0x8f, 0x10, 0xd2, 0x34, 0x7c, 0x0b, 0xd3, 0x34, 0x45, 0xbb, 0xb5, 0x2c, 0xd4,
	0x55, 0xfd, 0x0c, 0xa6, 0xce, 0x72, 0x60, 0xfe, 0x89, 0xee, 0x0b, 0x74, 0x2d, 0x15, 0xcb, 0x97,
	0xbf, 0x76, 0x19, 0xf8, 0xe6, 0xd8, 0x4b, 0x6a, 0x7d, 0xe2, 0xe3, 0x5d, 0x74, 0x5d, 0xab, 0x86,
	0xb2, 0xe9, 0x33, 0x32, 0xd1, 0x49, 0x58, 0x76, 0x5a, 0x4a, 0x7c, 0x9c, 0x50, 0xfa, 0x92, 0x4c,
	0xe0, 0xe0, 0x14, 0xb5, 0xf4, 0xa0, 0x1d, 0xe8, 0x2f, 0x4b, 0xfc, 0x18, 0x35, 0xe5, 0xb0, 0x4f,
	0x58, 0xe0, 0xc9, 0x47, 0x6b, 0x3e, 0xd8, 0x67, 0x3e, 0x3a, 0xba, 0xed, 0xa2, 0x3c, 0x7d, 0xfc,
	0xec, 0x59, 0x0f, 0xad, 0x27, 0x9b, 0xbf, 0x5e, 0x6c, 0x5b, 0xbf, 0x5d, 0x6c, 0x5b, 0xbf, 0x5f,
	0x6c, 0x5b, 0x3f, 0xff, 0xb9, 0xdd, 0xf8, 0x2e, 0xfd, 0x4c, 0x7d, 0x73, 0x55, 0x7d, 0xc2, 0x7c,
	0xf4, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0x52, 0xff, 0x9a, 0xe3, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SensorServiceClient is the client API for SensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type SensorServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (SensorService_CommunicateClient, error)
}

type sensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorServiceClient(cc grpc.ClientConnInterface) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (SensorService_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorService_serviceDesc.Streams[0], "/central.SensorService/Communicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorServiceCommunicateClient{stream}
	return x, nil
}

type SensorService_CommunicateClient interface {
	Send(*MsgFromSensor) error
	Recv() (*MsgToSensor, error)
	grpc.ClientStream
}

type sensorServiceCommunicateClient struct {
	grpc.ClientStream
}

func (x *sensorServiceCommunicateClient) Send(m *MsgFromSensor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sensorServiceCommunicateClient) Recv() (*MsgToSensor, error) {
	m := new(MsgToSensor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorServiceServer is the server API for SensorService service.
type SensorServiceServer interface {
	Communicate(SensorService_CommunicateServer) error
}

// UnimplementedSensorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSensorServiceServer struct {
}

func (*UnimplementedSensorServiceServer) Communicate(srv SensorService_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}

func RegisterSensorServiceServer(s *grpc.Server, srv SensorServiceServer) {
	s.RegisterService(&_SensorService_serviceDesc, srv)
}

func _SensorService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensorServiceServer).Communicate(&sensorServiceCommunicateServer{stream})
}

type SensorService_CommunicateServer interface {
	Send(*MsgToSensor) error
	Recv() (*MsgFromSensor, error)
	grpc.ServerStream
}

type sensorServiceCommunicateServer struct {
	grpc.ServerStream
}

func (x *sensorServiceCommunicateServer) Send(m *MsgToSensor) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sensorServiceCommunicateServer) Recv() (*MsgFromSensor, error) {
	m := new(MsgFromSensor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "central.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _SensorService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/central/sensor_iservice.proto",
}

func (m *MsgFromSensor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFromSensor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DedupeKey) > 0 {
		i -= len(m.DedupeKey)
		copy(dAtA[i:], m.DedupeKey)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.DedupeKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.HashKey) > 0 {
		i -= len(m.HashKey)
		copy(dAtA[i:], m.HashKey)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.HashKey)))
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *MsgFromSensor_Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_NetworkFlowUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_NetworkFlowUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkFlowUpdate != nil {
		{
			size, err := m.NetworkFlowUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ScrapeUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_ScrapeUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScrapeUpdate != nil {
		{
			size, err := m.ScrapeUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_NetworkPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_NetworkPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkPoliciesResponse != nil {
		{
			size, err := m.NetworkPoliciesResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ClusterStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_ClusterStatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterStatusUpdate != nil {
		{
			size, err := m.ClusterStatusUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_TelemetryDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_TelemetryDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TelemetryDataResponse != nil {
		{
			size, err := m.TelemetryDataResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ClusterHealthInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_ClusterHealthInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterHealthInfo != nil {
		{
			size, err := m.ClusterHealthInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_Hello) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_Hello) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hello != nil {
		{
			size, err := m.Hello.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_AuditLogStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_AuditLogStatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuditLogStatusInfo != nil {
		{
			size, err := m.AuditLogStatusInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_IssueLocalScannerCertsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_IssueLocalScannerCertsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IssueLocalScannerCertsRequest != nil {
		{
			size, err := m.IssueLocalScannerCertsRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ReassessPolicies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReassessPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReassessPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ReprocessDeployments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReprocessDeployments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReprocessDeployments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MsgToSensor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToSensor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgToSensor_Enforcement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_Enforcement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enforcement != nil {
		{
			size, err := m.Enforcement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ScrapeCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ScrapeCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScrapeCommand != nil {
		{
			size, err := m.ScrapeCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_NetworkPoliciesCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_NetworkPoliciesCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkPoliciesCommand != nil {
		{
			size, err := m.NetworkPoliciesCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ClusterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ClusterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterConfig != nil {
		{
			size, err := m.ClusterConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_SensorUpgradeTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_SensorUpgradeTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensorUpgradeTrigger != nil {
		{
			size, err := m.SensorUpgradeTrigger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_TelemetryDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_TelemetryDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TelemetryDataRequest != nil {
		{
			size, err := m.TelemetryDataRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_PolicySync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_PolicySync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicySync != nil {
		{
			size, err := m.PolicySync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ReassessPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ReassessPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReassessPolicies != nil {
		{
			size, err := m.ReassessPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_BaselineSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_BaselineSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BaselineSync != nil {
		{
			size, err := m.BaselineSync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_CancelPullTelemetryDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_CancelPullTelemetryDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelPullTelemetryDataRequest != nil {
		{
			size, err := m.CancelPullTelemetryDataRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_PushNetworkEntitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_PushNetworkEntitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PushNetworkEntitiesRequest != nil {
		{
			size, err := m.PushNetworkEntitiesRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_Hello) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_Hello) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hello != nil {
		{
			size, err := m.Hello.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_NetworkBaselineSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_NetworkBaselineSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkBaselineSync != nil {
		{
			size, err := m.NetworkBaselineSync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_AuditLogSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_AuditLogSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuditLogSync != nil {
		{
			size, err := m.AuditLogSync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ReprocessDeployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ReprocessDeployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReprocessDeployment != nil {
		{
			size, err := m.ReprocessDeployment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_InvalidateImageCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_InvalidateImageCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InvalidateImageCache != nil {
		{
			size, err := m.InvalidateImageCache.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_IssueLocalScannerCertsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_IssueLocalScannerCertsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IssueLocalScannerCertsResponse != nil {
		{
			size, err := m.IssueLocalScannerCertsResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_UpdatedImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_UpdatedImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdatedImage != nil {
		{
			size, err := m.UpdatedImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ReprocessDeployments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ReprocessDeployments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReprocessDeployments != nil {
		{
			size, err := m.ReprocessDeployments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AuditLogSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditLogSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditLogSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeAuditLogFileStates) > 0 {
		for k := range m.NodeAuditLogFileStates {
			v := m.NodeAuditLogFileStates[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSensorIservice(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSensorIservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSensorIservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuditLogStatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditLogStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditLogStatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeAuditLogFileStates) > 0 {
		for k := range m.NodeAuditLogFileStates {
			v := m.NodeAuditLogFileStates[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSensorIservice(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSensorIservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSensorIservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReprocessDeployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReprocessDeployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReprocessDeployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeploymentIds) > 0 {
		for iNdEx := len(m.DeploymentIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeploymentIds[iNdEx])
			copy(dAtA[i:], m.DeploymentIds[iNdEx])
			i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.DeploymentIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateImageCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateImageCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateImageCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImageKeys) > 0 {
		for iNdEx := len(m.ImageKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ImageKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSensorIservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateImageCache_ImageKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateImageCache_ImageKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateImageCache_ImageKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImageFullName) > 0 {
		i -= len(m.ImageFullName)
		copy(dAtA[i:], m.ImageFullName)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.ImageFullName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSensorIservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovSensorIservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgFromSensor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	l = len(m.HashKey)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	l = len(m.DedupeKey)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgFromSensor_Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_NetworkFlowUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkFlowUpdate != nil {
		l = m.NetworkFlowUpdate.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ScrapeUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScrapeUpdate != nil {
		l = m.ScrapeUpdate.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_NetworkPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPoliciesResponse != nil {
		l = m.NetworkPoliciesResponse.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ClusterStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterStatusUpdate != nil {
		l = m.ClusterStatusUpdate.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_TelemetryDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TelemetryDataResponse != nil {
		l = m.TelemetryDataResponse.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ClusterHealthInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterHealthInfo != nil {
		l = m.ClusterHealthInfo.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_Hello) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hello != nil {
		l = m.Hello.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_AuditLogStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuditLogStatusInfo != nil {
		l = m.AuditLogStatusInfo.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_IssueLocalScannerCertsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueLocalScannerCertsRequest != nil {
		l = m.IssueLocalScannerCertsRequest.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *ReassessPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReprocessDeployments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgToSensor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgToSensor_Enforcement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enforcement != nil {
		l = m.Enforcement.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ScrapeCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScrapeCommand != nil {
		l = m.ScrapeCommand.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_NetworkPoliciesCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPoliciesCommand != nil {
		l = m.NetworkPoliciesCommand.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ClusterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterConfig != nil {
		l = m.ClusterConfig.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_SensorUpgradeTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensorUpgradeTrigger != nil {
		l = m.SensorUpgradeTrigger.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_TelemetryDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TelemetryDataRequest != nil {
		l = m.TelemetryDataRequest.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_PolicySync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicySync != nil {
		l = m.PolicySync.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ReassessPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReassessPolicies != nil {
		l = m.ReassessPolicies.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_BaselineSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaselineSync != nil {
		l = m.BaselineSync.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_CancelPullTelemetryDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelPullTelemetryDataRequest != nil {
		l = m.CancelPullTelemetryDataRequest.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_PushNetworkEntitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PushNetworkEntitiesRequest != nil {
		l = m.PushNetworkEntitiesRequest.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_Hello) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hello != nil {
		l = m.Hello.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_NetworkBaselineSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkBaselineSync != nil {
		l = m.NetworkBaselineSync.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_AuditLogSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuditLogSync != nil {
		l = m.AuditLogSync.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ReprocessDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReprocessDeployment != nil {
		l = m.ReprocessDeployment.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_InvalidateImageCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvalidateImageCache != nil {
		l = m.InvalidateImageCache.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_IssueLocalScannerCertsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueLocalScannerCertsResponse != nil {
		l = m.IssueLocalScannerCertsResponse.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_UpdatedImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdatedImage != nil {
		l = m.UpdatedImage.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ReprocessDeployments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReprocessDeployments != nil {
		l = m.ReprocessDeployments.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *AuditLogSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAuditLogFileStates) > 0 {
		for k, v := range m.NodeAuditLogFileStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSensorIservice(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSensorIservice(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSensorIservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuditLogStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAuditLogFileStates) > 0 {
		for k, v := range m.NodeAuditLogFileStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSensorIservice(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSensorIservice(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSensorIservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReprocessDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeploymentIds) > 0 {
		for _, s := range m.DeploymentIds {
			l = len(s)
			n += 1 + l + sovSensorIservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InvalidateImageCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ImageKeys) > 0 {
		for _, e := range m.ImageKeys {
			l = e.Size()
			n += 1 + l + sovSensorIservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InvalidateImageCache_ImageKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	l = len(m.ImageFullName)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSensorIservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSensorIservice(x uint64) (n int) {
	return sovSensorIservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgFromSensor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFromSensor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFromSensor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SensorEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_Event{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkFlowUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NetworkFlowUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_NetworkFlowUpdate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrapeUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScrapeUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_ScrapeUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPoliciesResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NetworkPoliciesResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_NetworkPoliciesResponse{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterStatusUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_ClusterStatusUpdate{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryDataResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PullTelemetryDataResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_TelemetryDataResponse{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedupeKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DedupeKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterHealthInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RawClusterHealthInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_ClusterHealthInfo{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SensorHello{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_Hello{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditLogStatusInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuditLogStatusInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_AuditLogStatusInfo{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueLocalScannerCertsRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IssueLocalScannerCertsRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_IssueLocalScannerCertsRequest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReassessPolicies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReassessPolicies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReassessPolicies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReprocessDeployments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReprocessDeployments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReprocessDeployments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToSensor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToSensor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToSensor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enforcement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SensorEnforcement{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_Enforcement{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrapeCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScrapeCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ScrapeCommand{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPoliciesCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NetworkPoliciesCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_NetworkPoliciesCommand{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ClusterConfig{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensorUpgradeTrigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SensorUpgradeTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_SensorUpgradeTrigger{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryDataRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PullTelemetryDataRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_TelemetryDataRequest{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicySync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicySync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_PolicySync{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReassessPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReassessPolicies{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ReassessPolicies{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaselineSync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BaselineSync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_BaselineSync{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelPullTelemetryDataRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelPullTelemetryDataRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_CancelPullTelemetryDataRequest{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushNetworkEntitiesRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PushNetworkEntitiesRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_PushNetworkEntitiesRequest{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CentralHello{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_Hello{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkBaselineSync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NetworkBaselineSync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_NetworkBaselineSync{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditLogSync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuditLogSync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_AuditLogSync{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReprocessDeployment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReprocessDeployment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ReprocessDeployment{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidateImageCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InvalidateImageCache{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_InvalidateImageCache{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueLocalScannerCertsResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IssueLocalScannerCertsResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_IssueLocalScannerCertsResponse{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.Image{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_UpdatedImage{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReprocessDeployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReprocessDeployments{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ReprocessDeployments{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditLogSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditLogSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditLogSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAuditLogFileStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAuditLogFileStates == nil {
				m.NodeAuditLogFileStates = make(map[string]*storage.AuditLogFileState)
			}
			var mapkey string
			var mapvalue *storage.AuditLogFileState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSensorIservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSensorIservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSensorIservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSensorIservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSensorIservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &storage.AuditLogFileState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSensorIservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeAuditLogFileStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditLogStatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditLogStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditLogStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAuditLogFileStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAuditLogFileStates == nil {
				m.NodeAuditLogFileStates = make(map[string]*storage.AuditLogFileState)
			}
			var mapkey string
			var mapvalue *storage.AuditLogFileState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSensorIservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSensorIservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSensorIservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSensorIservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSensorIservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &storage.AuditLogFileState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSensorIservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeAuditLogFileStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReprocessDeployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReprocessDeployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReprocessDeployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentIds = append(m.DeploymentIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateImageCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateImageCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateImageCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageKeys = append(m.ImageKeys, &InvalidateImageCache_ImageKey{})
			if err := m.ImageKeys[len(m.ImageKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateImageCache_ImageKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageFullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageFullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSensorIservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSensorIservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSensorIservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSensorIservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSensorIservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSensorIservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSensorIservice = fmt.Errorf("proto: unexpected end of group")
)
