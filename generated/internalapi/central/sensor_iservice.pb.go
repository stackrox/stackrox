// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: internalapi/central/sensor_iservice.proto

package central

import (
	storage "github.com/stackrox/rox/generated/storage"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeInventoryACK_Action int32

const (
	NodeInventoryACK_ACK  NodeInventoryACK_Action = 0
	NodeInventoryACK_NACK NodeInventoryACK_Action = 1
)

// Enum value maps for NodeInventoryACK_Action.
var (
	NodeInventoryACK_Action_name = map[int32]string{
		0: "ACK",
		1: "NACK",
	}
	NodeInventoryACK_Action_value = map[string]int32{
		"ACK":  0,
		"NACK": 1,
	}
)

func (x NodeInventoryACK_Action) Enum() *NodeInventoryACK_Action {
	p := new(NodeInventoryACK_Action)
	*p = x
	return p
}

func (x NodeInventoryACK_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeInventoryACK_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_internalapi_central_sensor_iservice_proto_enumTypes[0].Descriptor()
}

func (NodeInventoryACK_Action) Type() protoreflect.EnumType {
	return &file_internalapi_central_sensor_iservice_proto_enumTypes[0]
}

func (x NodeInventoryACK_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeInventoryACK_Action.Descriptor instead.
func (NodeInventoryACK_Action) EnumDescriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{5, 0}
}

// next available tag: 19
type MsgFromSensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashKey           string `protobuf:"bytes,7,opt,name=hash_key,json=hashKey,proto3" json:"hash_key,omitempty"`
	DedupeKey         string `protobuf:"bytes,8,opt,name=dedupe_key,json=dedupeKey,proto3" json:"dedupe_key,omitempty"`
	ProcessingAttempt int32  `protobuf:"varint,15,opt,name=processing_attempt,json=processingAttempt,proto3" json:"processing_attempt,omitempty"`
	// Types that are assignable to Msg:
	//
	//	*MsgFromSensor_Event
	//	*MsgFromSensor_NetworkFlowUpdate
	//	*MsgFromSensor_ScrapeUpdate
	//	*MsgFromSensor_NetworkPoliciesResponse
	//	*MsgFromSensor_ClusterStatusUpdate
	//	*MsgFromSensor_TelemetryDataResponse
	//	*MsgFromSensor_ClusterHealthInfo
	//	*MsgFromSensor_Hello
	//	*MsgFromSensor_AuditLogStatusInfo
	//	*MsgFromSensor_IssueLocalScannerCertsRequest
	//	*MsgFromSensor_ClusterMetrics
	//	*MsgFromSensor_ProcessListeningOnPortUpdate
	//	*MsgFromSensor_ComplianceOperatorInfo
	//	*MsgFromSensor_ComplianceResponse
	//	*MsgFromSensor_DeploymentEnhancementResponse
	Msg isMsgFromSensor_Msg `protobuf_oneof:"msg"`
}

func (x *MsgFromSensor) Reset() {
	*x = MsgFromSensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFromSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFromSensor) ProtoMessage() {}

func (x *MsgFromSensor) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFromSensor.ProtoReflect.Descriptor instead.
func (*MsgFromSensor) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{0}
}

func (x *MsgFromSensor) GetHashKey() string {
	if x != nil {
		return x.HashKey
	}
	return ""
}

func (x *MsgFromSensor) GetDedupeKey() string {
	if x != nil {
		return x.DedupeKey
	}
	return ""
}

func (x *MsgFromSensor) GetProcessingAttempt() int32 {
	if x != nil {
		return x.ProcessingAttempt
	}
	return 0
}

func (m *MsgFromSensor) GetMsg() isMsgFromSensor_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *MsgFromSensor) GetEvent() *SensorEvent {
	if x, ok := x.GetMsg().(*MsgFromSensor_Event); ok {
		return x.Event
	}
	return nil
}

func (x *MsgFromSensor) GetNetworkFlowUpdate() *NetworkFlowUpdate {
	if x, ok := x.GetMsg().(*MsgFromSensor_NetworkFlowUpdate); ok {
		return x.NetworkFlowUpdate
	}
	return nil
}

func (x *MsgFromSensor) GetScrapeUpdate() *ScrapeUpdate {
	if x, ok := x.GetMsg().(*MsgFromSensor_ScrapeUpdate); ok {
		return x.ScrapeUpdate
	}
	return nil
}

func (x *MsgFromSensor) GetNetworkPoliciesResponse() *NetworkPoliciesResponse {
	if x, ok := x.GetMsg().(*MsgFromSensor_NetworkPoliciesResponse); ok {
		return x.NetworkPoliciesResponse
	}
	return nil
}

func (x *MsgFromSensor) GetClusterStatusUpdate() *ClusterStatusUpdate {
	if x, ok := x.GetMsg().(*MsgFromSensor_ClusterStatusUpdate); ok {
		return x.ClusterStatusUpdate
	}
	return nil
}

func (x *MsgFromSensor) GetTelemetryDataResponse() *PullTelemetryDataResponse {
	if x, ok := x.GetMsg().(*MsgFromSensor_TelemetryDataResponse); ok {
		return x.TelemetryDataResponse
	}
	return nil
}

func (x *MsgFromSensor) GetClusterHealthInfo() *RawClusterHealthInfo {
	if x, ok := x.GetMsg().(*MsgFromSensor_ClusterHealthInfo); ok {
		return x.ClusterHealthInfo
	}
	return nil
}

func (x *MsgFromSensor) GetHello() *SensorHello {
	if x, ok := x.GetMsg().(*MsgFromSensor_Hello); ok {
		return x.Hello
	}
	return nil
}

func (x *MsgFromSensor) GetAuditLogStatusInfo() *AuditLogStatusInfo {
	if x, ok := x.GetMsg().(*MsgFromSensor_AuditLogStatusInfo); ok {
		return x.AuditLogStatusInfo
	}
	return nil
}

func (x *MsgFromSensor) GetIssueLocalScannerCertsRequest() *IssueLocalScannerCertsRequest {
	if x, ok := x.GetMsg().(*MsgFromSensor_IssueLocalScannerCertsRequest); ok {
		return x.IssueLocalScannerCertsRequest
	}
	return nil
}

func (x *MsgFromSensor) GetClusterMetrics() *ClusterMetrics {
	if x, ok := x.GetMsg().(*MsgFromSensor_ClusterMetrics); ok {
		return x.ClusterMetrics
	}
	return nil
}

func (x *MsgFromSensor) GetProcessListeningOnPortUpdate() *ProcessListeningOnPortsUpdate {
	if x, ok := x.GetMsg().(*MsgFromSensor_ProcessListeningOnPortUpdate); ok {
		return x.ProcessListeningOnPortUpdate
	}
	return nil
}

func (x *MsgFromSensor) GetComplianceOperatorInfo() *ComplianceOperatorInfo {
	if x, ok := x.GetMsg().(*MsgFromSensor_ComplianceOperatorInfo); ok {
		return x.ComplianceOperatorInfo
	}
	return nil
}

func (x *MsgFromSensor) GetComplianceResponse() *ComplianceResponse {
	if x, ok := x.GetMsg().(*MsgFromSensor_ComplianceResponse); ok {
		return x.ComplianceResponse
	}
	return nil
}

func (x *MsgFromSensor) GetDeploymentEnhancementResponse() *DeploymentEnhancementResponse {
	if x, ok := x.GetMsg().(*MsgFromSensor_DeploymentEnhancementResponse); ok {
		return x.DeploymentEnhancementResponse
	}
	return nil
}

type isMsgFromSensor_Msg interface {
	isMsgFromSensor_Msg()
}

type MsgFromSensor_Event struct {
	Event *SensorEvent `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

type MsgFromSensor_NetworkFlowUpdate struct {
	NetworkFlowUpdate *NetworkFlowUpdate `protobuf:"bytes,2,opt,name=network_flow_update,json=networkFlowUpdate,proto3,oneof"`
}

type MsgFromSensor_ScrapeUpdate struct {
	ScrapeUpdate *ScrapeUpdate `protobuf:"bytes,3,opt,name=scrape_update,json=scrapeUpdate,proto3,oneof"`
}

type MsgFromSensor_NetworkPoliciesResponse struct {
	NetworkPoliciesResponse *NetworkPoliciesResponse `protobuf:"bytes,4,opt,name=network_policies_response,json=networkPoliciesResponse,proto3,oneof"`
}

type MsgFromSensor_ClusterStatusUpdate struct {
	ClusterStatusUpdate *ClusterStatusUpdate `protobuf:"bytes,5,opt,name=cluster_status_update,json=clusterStatusUpdate,proto3,oneof"`
}

type MsgFromSensor_TelemetryDataResponse struct {
	TelemetryDataResponse *PullTelemetryDataResponse `protobuf:"bytes,6,opt,name=telemetry_data_response,json=telemetryDataResponse,proto3,oneof"`
}

type MsgFromSensor_ClusterHealthInfo struct {
	ClusterHealthInfo *RawClusterHealthInfo `protobuf:"bytes,9,opt,name=cluster_health_info,json=clusterHealthInfo,proto3,oneof"`
}

type MsgFromSensor_Hello struct {
	Hello *SensorHello `protobuf:"bytes,10,opt,name=hello,proto3,oneof"`
}

type MsgFromSensor_AuditLogStatusInfo struct {
	AuditLogStatusInfo *AuditLogStatusInfo `protobuf:"bytes,11,opt,name=audit_log_status_info,json=auditLogStatusInfo,proto3,oneof"`
}

type MsgFromSensor_IssueLocalScannerCertsRequest struct {
	IssueLocalScannerCertsRequest *IssueLocalScannerCertsRequest `protobuf:"bytes,12,opt,name=issue_local_scanner_certs_request,json=issueLocalScannerCertsRequest,proto3,oneof"`
}

type MsgFromSensor_ClusterMetrics struct {
	ClusterMetrics *ClusterMetrics `protobuf:"bytes,13,opt,name=cluster_metrics,json=clusterMetrics,proto3,oneof"`
}

type MsgFromSensor_ProcessListeningOnPortUpdate struct {
	ProcessListeningOnPortUpdate *ProcessListeningOnPortsUpdate `protobuf:"bytes,14,opt,name=process_listening_on_port_update,json=processListeningOnPortUpdate,proto3,oneof"`
}

type MsgFromSensor_ComplianceOperatorInfo struct {
	ComplianceOperatorInfo *ComplianceOperatorInfo `protobuf:"bytes,16,opt,name=compliance_operator_info,json=complianceOperatorInfo,proto3,oneof"`
}

type MsgFromSensor_ComplianceResponse struct {
	ComplianceResponse *ComplianceResponse `protobuf:"bytes,17,opt,name=compliance_response,json=complianceResponse,proto3,oneof"`
}

type MsgFromSensor_DeploymentEnhancementResponse struct {
	DeploymentEnhancementResponse *DeploymentEnhancementResponse `protobuf:"bytes,18,opt,name=deployment_enhancement_response,json=deploymentEnhancementResponse,proto3,oneof"`
}

func (*MsgFromSensor_Event) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_NetworkFlowUpdate) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ScrapeUpdate) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_NetworkPoliciesResponse) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ClusterStatusUpdate) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_TelemetryDataResponse) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ClusterHealthInfo) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_Hello) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_AuditLogStatusInfo) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_IssueLocalScannerCertsRequest) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ClusterMetrics) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ProcessListeningOnPortUpdate) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ComplianceOperatorInfo) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ComplianceResponse) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_DeploymentEnhancementResponse) isMsgFromSensor_Msg() {}

type ReassessPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReassessPolicies) Reset() {
	*x = ReassessPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReassessPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReassessPolicies) ProtoMessage() {}

func (x *ReassessPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReassessPolicies.ProtoReflect.Descriptor instead.
func (*ReassessPolicies) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{1}
}

type ReprocessDeployments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReprocessDeployments) Reset() {
	*x = ReprocessDeployments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReprocessDeployments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReprocessDeployments) ProtoMessage() {}

func (x *ReprocessDeployments) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReprocessDeployments.ProtoReflect.Descriptor instead.
func (*ReprocessDeployments) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{2}
}

// next available tag: 28
type MsgToSensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*MsgToSensor_Enforcement
	//	*MsgToSensor_ScrapeCommand
	//	*MsgToSensor_NetworkPoliciesCommand
	//	*MsgToSensor_ClusterConfig
	//	*MsgToSensor_SensorUpgradeTrigger
	//	*MsgToSensor_TelemetryDataRequest
	//	*MsgToSensor_PolicySync
	//	*MsgToSensor_ReassessPolicies
	//	*MsgToSensor_BaselineSync
	//	*MsgToSensor_CancelPullTelemetryDataRequest
	//	*MsgToSensor_PushNetworkEntitiesRequest
	//	*MsgToSensor_Hello
	//	*MsgToSensor_NetworkBaselineSync
	//	*MsgToSensor_AuditLogSync
	//	*MsgToSensor_ReprocessDeployment
	//	*MsgToSensor_InvalidateImageCache
	//	*MsgToSensor_IssueLocalScannerCertsResponse
	//	*MsgToSensor_UpdatedImage
	//	*MsgToSensor_ReprocessDeployments
	//	*MsgToSensor_NodeInventoryAck
	//	*MsgToSensor_DelegatedRegistryConfig
	//	*MsgToSensor_ScanImage
	//	*MsgToSensor_ImageIntegrations
	//	*MsgToSensor_ComplianceRequest
	//	*MsgToSensor_ClusterHealthResponse
	//	*MsgToSensor_DeduperState
	//	*MsgToSensor_DeploymentEnhancementRequest
	Msg isMsgToSensor_Msg `protobuf_oneof:"msg"`
}

func (x *MsgToSensor) Reset() {
	*x = MsgToSensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgToSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgToSensor) ProtoMessage() {}

func (x *MsgToSensor) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgToSensor.ProtoReflect.Descriptor instead.
func (*MsgToSensor) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{3}
}

func (m *MsgToSensor) GetMsg() isMsgToSensor_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *MsgToSensor) GetEnforcement() *SensorEnforcement {
	if x, ok := x.GetMsg().(*MsgToSensor_Enforcement); ok {
		return x.Enforcement
	}
	return nil
}

func (x *MsgToSensor) GetScrapeCommand() *ScrapeCommand {
	if x, ok := x.GetMsg().(*MsgToSensor_ScrapeCommand); ok {
		return x.ScrapeCommand
	}
	return nil
}

func (x *MsgToSensor) GetNetworkPoliciesCommand() *NetworkPoliciesCommand {
	if x, ok := x.GetMsg().(*MsgToSensor_NetworkPoliciesCommand); ok {
		return x.NetworkPoliciesCommand
	}
	return nil
}

func (x *MsgToSensor) GetClusterConfig() *ClusterConfig {
	if x, ok := x.GetMsg().(*MsgToSensor_ClusterConfig); ok {
		return x.ClusterConfig
	}
	return nil
}

func (x *MsgToSensor) GetSensorUpgradeTrigger() *SensorUpgradeTrigger {
	if x, ok := x.GetMsg().(*MsgToSensor_SensorUpgradeTrigger); ok {
		return x.SensorUpgradeTrigger
	}
	return nil
}

func (x *MsgToSensor) GetTelemetryDataRequest() *PullTelemetryDataRequest {
	if x, ok := x.GetMsg().(*MsgToSensor_TelemetryDataRequest); ok {
		return x.TelemetryDataRequest
	}
	return nil
}

func (x *MsgToSensor) GetPolicySync() *PolicySync {
	if x, ok := x.GetMsg().(*MsgToSensor_PolicySync); ok {
		return x.PolicySync
	}
	return nil
}

func (x *MsgToSensor) GetReassessPolicies() *ReassessPolicies {
	if x, ok := x.GetMsg().(*MsgToSensor_ReassessPolicies); ok {
		return x.ReassessPolicies
	}
	return nil
}

func (x *MsgToSensor) GetBaselineSync() *BaselineSync {
	if x, ok := x.GetMsg().(*MsgToSensor_BaselineSync); ok {
		return x.BaselineSync
	}
	return nil
}

func (x *MsgToSensor) GetCancelPullTelemetryDataRequest() *CancelPullTelemetryDataRequest {
	if x, ok := x.GetMsg().(*MsgToSensor_CancelPullTelemetryDataRequest); ok {
		return x.CancelPullTelemetryDataRequest
	}
	return nil
}

func (x *MsgToSensor) GetPushNetworkEntitiesRequest() *PushNetworkEntitiesRequest {
	if x, ok := x.GetMsg().(*MsgToSensor_PushNetworkEntitiesRequest); ok {
		return x.PushNetworkEntitiesRequest
	}
	return nil
}

func (x *MsgToSensor) GetHello() *CentralHello {
	if x, ok := x.GetMsg().(*MsgToSensor_Hello); ok {
		return x.Hello
	}
	return nil
}

func (x *MsgToSensor) GetNetworkBaselineSync() *NetworkBaselineSync {
	if x, ok := x.GetMsg().(*MsgToSensor_NetworkBaselineSync); ok {
		return x.NetworkBaselineSync
	}
	return nil
}

func (x *MsgToSensor) GetAuditLogSync() *AuditLogSync {
	if x, ok := x.GetMsg().(*MsgToSensor_AuditLogSync); ok {
		return x.AuditLogSync
	}
	return nil
}

func (x *MsgToSensor) GetReprocessDeployment() *ReprocessDeployment {
	if x, ok := x.GetMsg().(*MsgToSensor_ReprocessDeployment); ok {
		return x.ReprocessDeployment
	}
	return nil
}

func (x *MsgToSensor) GetInvalidateImageCache() *InvalidateImageCache {
	if x, ok := x.GetMsg().(*MsgToSensor_InvalidateImageCache); ok {
		return x.InvalidateImageCache
	}
	return nil
}

func (x *MsgToSensor) GetIssueLocalScannerCertsResponse() *IssueLocalScannerCertsResponse {
	if x, ok := x.GetMsg().(*MsgToSensor_IssueLocalScannerCertsResponse); ok {
		return x.IssueLocalScannerCertsResponse
	}
	return nil
}

func (x *MsgToSensor) GetUpdatedImage() *storage.Image {
	if x, ok := x.GetMsg().(*MsgToSensor_UpdatedImage); ok {
		return x.UpdatedImage
	}
	return nil
}

func (x *MsgToSensor) GetReprocessDeployments() *ReprocessDeployments {
	if x, ok := x.GetMsg().(*MsgToSensor_ReprocessDeployments); ok {
		return x.ReprocessDeployments
	}
	return nil
}

func (x *MsgToSensor) GetNodeInventoryAck() *NodeInventoryACK {
	if x, ok := x.GetMsg().(*MsgToSensor_NodeInventoryAck); ok {
		return x.NodeInventoryAck
	}
	return nil
}

func (x *MsgToSensor) GetDelegatedRegistryConfig() *DelegatedRegistryConfig {
	if x, ok := x.GetMsg().(*MsgToSensor_DelegatedRegistryConfig); ok {
		return x.DelegatedRegistryConfig
	}
	return nil
}

func (x *MsgToSensor) GetScanImage() *ScanImage {
	if x, ok := x.GetMsg().(*MsgToSensor_ScanImage); ok {
		return x.ScanImage
	}
	return nil
}

func (x *MsgToSensor) GetImageIntegrations() *ImageIntegrations {
	if x, ok := x.GetMsg().(*MsgToSensor_ImageIntegrations); ok {
		return x.ImageIntegrations
	}
	return nil
}

func (x *MsgToSensor) GetComplianceRequest() *ComplianceRequest {
	if x, ok := x.GetMsg().(*MsgToSensor_ComplianceRequest); ok {
		return x.ComplianceRequest
	}
	return nil
}

func (x *MsgToSensor) GetClusterHealthResponse() *ClusterHealthResponse {
	if x, ok := x.GetMsg().(*MsgToSensor_ClusterHealthResponse); ok {
		return x.ClusterHealthResponse
	}
	return nil
}

func (x *MsgToSensor) GetDeduperState() *DeduperState {
	if x, ok := x.GetMsg().(*MsgToSensor_DeduperState); ok {
		return x.DeduperState
	}
	return nil
}

func (x *MsgToSensor) GetDeploymentEnhancementRequest() *DeploymentEnhancementRequest {
	if x, ok := x.GetMsg().(*MsgToSensor_DeploymentEnhancementRequest); ok {
		return x.DeploymentEnhancementRequest
	}
	return nil
}

type isMsgToSensor_Msg interface {
	isMsgToSensor_Msg()
}

type MsgToSensor_Enforcement struct {
	Enforcement *SensorEnforcement `protobuf:"bytes,1,opt,name=enforcement,proto3,oneof"`
}

type MsgToSensor_ScrapeCommand struct {
	ScrapeCommand *ScrapeCommand `protobuf:"bytes,2,opt,name=scrape_command,json=scrapeCommand,proto3,oneof"`
}

type MsgToSensor_NetworkPoliciesCommand struct {
	NetworkPoliciesCommand *NetworkPoliciesCommand `protobuf:"bytes,3,opt,name=network_policies_command,json=networkPoliciesCommand,proto3,oneof"`
}

type MsgToSensor_ClusterConfig struct {
	ClusterConfig *ClusterConfig `protobuf:"bytes,4,opt,name=cluster_config,json=clusterConfig,proto3,oneof"`
}

type MsgToSensor_SensorUpgradeTrigger struct {
	SensorUpgradeTrigger *SensorUpgradeTrigger `protobuf:"bytes,5,opt,name=sensor_upgrade_trigger,json=sensorUpgradeTrigger,proto3,oneof"`
}

type MsgToSensor_TelemetryDataRequest struct {
	TelemetryDataRequest *PullTelemetryDataRequest `protobuf:"bytes,6,opt,name=telemetry_data_request,json=telemetryDataRequest,proto3,oneof"`
}

type MsgToSensor_PolicySync struct {
	PolicySync *PolicySync `protobuf:"bytes,7,opt,name=policy_sync,json=policySync,proto3,oneof"`
}

type MsgToSensor_ReassessPolicies struct {
	ReassessPolicies *ReassessPolicies `protobuf:"bytes,8,opt,name=reassess_policies,json=reassessPolicies,proto3,oneof"`
}

type MsgToSensor_BaselineSync struct {
	BaselineSync *BaselineSync `protobuf:"bytes,9,opt,name=baseline_sync,json=baselineSync,proto3,oneof"`
}

type MsgToSensor_CancelPullTelemetryDataRequest struct {
	CancelPullTelemetryDataRequest *CancelPullTelemetryDataRequest `protobuf:"bytes,10,opt,name=cancel_pull_telemetry_data_request,json=cancelPullTelemetryDataRequest,proto3,oneof"`
}

type MsgToSensor_PushNetworkEntitiesRequest struct {
	PushNetworkEntitiesRequest *PushNetworkEntitiesRequest `protobuf:"bytes,11,opt,name=push_network_entities_request,json=pushNetworkEntitiesRequest,proto3,oneof"`
}

type MsgToSensor_Hello struct {
	Hello *CentralHello `protobuf:"bytes,12,opt,name=hello,proto3,oneof"`
}

type MsgToSensor_NetworkBaselineSync struct {
	NetworkBaselineSync *NetworkBaselineSync `protobuf:"bytes,13,opt,name=network_baseline_sync,json=networkBaselineSync,proto3,oneof"`
}

type MsgToSensor_AuditLogSync struct {
	AuditLogSync *AuditLogSync `protobuf:"bytes,14,opt,name=audit_log_sync,json=auditLogSync,proto3,oneof"`
}

type MsgToSensor_ReprocessDeployment struct {
	ReprocessDeployment *ReprocessDeployment `protobuf:"bytes,15,opt,name=reprocess_deployment,json=reprocessDeployment,proto3,oneof"`
}

type MsgToSensor_InvalidateImageCache struct {
	InvalidateImageCache *InvalidateImageCache `protobuf:"bytes,16,opt,name=invalidate_image_cache,json=invalidateImageCache,proto3,oneof"`
}

type MsgToSensor_IssueLocalScannerCertsResponse struct {
	IssueLocalScannerCertsResponse *IssueLocalScannerCertsResponse `protobuf:"bytes,17,opt,name=issue_local_scanner_certs_response,json=issueLocalScannerCertsResponse,proto3,oneof"`
}

type MsgToSensor_UpdatedImage struct {
	UpdatedImage *storage.Image `protobuf:"bytes,18,opt,name=updated_image,json=updatedImage,proto3,oneof"`
}

type MsgToSensor_ReprocessDeployments struct {
	ReprocessDeployments *ReprocessDeployments `protobuf:"bytes,19,opt,name=reprocess_deployments,json=reprocessDeployments,proto3,oneof"`
}

type MsgToSensor_NodeInventoryAck struct {
	NodeInventoryAck *NodeInventoryACK `protobuf:"bytes,20,opt,name=node_inventory_ack,json=nodeInventoryAck,proto3,oneof"`
}

type MsgToSensor_DelegatedRegistryConfig struct {
	DelegatedRegistryConfig *DelegatedRegistryConfig `protobuf:"bytes,21,opt,name=delegated_registry_config,json=delegatedRegistryConfig,proto3,oneof"`
}

type MsgToSensor_ScanImage struct {
	ScanImage *ScanImage `protobuf:"bytes,22,opt,name=scan_image,json=scanImage,proto3,oneof"`
}

type MsgToSensor_ImageIntegrations struct {
	ImageIntegrations *ImageIntegrations `protobuf:"bytes,23,opt,name=image_integrations,json=imageIntegrations,proto3,oneof"`
}

type MsgToSensor_ComplianceRequest struct {
	ComplianceRequest *ComplianceRequest `protobuf:"bytes,24,opt,name=compliance_request,json=complianceRequest,proto3,oneof"`
}

type MsgToSensor_ClusterHealthResponse struct {
	ClusterHealthResponse *ClusterHealthResponse `protobuf:"bytes,25,opt,name=cluster_health_response,json=clusterHealthResponse,proto3,oneof"`
}

type MsgToSensor_DeduperState struct {
	DeduperState *DeduperState `protobuf:"bytes,26,opt,name=deduper_state,json=deduperState,proto3,oneof"`
}

type MsgToSensor_DeploymentEnhancementRequest struct {
	DeploymentEnhancementRequest *DeploymentEnhancementRequest `protobuf:"bytes,27,opt,name=deployment_enhancement_request,json=deploymentEnhancementRequest,proto3,oneof"`
}

func (*MsgToSensor_Enforcement) isMsgToSensor_Msg() {}

func (*MsgToSensor_ScrapeCommand) isMsgToSensor_Msg() {}

func (*MsgToSensor_NetworkPoliciesCommand) isMsgToSensor_Msg() {}

func (*MsgToSensor_ClusterConfig) isMsgToSensor_Msg() {}

func (*MsgToSensor_SensorUpgradeTrigger) isMsgToSensor_Msg() {}

func (*MsgToSensor_TelemetryDataRequest) isMsgToSensor_Msg() {}

func (*MsgToSensor_PolicySync) isMsgToSensor_Msg() {}

func (*MsgToSensor_ReassessPolicies) isMsgToSensor_Msg() {}

func (*MsgToSensor_BaselineSync) isMsgToSensor_Msg() {}

func (*MsgToSensor_CancelPullTelemetryDataRequest) isMsgToSensor_Msg() {}

func (*MsgToSensor_PushNetworkEntitiesRequest) isMsgToSensor_Msg() {}

func (*MsgToSensor_Hello) isMsgToSensor_Msg() {}

func (*MsgToSensor_NetworkBaselineSync) isMsgToSensor_Msg() {}

func (*MsgToSensor_AuditLogSync) isMsgToSensor_Msg() {}

func (*MsgToSensor_ReprocessDeployment) isMsgToSensor_Msg() {}

func (*MsgToSensor_InvalidateImageCache) isMsgToSensor_Msg() {}

func (*MsgToSensor_IssueLocalScannerCertsResponse) isMsgToSensor_Msg() {}

func (*MsgToSensor_UpdatedImage) isMsgToSensor_Msg() {}

func (*MsgToSensor_ReprocessDeployments) isMsgToSensor_Msg() {}

func (*MsgToSensor_NodeInventoryAck) isMsgToSensor_Msg() {}

func (*MsgToSensor_DelegatedRegistryConfig) isMsgToSensor_Msg() {}

func (*MsgToSensor_ScanImage) isMsgToSensor_Msg() {}

func (*MsgToSensor_ImageIntegrations) isMsgToSensor_Msg() {}

func (*MsgToSensor_ComplianceRequest) isMsgToSensor_Msg() {}

func (*MsgToSensor_ClusterHealthResponse) isMsgToSensor_Msg() {}

func (*MsgToSensor_DeduperState) isMsgToSensor_Msg() {}

func (*MsgToSensor_DeploymentEnhancementRequest) isMsgToSensor_Msg() {}

type DeduperState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceHashes map[string]uint64 `protobuf:"bytes,1,rep,name=resource_hashes,json=resourceHashes,proto3" json:"resource_hashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Current        int32             `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	Total          int32             `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DeduperState) Reset() {
	*x = DeduperState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeduperState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeduperState) ProtoMessage() {}

func (x *DeduperState) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeduperState.ProtoReflect.Descriptor instead.
func (*DeduperState) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{4}
}

func (x *DeduperState) GetResourceHashes() map[string]uint64 {
	if x != nil {
		return x.ResourceHashes
	}
	return nil
}

func (x *DeduperState) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *DeduperState) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type NodeInventoryACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                  `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	NodeName  string                  `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Action    NodeInventoryACK_Action `protobuf:"varint,3,opt,name=action,proto3,enum=central.NodeInventoryACK_Action" json:"action,omitempty"`
}

func (x *NodeInventoryACK) Reset() {
	*x = NodeInventoryACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInventoryACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInventoryACK) ProtoMessage() {}

func (x *NodeInventoryACK) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInventoryACK.ProtoReflect.Descriptor instead.
func (*NodeInventoryACK) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{5}
}

func (x *NodeInventoryACK) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *NodeInventoryACK) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeInventoryACK) GetAction() NodeInventoryACK_Action {
	if x != nil {
		return x.Action
	}
	return NodeInventoryACK_ACK
}

type AuditLogSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAuditLogFileStates map[string]*storage.AuditLogFileState `protobuf:"bytes,1,rep,name=node_audit_log_file_states,json=nodeAuditLogFileStates,proto3" json:"node_audit_log_file_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AuditLogSync) Reset() {
	*x = AuditLogSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogSync) ProtoMessage() {}

func (x *AuditLogSync) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogSync.ProtoReflect.Descriptor instead.
func (*AuditLogSync) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{6}
}

func (x *AuditLogSync) GetNodeAuditLogFileStates() map[string]*storage.AuditLogFileState {
	if x != nil {
		return x.NodeAuditLogFileStates
	}
	return nil
}

type AuditLogStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAuditLogFileStates map[string]*storage.AuditLogFileState `protobuf:"bytes,1,rep,name=node_audit_log_file_states,json=nodeAuditLogFileStates,proto3" json:"node_audit_log_file_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AuditLogStatusInfo) Reset() {
	*x = AuditLogStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogStatusInfo) ProtoMessage() {}

func (x *AuditLogStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogStatusInfo.ProtoReflect.Descriptor instead.
func (*AuditLogStatusInfo) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{7}
}

func (x *AuditLogStatusInfo) GetNodeAuditLogFileStates() map[string]*storage.AuditLogFileState {
	if x != nil {
		return x.NodeAuditLogFileStates
	}
	return nil
}

type ReprocessDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentIds []string `protobuf:"bytes,1,rep,name=deployment_ids,json=deploymentIds,proto3" json:"deployment_ids,omitempty"`
}

func (x *ReprocessDeployment) Reset() {
	*x = ReprocessDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReprocessDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReprocessDeployment) ProtoMessage() {}

func (x *ReprocessDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReprocessDeployment.ProtoReflect.Descriptor instead.
func (*ReprocessDeployment) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{8}
}

func (x *ReprocessDeployment) GetDeploymentIds() []string {
	if x != nil {
		return x.DeploymentIds
	}
	return nil
}

type InvalidateImageCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageKeys []*InvalidateImageCache_ImageKey `protobuf:"bytes,1,rep,name=image_keys,json=imageKeys,proto3" json:"image_keys,omitempty"`
}

func (x *InvalidateImageCache) Reset() {
	*x = InvalidateImageCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateImageCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateImageCache) ProtoMessage() {}

func (x *InvalidateImageCache) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateImageCache.ProtoReflect.Descriptor instead.
func (*InvalidateImageCache) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{9}
}

func (x *InvalidateImageCache) GetImageKeys() []*InvalidateImageCache_ImageKey {
	if x != nil {
		return x.ImageKeys
	}
	return nil
}

type InvalidateImageCache_ImageKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId       string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ImageFullName string `protobuf:"bytes,2,opt,name=image_full_name,json=imageFullName,proto3" json:"image_full_name,omitempty"`
}

func (x *InvalidateImageCache_ImageKey) Reset() {
	*x = InvalidateImageCache_ImageKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateImageCache_ImageKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateImageCache_ImageKey) ProtoMessage() {}

func (x *InvalidateImageCache_ImageKey) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateImageCache_ImageKey.ProtoReflect.Descriptor instead.
func (*InvalidateImageCache_ImageKey) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{9, 0}
}

func (x *InvalidateImageCache_ImageKey) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *InvalidateImageCache_ImageKey) GetImageFullName() string {
	if x != nil {
		return x.ImageFullName
	}
	return ""
}

var File_internalapi_central_sensor_iservice_proto protoreflect.FileDescriptor

var file_internalapi_central_sensor_iservice_proto_rawDesc = []byte{
	0x0a, 0x29, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6c, 0x1a, 0x27, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x30, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6c, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5,
	0x0a, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x19, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x52, 0x61, 0x77,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x50, 0x0a, 0x15, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x12, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x72, 0x0a, 0x21, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x65,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x70,
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x5b, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a,
	0x1f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x1d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xf7, 0x10, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x5b, 0x0a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x55, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x16, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x48, 0x0a, 0x11, 0x72,
	0x65, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
	0x2e, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x75, 0x0a, 0x22, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x75,
	0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x50, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x1d, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x75, 0x73, 0x68, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x12, 0x52, 0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x48, 0x00, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x51, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x75, 0x0a, 0x22, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x54,
	0x0a, 0x15, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x14,
	0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x43, 0x4b, 0x48, 0x00, 0x52, 0x10, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x6b, 0x12,
	0x5e, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x33, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x11,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58,
	0x0a, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x1e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xd5, 0x01, 0x0a,
	0x0c, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
	0x2e, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x43, 0x4b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x43, 0x4b,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x1b, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x22, 0xe4, 0x01, 0x0a,
	0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x6d, 0x0a,
	0x1a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x1b,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf0, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x73, 0x0a, 0x1a, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a,
	0x65, 0x0a, 0x1b, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x45, 0x0a,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x1a, 0x4d, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x50, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x4d, 0x73,
	0x67, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a, 0x14, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x28, 0x01, 0x30, 0x01, 0x42, 0x1f, 0x5a, 0x1d, 0x2e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x3b, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internalapi_central_sensor_iservice_proto_rawDescOnce sync.Once
	file_internalapi_central_sensor_iservice_proto_rawDescData = file_internalapi_central_sensor_iservice_proto_rawDesc
)

func file_internalapi_central_sensor_iservice_proto_rawDescGZIP() []byte {
	file_internalapi_central_sensor_iservice_proto_rawDescOnce.Do(func() {
		file_internalapi_central_sensor_iservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_internalapi_central_sensor_iservice_proto_rawDescData)
	})
	return file_internalapi_central_sensor_iservice_proto_rawDescData
}

var file_internalapi_central_sensor_iservice_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_internalapi_central_sensor_iservice_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_internalapi_central_sensor_iservice_proto_goTypes = []any{
	(NodeInventoryACK_Action)(0),           // 0: central.NodeInventoryACK.Action
	(*MsgFromSensor)(nil),                  // 1: central.MsgFromSensor
	(*ReassessPolicies)(nil),               // 2: central.ReassessPolicies
	(*ReprocessDeployments)(nil),           // 3: central.ReprocessDeployments
	(*MsgToSensor)(nil),                    // 4: central.MsgToSensor
	(*DeduperState)(nil),                   // 5: central.DeduperState
	(*NodeInventoryACK)(nil),               // 6: central.NodeInventoryACK
	(*AuditLogSync)(nil),                   // 7: central.AuditLogSync
	(*AuditLogStatusInfo)(nil),             // 8: central.AuditLogStatusInfo
	(*ReprocessDeployment)(nil),            // 9: central.ReprocessDeployment
	(*InvalidateImageCache)(nil),           // 10: central.InvalidateImageCache
	nil,                                    // 11: central.DeduperState.ResourceHashesEntry
	nil,                                    // 12: central.AuditLogSync.NodeAuditLogFileStatesEntry
	nil,                                    // 13: central.AuditLogStatusInfo.NodeAuditLogFileStatesEntry
	(*InvalidateImageCache_ImageKey)(nil),  // 14: central.InvalidateImageCache.ImageKey
	(*SensorEvent)(nil),                    // 15: central.SensorEvent
	(*NetworkFlowUpdate)(nil),              // 16: central.NetworkFlowUpdate
	(*ScrapeUpdate)(nil),                   // 17: central.ScrapeUpdate
	(*NetworkPoliciesResponse)(nil),        // 18: central.NetworkPoliciesResponse
	(*ClusterStatusUpdate)(nil),            // 19: central.ClusterStatusUpdate
	(*PullTelemetryDataResponse)(nil),      // 20: central.PullTelemetryDataResponse
	(*RawClusterHealthInfo)(nil),           // 21: central.RawClusterHealthInfo
	(*SensorHello)(nil),                    // 22: central.SensorHello
	(*IssueLocalScannerCertsRequest)(nil),  // 23: central.IssueLocalScannerCertsRequest
	(*ClusterMetrics)(nil),                 // 24: central.ClusterMetrics
	(*ProcessListeningOnPortsUpdate)(nil),  // 25: central.ProcessListeningOnPortsUpdate
	(*ComplianceOperatorInfo)(nil),         // 26: central.ComplianceOperatorInfo
	(*ComplianceResponse)(nil),             // 27: central.ComplianceResponse
	(*DeploymentEnhancementResponse)(nil),  // 28: central.DeploymentEnhancementResponse
	(*SensorEnforcement)(nil),              // 29: central.SensorEnforcement
	(*ScrapeCommand)(nil),                  // 30: central.ScrapeCommand
	(*NetworkPoliciesCommand)(nil),         // 31: central.NetworkPoliciesCommand
	(*ClusterConfig)(nil),                  // 32: central.ClusterConfig
	(*SensorUpgradeTrigger)(nil),           // 33: central.SensorUpgradeTrigger
	(*PullTelemetryDataRequest)(nil),       // 34: central.PullTelemetryDataRequest
	(*PolicySync)(nil),                     // 35: central.PolicySync
	(*BaselineSync)(nil),                   // 36: central.BaselineSync
	(*CancelPullTelemetryDataRequest)(nil), // 37: central.CancelPullTelemetryDataRequest
	(*PushNetworkEntitiesRequest)(nil),     // 38: central.PushNetworkEntitiesRequest
	(*CentralHello)(nil),                   // 39: central.CentralHello
	(*NetworkBaselineSync)(nil),            // 40: central.NetworkBaselineSync
	(*IssueLocalScannerCertsResponse)(nil), // 41: central.IssueLocalScannerCertsResponse
	(*storage.Image)(nil),                  // 42: storage.Image
	(*DelegatedRegistryConfig)(nil),        // 43: central.DelegatedRegistryConfig
	(*ScanImage)(nil),                      // 44: central.ScanImage
	(*ImageIntegrations)(nil),              // 45: central.ImageIntegrations
	(*ComplianceRequest)(nil),              // 46: central.ComplianceRequest
	(*ClusterHealthResponse)(nil),          // 47: central.ClusterHealthResponse
	(*DeploymentEnhancementRequest)(nil),   // 48: central.DeploymentEnhancementRequest
	(*storage.AuditLogFileState)(nil),      // 49: storage.AuditLogFileState
}
var file_internalapi_central_sensor_iservice_proto_depIdxs = []int32{
	15, // 0: central.MsgFromSensor.event:type_name -> central.SensorEvent
	16, // 1: central.MsgFromSensor.network_flow_update:type_name -> central.NetworkFlowUpdate
	17, // 2: central.MsgFromSensor.scrape_update:type_name -> central.ScrapeUpdate
	18, // 3: central.MsgFromSensor.network_policies_response:type_name -> central.NetworkPoliciesResponse
	19, // 4: central.MsgFromSensor.cluster_status_update:type_name -> central.ClusterStatusUpdate
	20, // 5: central.MsgFromSensor.telemetry_data_response:type_name -> central.PullTelemetryDataResponse
	21, // 6: central.MsgFromSensor.cluster_health_info:type_name -> central.RawClusterHealthInfo
	22, // 7: central.MsgFromSensor.hello:type_name -> central.SensorHello
	8,  // 8: central.MsgFromSensor.audit_log_status_info:type_name -> central.AuditLogStatusInfo
	23, // 9: central.MsgFromSensor.issue_local_scanner_certs_request:type_name -> central.IssueLocalScannerCertsRequest
	24, // 10: central.MsgFromSensor.cluster_metrics:type_name -> central.ClusterMetrics
	25, // 11: central.MsgFromSensor.process_listening_on_port_update:type_name -> central.ProcessListeningOnPortsUpdate
	26, // 12: central.MsgFromSensor.compliance_operator_info:type_name -> central.ComplianceOperatorInfo
	27, // 13: central.MsgFromSensor.compliance_response:type_name -> central.ComplianceResponse
	28, // 14: central.MsgFromSensor.deployment_enhancement_response:type_name -> central.DeploymentEnhancementResponse
	29, // 15: central.MsgToSensor.enforcement:type_name -> central.SensorEnforcement
	30, // 16: central.MsgToSensor.scrape_command:type_name -> central.ScrapeCommand
	31, // 17: central.MsgToSensor.network_policies_command:type_name -> central.NetworkPoliciesCommand
	32, // 18: central.MsgToSensor.cluster_config:type_name -> central.ClusterConfig
	33, // 19: central.MsgToSensor.sensor_upgrade_trigger:type_name -> central.SensorUpgradeTrigger
	34, // 20: central.MsgToSensor.telemetry_data_request:type_name -> central.PullTelemetryDataRequest
	35, // 21: central.MsgToSensor.policy_sync:type_name -> central.PolicySync
	2,  // 22: central.MsgToSensor.reassess_policies:type_name -> central.ReassessPolicies
	36, // 23: central.MsgToSensor.baseline_sync:type_name -> central.BaselineSync
	37, // 24: central.MsgToSensor.cancel_pull_telemetry_data_request:type_name -> central.CancelPullTelemetryDataRequest
	38, // 25: central.MsgToSensor.push_network_entities_request:type_name -> central.PushNetworkEntitiesRequest
	39, // 26: central.MsgToSensor.hello:type_name -> central.CentralHello
	40, // 27: central.MsgToSensor.network_baseline_sync:type_name -> central.NetworkBaselineSync
	7,  // 28: central.MsgToSensor.audit_log_sync:type_name -> central.AuditLogSync
	9,  // 29: central.MsgToSensor.reprocess_deployment:type_name -> central.ReprocessDeployment
	10, // 30: central.MsgToSensor.invalidate_image_cache:type_name -> central.InvalidateImageCache
	41, // 31: central.MsgToSensor.issue_local_scanner_certs_response:type_name -> central.IssueLocalScannerCertsResponse
	42, // 32: central.MsgToSensor.updated_image:type_name -> storage.Image
	3,  // 33: central.MsgToSensor.reprocess_deployments:type_name -> central.ReprocessDeployments
	6,  // 34: central.MsgToSensor.node_inventory_ack:type_name -> central.NodeInventoryACK
	43, // 35: central.MsgToSensor.delegated_registry_config:type_name -> central.DelegatedRegistryConfig
	44, // 36: central.MsgToSensor.scan_image:type_name -> central.ScanImage
	45, // 37: central.MsgToSensor.image_integrations:type_name -> central.ImageIntegrations
	46, // 38: central.MsgToSensor.compliance_request:type_name -> central.ComplianceRequest
	47, // 39: central.MsgToSensor.cluster_health_response:type_name -> central.ClusterHealthResponse
	5,  // 40: central.MsgToSensor.deduper_state:type_name -> central.DeduperState
	48, // 41: central.MsgToSensor.deployment_enhancement_request:type_name -> central.DeploymentEnhancementRequest
	11, // 42: central.DeduperState.resource_hashes:type_name -> central.DeduperState.ResourceHashesEntry
	0,  // 43: central.NodeInventoryACK.action:type_name -> central.NodeInventoryACK.Action
	12, // 44: central.AuditLogSync.node_audit_log_file_states:type_name -> central.AuditLogSync.NodeAuditLogFileStatesEntry
	13, // 45: central.AuditLogStatusInfo.node_audit_log_file_states:type_name -> central.AuditLogStatusInfo.NodeAuditLogFileStatesEntry
	14, // 46: central.InvalidateImageCache.image_keys:type_name -> central.InvalidateImageCache.ImageKey
	49, // 47: central.AuditLogSync.NodeAuditLogFileStatesEntry.value:type_name -> storage.AuditLogFileState
	49, // 48: central.AuditLogStatusInfo.NodeAuditLogFileStatesEntry.value:type_name -> storage.AuditLogFileState
	1,  // 49: central.SensorService.Communicate:input_type -> central.MsgFromSensor
	4,  // 50: central.SensorService.Communicate:output_type -> central.MsgToSensor
	50, // [50:51] is the sub-list for method output_type
	49, // [49:50] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_internalapi_central_sensor_iservice_proto_init() }
func file_internalapi_central_sensor_iservice_proto_init() {
	if File_internalapi_central_sensor_iservice_proto != nil {
		return
	}
	file_internalapi_central_baseline_sync_proto_init()
	file_internalapi_central_cluster_config_proto_init()
	file_internalapi_central_cluster_metrics_proto_init()
	file_internalapi_central_cluster_status_proto_init()
	file_internalapi_central_compliance_operator_proto_init()
	file_internalapi_central_delegated_registry_config_proto_init()
	file_internalapi_central_deployment_enhancement_proto_init()
	file_internalapi_central_hello_proto_init()
	file_internalapi_central_image_proto_init()
	file_internalapi_central_local_scanner_proto_init()
	file_internalapi_central_network_baseline_sync_proto_init()
	file_internalapi_central_network_flow_proto_init()
	file_internalapi_central_policy_sync_proto_init()
	file_internalapi_central_process_listening_on_ports_update_proto_init()
	file_internalapi_central_sensor_events_proto_init()
	file_internalapi_central_sensor_upgrade_proto_init()
	file_internalapi_central_telemetry_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_internalapi_central_sensor_iservice_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MsgFromSensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_iservice_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ReassessPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_iservice_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ReprocessDeployments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_iservice_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MsgToSensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_iservice_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeduperState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_iservice_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*NodeInventoryACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_iservice_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AuditLogSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_iservice_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AuditLogStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_iservice_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ReprocessDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_iservice_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*InvalidateImageCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_iservice_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*InvalidateImageCache_ImageKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internalapi_central_sensor_iservice_proto_msgTypes[0].OneofWrappers = []any{
		(*MsgFromSensor_Event)(nil),
		(*MsgFromSensor_NetworkFlowUpdate)(nil),
		(*MsgFromSensor_ScrapeUpdate)(nil),
		(*MsgFromSensor_NetworkPoliciesResponse)(nil),
		(*MsgFromSensor_ClusterStatusUpdate)(nil),
		(*MsgFromSensor_TelemetryDataResponse)(nil),
		(*MsgFromSensor_ClusterHealthInfo)(nil),
		(*MsgFromSensor_Hello)(nil),
		(*MsgFromSensor_AuditLogStatusInfo)(nil),
		(*MsgFromSensor_IssueLocalScannerCertsRequest)(nil),
		(*MsgFromSensor_ClusterMetrics)(nil),
		(*MsgFromSensor_ProcessListeningOnPortUpdate)(nil),
		(*MsgFromSensor_ComplianceOperatorInfo)(nil),
		(*MsgFromSensor_ComplianceResponse)(nil),
		(*MsgFromSensor_DeploymentEnhancementResponse)(nil),
	}
	file_internalapi_central_sensor_iservice_proto_msgTypes[3].OneofWrappers = []any{
		(*MsgToSensor_Enforcement)(nil),
		(*MsgToSensor_ScrapeCommand)(nil),
		(*MsgToSensor_NetworkPoliciesCommand)(nil),
		(*MsgToSensor_ClusterConfig)(nil),
		(*MsgToSensor_SensorUpgradeTrigger)(nil),
		(*MsgToSensor_TelemetryDataRequest)(nil),
		(*MsgToSensor_PolicySync)(nil),
		(*MsgToSensor_ReassessPolicies)(nil),
		(*MsgToSensor_BaselineSync)(nil),
		(*MsgToSensor_CancelPullTelemetryDataRequest)(nil),
		(*MsgToSensor_PushNetworkEntitiesRequest)(nil),
		(*MsgToSensor_Hello)(nil),
		(*MsgToSensor_NetworkBaselineSync)(nil),
		(*MsgToSensor_AuditLogSync)(nil),
		(*MsgToSensor_ReprocessDeployment)(nil),
		(*MsgToSensor_InvalidateImageCache)(nil),
		(*MsgToSensor_IssueLocalScannerCertsResponse)(nil),
		(*MsgToSensor_UpdatedImage)(nil),
		(*MsgToSensor_ReprocessDeployments)(nil),
		(*MsgToSensor_NodeInventoryAck)(nil),
		(*MsgToSensor_DelegatedRegistryConfig)(nil),
		(*MsgToSensor_ScanImage)(nil),
		(*MsgToSensor_ImageIntegrations)(nil),
		(*MsgToSensor_ComplianceRequest)(nil),
		(*MsgToSensor_ClusterHealthResponse)(nil),
		(*MsgToSensor_DeduperState)(nil),
		(*MsgToSensor_DeploymentEnhancementRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internalapi_central_sensor_iservice_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internalapi_central_sensor_iservice_proto_goTypes,
		DependencyIndexes: file_internalapi_central_sensor_iservice_proto_depIdxs,
		EnumInfos:         file_internalapi_central_sensor_iservice_proto_enumTypes,
		MessageInfos:      file_internalapi_central_sensor_iservice_proto_msgTypes,
	}.Build()
	File_internalapi_central_sensor_iservice_proto = out.File
	file_internalapi_central_sensor_iservice_proto_rawDesc = nil
	file_internalapi_central_sensor_iservice_proto_goTypes = nil
	file_internalapi_central_sensor_iservice_proto_depIdxs = nil
}
