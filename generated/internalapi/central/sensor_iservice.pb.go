// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: internalapi/central/sensor_iservice.proto

package central

import (
	storage "github.com/stackrox/rox/generated/storage"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeInventoryACK_Action int32

const (
	NodeInventoryACK_ACK  NodeInventoryACK_Action = 0
	NodeInventoryACK_NACK NodeInventoryACK_Action = 1
)

// Enum value maps for NodeInventoryACK_Action.
var (
	NodeInventoryACK_Action_name = map[int32]string{
		0: "ACK",
		1: "NACK",
	}
	NodeInventoryACK_Action_value = map[string]int32{
		"ACK":  0,
		"NACK": 1,
	}
)

func (x NodeInventoryACK_Action) Enum() *NodeInventoryACK_Action {
	p := new(NodeInventoryACK_Action)
	*p = x
	return p
}

func (x NodeInventoryACK_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeInventoryACK_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_internalapi_central_sensor_iservice_proto_enumTypes[0].Descriptor()
}

func (NodeInventoryACK_Action) Type() protoreflect.EnumType {
	return &file_internalapi_central_sensor_iservice_proto_enumTypes[0]
}

func (x NodeInventoryACK_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeInventoryACK_Action.Descriptor instead.
func (NodeInventoryACK_Action) EnumDescriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{4, 0}
}

type NodeInventoryACK_MessageType int32

const (
	NodeInventoryACK_NodeInventory NodeInventoryACK_MessageType = 0
	NodeInventoryACK_NodeIndexer   NodeInventoryACK_MessageType = 1
)

// Enum value maps for NodeInventoryACK_MessageType.
var (
	NodeInventoryACK_MessageType_name = map[int32]string{
		0: "NodeInventory",
		1: "NodeIndexer",
	}
	NodeInventoryACK_MessageType_value = map[string]int32{
		"NodeInventory": 0,
		"NodeIndexer":   1,
	}
)

func (x NodeInventoryACK_MessageType) Enum() *NodeInventoryACK_MessageType {
	p := new(NodeInventoryACK_MessageType)
	*p = x
	return p
}

func (x NodeInventoryACK_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeInventoryACK_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_internalapi_central_sensor_iservice_proto_enumTypes[1].Descriptor()
}

func (NodeInventoryACK_MessageType) Type() protoreflect.EnumType {
	return &file_internalapi_central_sensor_iservice_proto_enumTypes[1]
}

func (x NodeInventoryACK_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeInventoryACK_MessageType.Descriptor instead.
func (NodeInventoryACK_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{4, 1}
}

// next available tag: 20
type MsgFromSensor struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	HashKey           string                 `protobuf:"bytes,7,opt,name=hash_key,json=hashKey,proto3" json:"hash_key,omitempty"`
	DedupeKey         string                 `protobuf:"bytes,8,opt,name=dedupe_key,json=dedupeKey,proto3" json:"dedupe_key,omitempty"`
	ProcessingAttempt int32                  `protobuf:"varint,15,opt,name=processing_attempt,json=processingAttempt,proto3" json:"processing_attempt,omitempty"`
	// Types that are valid to be assigned to Msg:
	//
	//	*MsgFromSensor_Event
	//	*MsgFromSensor_NetworkFlowUpdate
	//	*MsgFromSensor_ScrapeUpdate
	//	*MsgFromSensor_NetworkPoliciesResponse
	//	*MsgFromSensor_ClusterStatusUpdate
	//	*MsgFromSensor_TelemetryDataResponse
	//	*MsgFromSensor_ClusterHealthInfo
	//	*MsgFromSensor_Hello
	//	*MsgFromSensor_AuditLogStatusInfo
	//	*MsgFromSensor_IssueLocalScannerCertsRequest
	//	*MsgFromSensor_ClusterMetrics
	//	*MsgFromSensor_ProcessListeningOnPortUpdate
	//	*MsgFromSensor_ComplianceOperatorInfo
	//	*MsgFromSensor_ComplianceResponse
	//	*MsgFromSensor_DeploymentEnhancementResponse
	//	*MsgFromSensor_IssueSecuredClusterCertsRequest
	Msg           isMsgFromSensor_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MsgFromSensor) Reset() {
	*x = MsgFromSensor{}
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgFromSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFromSensor) ProtoMessage() {}

func (x *MsgFromSensor) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFromSensor.ProtoReflect.Descriptor instead.
func (*MsgFromSensor) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{0}
}

func (x *MsgFromSensor) GetHashKey() string {
	if x != nil {
		return x.HashKey
	}
	return ""
}

func (x *MsgFromSensor) GetDedupeKey() string {
	if x != nil {
		return x.DedupeKey
	}
	return ""
}

func (x *MsgFromSensor) GetProcessingAttempt() int32 {
	if x != nil {
		return x.ProcessingAttempt
	}
	return 0
}

func (x *MsgFromSensor) GetMsg() isMsgFromSensor_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *MsgFromSensor) GetEvent() *SensorEvent {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_Event); ok {
			return x.Event
		}
	}
	return nil
}

func (x *MsgFromSensor) GetNetworkFlowUpdate() *NetworkFlowUpdate {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_NetworkFlowUpdate); ok {
			return x.NetworkFlowUpdate
		}
	}
	return nil
}

func (x *MsgFromSensor) GetScrapeUpdate() *ScrapeUpdate {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_ScrapeUpdate); ok {
			return x.ScrapeUpdate
		}
	}
	return nil
}

func (x *MsgFromSensor) GetNetworkPoliciesResponse() *NetworkPoliciesResponse {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_NetworkPoliciesResponse); ok {
			return x.NetworkPoliciesResponse
		}
	}
	return nil
}

func (x *MsgFromSensor) GetClusterStatusUpdate() *ClusterStatusUpdate {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_ClusterStatusUpdate); ok {
			return x.ClusterStatusUpdate
		}
	}
	return nil
}

func (x *MsgFromSensor) GetTelemetryDataResponse() *PullTelemetryDataResponse {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_TelemetryDataResponse); ok {
			return x.TelemetryDataResponse
		}
	}
	return nil
}

func (x *MsgFromSensor) GetClusterHealthInfo() *RawClusterHealthInfo {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_ClusterHealthInfo); ok {
			return x.ClusterHealthInfo
		}
	}
	return nil
}

func (x *MsgFromSensor) GetHello() *SensorHello {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_Hello); ok {
			return x.Hello
		}
	}
	return nil
}

func (x *MsgFromSensor) GetAuditLogStatusInfo() *AuditLogStatusInfo {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_AuditLogStatusInfo); ok {
			return x.AuditLogStatusInfo
		}
	}
	return nil
}

func (x *MsgFromSensor) GetIssueLocalScannerCertsRequest() *IssueLocalScannerCertsRequest {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_IssueLocalScannerCertsRequest); ok {
			return x.IssueLocalScannerCertsRequest
		}
	}
	return nil
}

func (x *MsgFromSensor) GetClusterMetrics() *ClusterMetrics {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_ClusterMetrics); ok {
			return x.ClusterMetrics
		}
	}
	return nil
}

func (x *MsgFromSensor) GetProcessListeningOnPortUpdate() *ProcessListeningOnPortsUpdate {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_ProcessListeningOnPortUpdate); ok {
			return x.ProcessListeningOnPortUpdate
		}
	}
	return nil
}

func (x *MsgFromSensor) GetComplianceOperatorInfo() *ComplianceOperatorInfo {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_ComplianceOperatorInfo); ok {
			return x.ComplianceOperatorInfo
		}
	}
	return nil
}

func (x *MsgFromSensor) GetComplianceResponse() *ComplianceResponse {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_ComplianceResponse); ok {
			return x.ComplianceResponse
		}
	}
	return nil
}

func (x *MsgFromSensor) GetDeploymentEnhancementResponse() *DeploymentEnhancementResponse {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_DeploymentEnhancementResponse); ok {
			return x.DeploymentEnhancementResponse
		}
	}
	return nil
}

func (x *MsgFromSensor) GetIssueSecuredClusterCertsRequest() *IssueSecuredClusterCertsRequest {
	if x != nil {
		if x, ok := x.Msg.(*MsgFromSensor_IssueSecuredClusterCertsRequest); ok {
			return x.IssueSecuredClusterCertsRequest
		}
	}
	return nil
}

type isMsgFromSensor_Msg interface {
	isMsgFromSensor_Msg()
}

type MsgFromSensor_Event struct {
	Event *SensorEvent `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

type MsgFromSensor_NetworkFlowUpdate struct {
	NetworkFlowUpdate *NetworkFlowUpdate `protobuf:"bytes,2,opt,name=network_flow_update,json=networkFlowUpdate,proto3,oneof"`
}

type MsgFromSensor_ScrapeUpdate struct {
	ScrapeUpdate *ScrapeUpdate `protobuf:"bytes,3,opt,name=scrape_update,json=scrapeUpdate,proto3,oneof"`
}

type MsgFromSensor_NetworkPoliciesResponse struct {
	NetworkPoliciesResponse *NetworkPoliciesResponse `protobuf:"bytes,4,opt,name=network_policies_response,json=networkPoliciesResponse,proto3,oneof"`
}

type MsgFromSensor_ClusterStatusUpdate struct {
	ClusterStatusUpdate *ClusterStatusUpdate `protobuf:"bytes,5,opt,name=cluster_status_update,json=clusterStatusUpdate,proto3,oneof"`
}

type MsgFromSensor_TelemetryDataResponse struct {
	TelemetryDataResponse *PullTelemetryDataResponse `protobuf:"bytes,6,opt,name=telemetry_data_response,json=telemetryDataResponse,proto3,oneof"`
}

type MsgFromSensor_ClusterHealthInfo struct {
	ClusterHealthInfo *RawClusterHealthInfo `protobuf:"bytes,9,opt,name=cluster_health_info,json=clusterHealthInfo,proto3,oneof"`
}

type MsgFromSensor_Hello struct {
	Hello *SensorHello `protobuf:"bytes,10,opt,name=hello,proto3,oneof"`
}

type MsgFromSensor_AuditLogStatusInfo struct {
	AuditLogStatusInfo *AuditLogStatusInfo `protobuf:"bytes,11,opt,name=audit_log_status_info,json=auditLogStatusInfo,proto3,oneof"`
}

type MsgFromSensor_IssueLocalScannerCertsRequest struct {
	IssueLocalScannerCertsRequest *IssueLocalScannerCertsRequest `protobuf:"bytes,12,opt,name=issue_local_scanner_certs_request,json=issueLocalScannerCertsRequest,proto3,oneof"`
}

type MsgFromSensor_ClusterMetrics struct {
	ClusterMetrics *ClusterMetrics `protobuf:"bytes,13,opt,name=cluster_metrics,json=clusterMetrics,proto3,oneof"`
}

type MsgFromSensor_ProcessListeningOnPortUpdate struct {
	ProcessListeningOnPortUpdate *ProcessListeningOnPortsUpdate `protobuf:"bytes,14,opt,name=process_listening_on_port_update,json=processListeningOnPortUpdate,proto3,oneof"`
}

type MsgFromSensor_ComplianceOperatorInfo struct {
	ComplianceOperatorInfo *ComplianceOperatorInfo `protobuf:"bytes,16,opt,name=compliance_operator_info,json=complianceOperatorInfo,proto3,oneof"`
}

type MsgFromSensor_ComplianceResponse struct {
	ComplianceResponse *ComplianceResponse `protobuf:"bytes,17,opt,name=compliance_response,json=complianceResponse,proto3,oneof"`
}

type MsgFromSensor_DeploymentEnhancementResponse struct {
	DeploymentEnhancementResponse *DeploymentEnhancementResponse `protobuf:"bytes,18,opt,name=deployment_enhancement_response,json=deploymentEnhancementResponse,proto3,oneof"`
}

type MsgFromSensor_IssueSecuredClusterCertsRequest struct {
	IssueSecuredClusterCertsRequest *IssueSecuredClusterCertsRequest `protobuf:"bytes,19,opt,name=issue_secured_cluster_certs_request,json=issueSecuredClusterCertsRequest,proto3,oneof"`
}

func (*MsgFromSensor_Event) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_NetworkFlowUpdate) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ScrapeUpdate) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_NetworkPoliciesResponse) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ClusterStatusUpdate) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_TelemetryDataResponse) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ClusterHealthInfo) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_Hello) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_AuditLogStatusInfo) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_IssueLocalScannerCertsRequest) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ClusterMetrics) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ProcessListeningOnPortUpdate) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ComplianceOperatorInfo) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_ComplianceResponse) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_DeploymentEnhancementResponse) isMsgFromSensor_Msg() {}

func (*MsgFromSensor_IssueSecuredClusterCertsRequest) isMsgFromSensor_Msg() {}

type ReprocessDeployments struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReprocessDeployments) Reset() {
	*x = ReprocessDeployments{}
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReprocessDeployments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReprocessDeployments) ProtoMessage() {}

func (x *ReprocessDeployments) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReprocessDeployments.ProtoReflect.Descriptor instead.
func (*ReprocessDeployments) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{1}
}

// next available tag: 29
type MsgToSensor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Msg:
	//
	//	*MsgToSensor_Enforcement
	//	*MsgToSensor_ScrapeCommand
	//	*MsgToSensor_NetworkPoliciesCommand
	//	*MsgToSensor_ClusterConfig
	//	*MsgToSensor_SensorUpgradeTrigger
	//	*MsgToSensor_TelemetryDataRequest
	//	*MsgToSensor_PolicySync
	//	*MsgToSensor_BaselineSync
	//	*MsgToSensor_CancelPullTelemetryDataRequest
	//	*MsgToSensor_PushNetworkEntitiesRequest
	//	*MsgToSensor_Hello
	//	*MsgToSensor_NetworkBaselineSync
	//	*MsgToSensor_AuditLogSync
	//	*MsgToSensor_ReprocessDeployment
	//	*MsgToSensor_InvalidateImageCache
	//	*MsgToSensor_IssueLocalScannerCertsResponse
	//	*MsgToSensor_UpdatedImage
	//	*MsgToSensor_ReprocessDeployments
	//	*MsgToSensor_NodeInventoryAck
	//	*MsgToSensor_DelegatedRegistryConfig
	//	*MsgToSensor_ScanImage
	//	*MsgToSensor_ImageIntegrations
	//	*MsgToSensor_ComplianceRequest
	//	*MsgToSensor_ClusterHealthResponse
	//	*MsgToSensor_DeduperState
	//	*MsgToSensor_DeploymentEnhancementRequest
	//	*MsgToSensor_IssueSecuredClusterCertsResponse
	Msg           isMsgToSensor_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MsgToSensor) Reset() {
	*x = MsgToSensor{}
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgToSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgToSensor) ProtoMessage() {}

func (x *MsgToSensor) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgToSensor.ProtoReflect.Descriptor instead.
func (*MsgToSensor) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{2}
}

func (x *MsgToSensor) GetMsg() isMsgToSensor_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *MsgToSensor) GetEnforcement() *SensorEnforcement {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_Enforcement); ok {
			return x.Enforcement
		}
	}
	return nil
}

func (x *MsgToSensor) GetScrapeCommand() *ScrapeCommand {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_ScrapeCommand); ok {
			return x.ScrapeCommand
		}
	}
	return nil
}

func (x *MsgToSensor) GetNetworkPoliciesCommand() *NetworkPoliciesCommand {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_NetworkPoliciesCommand); ok {
			return x.NetworkPoliciesCommand
		}
	}
	return nil
}

func (x *MsgToSensor) GetClusterConfig() *ClusterConfig {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_ClusterConfig); ok {
			return x.ClusterConfig
		}
	}
	return nil
}

func (x *MsgToSensor) GetSensorUpgradeTrigger() *SensorUpgradeTrigger {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_SensorUpgradeTrigger); ok {
			return x.SensorUpgradeTrigger
		}
	}
	return nil
}

func (x *MsgToSensor) GetTelemetryDataRequest() *PullTelemetryDataRequest {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_TelemetryDataRequest); ok {
			return x.TelemetryDataRequest
		}
	}
	return nil
}

func (x *MsgToSensor) GetPolicySync() *PolicySync {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_PolicySync); ok {
			return x.PolicySync
		}
	}
	return nil
}

func (x *MsgToSensor) GetBaselineSync() *BaselineSync {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_BaselineSync); ok {
			return x.BaselineSync
		}
	}
	return nil
}

func (x *MsgToSensor) GetCancelPullTelemetryDataRequest() *CancelPullTelemetryDataRequest {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_CancelPullTelemetryDataRequest); ok {
			return x.CancelPullTelemetryDataRequest
		}
	}
	return nil
}

func (x *MsgToSensor) GetPushNetworkEntitiesRequest() *PushNetworkEntitiesRequest {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_PushNetworkEntitiesRequest); ok {
			return x.PushNetworkEntitiesRequest
		}
	}
	return nil
}

func (x *MsgToSensor) GetHello() *CentralHello {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_Hello); ok {
			return x.Hello
		}
	}
	return nil
}

func (x *MsgToSensor) GetNetworkBaselineSync() *NetworkBaselineSync {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_NetworkBaselineSync); ok {
			return x.NetworkBaselineSync
		}
	}
	return nil
}

func (x *MsgToSensor) GetAuditLogSync() *AuditLogSync {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_AuditLogSync); ok {
			return x.AuditLogSync
		}
	}
	return nil
}

func (x *MsgToSensor) GetReprocessDeployment() *ReprocessDeployment {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_ReprocessDeployment); ok {
			return x.ReprocessDeployment
		}
	}
	return nil
}

func (x *MsgToSensor) GetInvalidateImageCache() *InvalidateImageCache {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_InvalidateImageCache); ok {
			return x.InvalidateImageCache
		}
	}
	return nil
}

func (x *MsgToSensor) GetIssueLocalScannerCertsResponse() *IssueLocalScannerCertsResponse {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_IssueLocalScannerCertsResponse); ok {
			return x.IssueLocalScannerCertsResponse
		}
	}
	return nil
}

func (x *MsgToSensor) GetUpdatedImage() *storage.Image {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_UpdatedImage); ok {
			return x.UpdatedImage
		}
	}
	return nil
}

func (x *MsgToSensor) GetReprocessDeployments() *ReprocessDeployments {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_ReprocessDeployments); ok {
			return x.ReprocessDeployments
		}
	}
	return nil
}

func (x *MsgToSensor) GetNodeInventoryAck() *NodeInventoryACK {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_NodeInventoryAck); ok {
			return x.NodeInventoryAck
		}
	}
	return nil
}

func (x *MsgToSensor) GetDelegatedRegistryConfig() *DelegatedRegistryConfig {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_DelegatedRegistryConfig); ok {
			return x.DelegatedRegistryConfig
		}
	}
	return nil
}

func (x *MsgToSensor) GetScanImage() *ScanImage {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_ScanImage); ok {
			return x.ScanImage
		}
	}
	return nil
}

func (x *MsgToSensor) GetImageIntegrations() *ImageIntegrations {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_ImageIntegrations); ok {
			return x.ImageIntegrations
		}
	}
	return nil
}

func (x *MsgToSensor) GetComplianceRequest() *ComplianceRequest {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_ComplianceRequest); ok {
			return x.ComplianceRequest
		}
	}
	return nil
}

func (x *MsgToSensor) GetClusterHealthResponse() *ClusterHealthResponse {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_ClusterHealthResponse); ok {
			return x.ClusterHealthResponse
		}
	}
	return nil
}

func (x *MsgToSensor) GetDeduperState() *DeduperState {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_DeduperState); ok {
			return x.DeduperState
		}
	}
	return nil
}

func (x *MsgToSensor) GetDeploymentEnhancementRequest() *DeploymentEnhancementRequest {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_DeploymentEnhancementRequest); ok {
			return x.DeploymentEnhancementRequest
		}
	}
	return nil
}

func (x *MsgToSensor) GetIssueSecuredClusterCertsResponse() *IssueSecuredClusterCertsResponse {
	if x != nil {
		if x, ok := x.Msg.(*MsgToSensor_IssueSecuredClusterCertsResponse); ok {
			return x.IssueSecuredClusterCertsResponse
		}
	}
	return nil
}

type isMsgToSensor_Msg interface {
	isMsgToSensor_Msg()
}

type MsgToSensor_Enforcement struct {
	Enforcement *SensorEnforcement `protobuf:"bytes,1,opt,name=enforcement,proto3,oneof"`
}

type MsgToSensor_ScrapeCommand struct {
	ScrapeCommand *ScrapeCommand `protobuf:"bytes,2,opt,name=scrape_command,json=scrapeCommand,proto3,oneof"`
}

type MsgToSensor_NetworkPoliciesCommand struct {
	NetworkPoliciesCommand *NetworkPoliciesCommand `protobuf:"bytes,3,opt,name=network_policies_command,json=networkPoliciesCommand,proto3,oneof"`
}

type MsgToSensor_ClusterConfig struct {
	ClusterConfig *ClusterConfig `protobuf:"bytes,4,opt,name=cluster_config,json=clusterConfig,proto3,oneof"`
}

type MsgToSensor_SensorUpgradeTrigger struct {
	SensorUpgradeTrigger *SensorUpgradeTrigger `protobuf:"bytes,5,opt,name=sensor_upgrade_trigger,json=sensorUpgradeTrigger,proto3,oneof"`
}

type MsgToSensor_TelemetryDataRequest struct {
	TelemetryDataRequest *PullTelemetryDataRequest `protobuf:"bytes,6,opt,name=telemetry_data_request,json=telemetryDataRequest,proto3,oneof"`
}

type MsgToSensor_PolicySync struct {
	PolicySync *PolicySync `protobuf:"bytes,7,opt,name=policy_sync,json=policySync,proto3,oneof"`
}

type MsgToSensor_BaselineSync struct {
	// 8 was ReassessPolicies
	BaselineSync *BaselineSync `protobuf:"bytes,9,opt,name=baseline_sync,json=baselineSync,proto3,oneof"`
}

type MsgToSensor_CancelPullTelemetryDataRequest struct {
	CancelPullTelemetryDataRequest *CancelPullTelemetryDataRequest `protobuf:"bytes,10,opt,name=cancel_pull_telemetry_data_request,json=cancelPullTelemetryDataRequest,proto3,oneof"`
}

type MsgToSensor_PushNetworkEntitiesRequest struct {
	PushNetworkEntitiesRequest *PushNetworkEntitiesRequest `protobuf:"bytes,11,opt,name=push_network_entities_request,json=pushNetworkEntitiesRequest,proto3,oneof"`
}

type MsgToSensor_Hello struct {
	Hello *CentralHello `protobuf:"bytes,12,opt,name=hello,proto3,oneof"`
}

type MsgToSensor_NetworkBaselineSync struct {
	NetworkBaselineSync *NetworkBaselineSync `protobuf:"bytes,13,opt,name=network_baseline_sync,json=networkBaselineSync,proto3,oneof"`
}

type MsgToSensor_AuditLogSync struct {
	AuditLogSync *AuditLogSync `protobuf:"bytes,14,opt,name=audit_log_sync,json=auditLogSync,proto3,oneof"`
}

type MsgToSensor_ReprocessDeployment struct {
	ReprocessDeployment *ReprocessDeployment `protobuf:"bytes,15,opt,name=reprocess_deployment,json=reprocessDeployment,proto3,oneof"`
}

type MsgToSensor_InvalidateImageCache struct {
	InvalidateImageCache *InvalidateImageCache `protobuf:"bytes,16,opt,name=invalidate_image_cache,json=invalidateImageCache,proto3,oneof"`
}

type MsgToSensor_IssueLocalScannerCertsResponse struct {
	IssueLocalScannerCertsResponse *IssueLocalScannerCertsResponse `protobuf:"bytes,17,opt,name=issue_local_scanner_certs_response,json=issueLocalScannerCertsResponse,proto3,oneof"`
}

type MsgToSensor_UpdatedImage struct {
	UpdatedImage *storage.Image `protobuf:"bytes,18,opt,name=updated_image,json=updatedImage,proto3,oneof"`
}

type MsgToSensor_ReprocessDeployments struct {
	ReprocessDeployments *ReprocessDeployments `protobuf:"bytes,19,opt,name=reprocess_deployments,json=reprocessDeployments,proto3,oneof"`
}

type MsgToSensor_NodeInventoryAck struct {
	NodeInventoryAck *NodeInventoryACK `protobuf:"bytes,20,opt,name=node_inventory_ack,json=nodeInventoryAck,proto3,oneof"`
}

type MsgToSensor_DelegatedRegistryConfig struct {
	DelegatedRegistryConfig *DelegatedRegistryConfig `protobuf:"bytes,21,opt,name=delegated_registry_config,json=delegatedRegistryConfig,proto3,oneof"`
}

type MsgToSensor_ScanImage struct {
	ScanImage *ScanImage `protobuf:"bytes,22,opt,name=scan_image,json=scanImage,proto3,oneof"`
}

type MsgToSensor_ImageIntegrations struct {
	ImageIntegrations *ImageIntegrations `protobuf:"bytes,23,opt,name=image_integrations,json=imageIntegrations,proto3,oneof"`
}

type MsgToSensor_ComplianceRequest struct {
	ComplianceRequest *ComplianceRequest `protobuf:"bytes,24,opt,name=compliance_request,json=complianceRequest,proto3,oneof"`
}

type MsgToSensor_ClusterHealthResponse struct {
	ClusterHealthResponse *ClusterHealthResponse `protobuf:"bytes,25,opt,name=cluster_health_response,json=clusterHealthResponse,proto3,oneof"`
}

type MsgToSensor_DeduperState struct {
	DeduperState *DeduperState `protobuf:"bytes,26,opt,name=deduper_state,json=deduperState,proto3,oneof"`
}

type MsgToSensor_DeploymentEnhancementRequest struct {
	DeploymentEnhancementRequest *DeploymentEnhancementRequest `protobuf:"bytes,27,opt,name=deployment_enhancement_request,json=deploymentEnhancementRequest,proto3,oneof"`
}

type MsgToSensor_IssueSecuredClusterCertsResponse struct {
	IssueSecuredClusterCertsResponse *IssueSecuredClusterCertsResponse `protobuf:"bytes,28,opt,name=issue_secured_cluster_certs_response,json=issueSecuredClusterCertsResponse,proto3,oneof"`
}

func (*MsgToSensor_Enforcement) isMsgToSensor_Msg() {}

func (*MsgToSensor_ScrapeCommand) isMsgToSensor_Msg() {}

func (*MsgToSensor_NetworkPoliciesCommand) isMsgToSensor_Msg() {}

func (*MsgToSensor_ClusterConfig) isMsgToSensor_Msg() {}

func (*MsgToSensor_SensorUpgradeTrigger) isMsgToSensor_Msg() {}

func (*MsgToSensor_TelemetryDataRequest) isMsgToSensor_Msg() {}

func (*MsgToSensor_PolicySync) isMsgToSensor_Msg() {}

func (*MsgToSensor_BaselineSync) isMsgToSensor_Msg() {}

func (*MsgToSensor_CancelPullTelemetryDataRequest) isMsgToSensor_Msg() {}

func (*MsgToSensor_PushNetworkEntitiesRequest) isMsgToSensor_Msg() {}

func (*MsgToSensor_Hello) isMsgToSensor_Msg() {}

func (*MsgToSensor_NetworkBaselineSync) isMsgToSensor_Msg() {}

func (*MsgToSensor_AuditLogSync) isMsgToSensor_Msg() {}

func (*MsgToSensor_ReprocessDeployment) isMsgToSensor_Msg() {}

func (*MsgToSensor_InvalidateImageCache) isMsgToSensor_Msg() {}

func (*MsgToSensor_IssueLocalScannerCertsResponse) isMsgToSensor_Msg() {}

func (*MsgToSensor_UpdatedImage) isMsgToSensor_Msg() {}

func (*MsgToSensor_ReprocessDeployments) isMsgToSensor_Msg() {}

func (*MsgToSensor_NodeInventoryAck) isMsgToSensor_Msg() {}

func (*MsgToSensor_DelegatedRegistryConfig) isMsgToSensor_Msg() {}

func (*MsgToSensor_ScanImage) isMsgToSensor_Msg() {}

func (*MsgToSensor_ImageIntegrations) isMsgToSensor_Msg() {}

func (*MsgToSensor_ComplianceRequest) isMsgToSensor_Msg() {}

func (*MsgToSensor_ClusterHealthResponse) isMsgToSensor_Msg() {}

func (*MsgToSensor_DeduperState) isMsgToSensor_Msg() {}

func (*MsgToSensor_DeploymentEnhancementRequest) isMsgToSensor_Msg() {}

func (*MsgToSensor_IssueSecuredClusterCertsResponse) isMsgToSensor_Msg() {}

type DeduperState struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResourceHashes map[string]uint64      `protobuf:"bytes,1,rep,name=resource_hashes,json=resourceHashes,proto3" json:"resource_hashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Current        int32                  `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	Total          int32                  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeduperState) Reset() {
	*x = DeduperState{}
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeduperState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeduperState) ProtoMessage() {}

func (x *DeduperState) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeduperState.ProtoReflect.Descriptor instead.
func (*DeduperState) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{3}
}

func (x *DeduperState) GetResourceHashes() map[string]uint64 {
	if x != nil {
		return x.ResourceHashes
	}
	return nil
}

func (x *DeduperState) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *DeduperState) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type NodeInventoryACK struct {
	state     protoimpl.MessageState  `protogen:"open.v1"`
	ClusterId string                  `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	NodeName  string                  `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Action    NodeInventoryACK_Action `protobuf:"varint,3,opt,name=action,proto3,enum=central.NodeInventoryACK_Action" json:"action,omitempty"`
	// MessageType determines the type of message being acknowledged.
	// It is a generic way of determining to which component this message is directed to.
	// In version 4.6 and earlier, the messageType field was missing, because there was only one type and it
	// was the node-inventory.
	MessageType   NodeInventoryACK_MessageType `protobuf:"varint,4,opt,name=messageType,proto3,enum=central.NodeInventoryACK_MessageType" json:"messageType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeInventoryACK) Reset() {
	*x = NodeInventoryACK{}
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeInventoryACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInventoryACK) ProtoMessage() {}

func (x *NodeInventoryACK) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInventoryACK.ProtoReflect.Descriptor instead.
func (*NodeInventoryACK) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{4}
}

func (x *NodeInventoryACK) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *NodeInventoryACK) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeInventoryACK) GetAction() NodeInventoryACK_Action {
	if x != nil {
		return x.Action
	}
	return NodeInventoryACK_ACK
}

func (x *NodeInventoryACK) GetMessageType() NodeInventoryACK_MessageType {
	if x != nil {
		return x.MessageType
	}
	return NodeInventoryACK_NodeInventory
}

type AuditLogSync struct {
	state                  protoimpl.MessageState                `protogen:"open.v1"`
	NodeAuditLogFileStates map[string]*storage.AuditLogFileState `protobuf:"bytes,1,rep,name=node_audit_log_file_states,json=nodeAuditLogFileStates,proto3" json:"node_audit_log_file_states,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AuditLogSync) Reset() {
	*x = AuditLogSync{}
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLogSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogSync) ProtoMessage() {}

func (x *AuditLogSync) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogSync.ProtoReflect.Descriptor instead.
func (*AuditLogSync) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{5}
}

func (x *AuditLogSync) GetNodeAuditLogFileStates() map[string]*storage.AuditLogFileState {
	if x != nil {
		return x.NodeAuditLogFileStates
	}
	return nil
}

type AuditLogStatusInfo struct {
	state                  protoimpl.MessageState                `protogen:"open.v1"`
	NodeAuditLogFileStates map[string]*storage.AuditLogFileState `protobuf:"bytes,1,rep,name=node_audit_log_file_states,json=nodeAuditLogFileStates,proto3" json:"node_audit_log_file_states,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AuditLogStatusInfo) Reset() {
	*x = AuditLogStatusInfo{}
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLogStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogStatusInfo) ProtoMessage() {}

func (x *AuditLogStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogStatusInfo.ProtoReflect.Descriptor instead.
func (*AuditLogStatusInfo) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{6}
}

func (x *AuditLogStatusInfo) GetNodeAuditLogFileStates() map[string]*storage.AuditLogFileState {
	if x != nil {
		return x.NodeAuditLogFileStates
	}
	return nil
}

type ReprocessDeployment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentIds []string               `protobuf:"bytes,1,rep,name=deployment_ids,json=deploymentIds,proto3" json:"deployment_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReprocessDeployment) Reset() {
	*x = ReprocessDeployment{}
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReprocessDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReprocessDeployment) ProtoMessage() {}

func (x *ReprocessDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReprocessDeployment.ProtoReflect.Descriptor instead.
func (*ReprocessDeployment) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{7}
}

func (x *ReprocessDeployment) GetDeploymentIds() []string {
	if x != nil {
		return x.DeploymentIds
	}
	return nil
}

type InvalidateImageCache struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	ImageKeys     []*InvalidateImageCache_ImageKey `protobuf:"bytes,1,rep,name=image_keys,json=imageKeys,proto3" json:"image_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvalidateImageCache) Reset() {
	*x = InvalidateImageCache{}
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvalidateImageCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateImageCache) ProtoMessage() {}

func (x *InvalidateImageCache) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateImageCache.ProtoReflect.Descriptor instead.
func (*InvalidateImageCache) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{8}
}

func (x *InvalidateImageCache) GetImageKeys() []*InvalidateImageCache_ImageKey {
	if x != nil {
		return x.ImageKeys
	}
	return nil
}

type InvalidateImageCache_ImageKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageId       string                 `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ImageFullName string                 `protobuf:"bytes,2,opt,name=image_full_name,json=imageFullName,proto3" json:"image_full_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvalidateImageCache_ImageKey) Reset() {
	*x = InvalidateImageCache_ImageKey{}
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvalidateImageCache_ImageKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateImageCache_ImageKey) ProtoMessage() {}

func (x *InvalidateImageCache_ImageKey) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_iservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateImageCache_ImageKey.ProtoReflect.Descriptor instead.
func (*InvalidateImageCache_ImageKey) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_iservice_proto_rawDescGZIP(), []int{8, 0}
}

func (x *InvalidateImageCache_ImageKey) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *InvalidateImageCache_ImageKey) GetImageFullName() string {
	if x != nil {
		return x.ImageFullName
	}
	return ""
}

var File_internalapi_central_sensor_iservice_proto protoreflect.FileDescriptor

const file_internalapi_central_sensor_iservice_proto_rawDesc = "" +
	"\n" +
	")internalapi/central/sensor_iservice.proto\x12\acentral\x1a'internalapi/central/baseline_sync.proto\x1a(internalapi/central/cluster_config.proto\x1a)internalapi/central/cluster_metrics.proto\x1a(internalapi/central/cluster_status.proto\x1a-internalapi/central/compliance_operator.proto\x1a3internalapi/central/delegated_registry_config.proto\x1a0internalapi/central/deployment_enhancement.proto\x1a\x1finternalapi/central/hello.proto\x1a\x1finternalapi/central/image.proto\x1a'internalapi/central/local_scanner.proto\x1a/internalapi/central/network_baseline_sync.proto\x1a&internalapi/central/network_flow.proto\x1a%internalapi/central/policy_sync.proto\x1a;internalapi/central/process_listening_on_ports_update.proto\x1a6internalapi/central/secured_cluster_cert_refresh.proto\x1a'internalapi/central/sensor_events.proto\x1a(internalapi/central/sensor_upgrade.proto\x1a#internalapi/central/telemetry.proto\x1a\x15storage/cluster.proto\x1a\x13storage/image.proto\"\xdf\v\n" +
	"\rMsgFromSensor\x12\x19\n" +
	"\bhash_key\x18\a \x01(\tR\ahashKey\x12\x1d\n" +
	"\n" +
	"dedupe_key\x18\b \x01(\tR\tdedupeKey\x12-\n" +
	"\x12processing_attempt\x18\x0f \x01(\x05R\x11processingAttempt\x12,\n" +
	"\x05event\x18\x01 \x01(\v2\x14.central.SensorEventH\x00R\x05event\x12L\n" +
	"\x13network_flow_update\x18\x02 \x01(\v2\x1a.central.NetworkFlowUpdateH\x00R\x11networkFlowUpdate\x12<\n" +
	"\rscrape_update\x18\x03 \x01(\v2\x15.central.ScrapeUpdateH\x00R\fscrapeUpdate\x12^\n" +
	"\x19network_policies_response\x18\x04 \x01(\v2 .central.NetworkPoliciesResponseH\x00R\x17networkPoliciesResponse\x12R\n" +
	"\x15cluster_status_update\x18\x05 \x01(\v2\x1c.central.ClusterStatusUpdateH\x00R\x13clusterStatusUpdate\x12\\\n" +
	"\x17telemetry_data_response\x18\x06 \x01(\v2\".central.PullTelemetryDataResponseH\x00R\x15telemetryDataResponse\x12O\n" +
	"\x13cluster_health_info\x18\t \x01(\v2\x1d.central.RawClusterHealthInfoH\x00R\x11clusterHealthInfo\x12,\n" +
	"\x05hello\x18\n" +
	" \x01(\v2\x14.central.SensorHelloH\x00R\x05hello\x12P\n" +
	"\x15audit_log_status_info\x18\v \x01(\v2\x1b.central.AuditLogStatusInfoH\x00R\x12auditLogStatusInfo\x12r\n" +
	"!issue_local_scanner_certs_request\x18\f \x01(\v2&.central.IssueLocalScannerCertsRequestH\x00R\x1dissueLocalScannerCertsRequest\x12B\n" +
	"\x0fcluster_metrics\x18\r \x01(\v2\x17.central.ClusterMetricsH\x00R\x0eclusterMetrics\x12p\n" +
	" process_listening_on_port_update\x18\x0e \x01(\v2&.central.ProcessListeningOnPortsUpdateH\x00R\x1cprocessListeningOnPortUpdate\x12[\n" +
	"\x18compliance_operator_info\x18\x10 \x01(\v2\x1f.central.ComplianceOperatorInfoH\x00R\x16complianceOperatorInfo\x12N\n" +
	"\x13compliance_response\x18\x11 \x01(\v2\x1b.central.ComplianceResponseH\x00R\x12complianceResponse\x12p\n" +
	"\x1fdeployment_enhancement_response\x18\x12 \x01(\v2&.central.DeploymentEnhancementResponseH\x00R\x1ddeploymentEnhancementResponse\x12x\n" +
	"#issue_secured_cluster_certs_request\x18\x13 \x01(\v2(.central.IssueSecuredClusterCertsRequestH\x00R\x1fissueSecuredClusterCertsRequestB\x05\n" +
	"\x03msg\"\x16\n" +
	"\x14ReprocessDeployments\"\xaa\x11\n" +
	"\vMsgToSensor\x12>\n" +
	"\venforcement\x18\x01 \x01(\v2\x1a.central.SensorEnforcementH\x00R\venforcement\x12?\n" +
	"\x0escrape_command\x18\x02 \x01(\v2\x16.central.ScrapeCommandH\x00R\rscrapeCommand\x12[\n" +
	"\x18network_policies_command\x18\x03 \x01(\v2\x1f.central.NetworkPoliciesCommandH\x00R\x16networkPoliciesCommand\x12?\n" +
	"\x0ecluster_config\x18\x04 \x01(\v2\x16.central.ClusterConfigH\x00R\rclusterConfig\x12U\n" +
	"\x16sensor_upgrade_trigger\x18\x05 \x01(\v2\x1d.central.SensorUpgradeTriggerH\x00R\x14sensorUpgradeTrigger\x12Y\n" +
	"\x16telemetry_data_request\x18\x06 \x01(\v2!.central.PullTelemetryDataRequestH\x00R\x14telemetryDataRequest\x126\n" +
	"\vpolicy_sync\x18\a \x01(\v2\x13.central.PolicySyncH\x00R\n" +
	"policySync\x12<\n" +
	"\rbaseline_sync\x18\t \x01(\v2\x15.central.BaselineSyncH\x00R\fbaselineSync\x12u\n" +
	"\"cancel_pull_telemetry_data_request\x18\n" +
	" \x01(\v2'.central.CancelPullTelemetryDataRequestH\x00R\x1ecancelPullTelemetryDataRequest\x12h\n" +
	"\x1dpush_network_entities_request\x18\v \x01(\v2#.central.PushNetworkEntitiesRequestH\x00R\x1apushNetworkEntitiesRequest\x12-\n" +
	"\x05hello\x18\f \x01(\v2\x15.central.CentralHelloH\x00R\x05hello\x12R\n" +
	"\x15network_baseline_sync\x18\r \x01(\v2\x1c.central.NetworkBaselineSyncH\x00R\x13networkBaselineSync\x12=\n" +
	"\x0eaudit_log_sync\x18\x0e \x01(\v2\x15.central.AuditLogSyncH\x00R\fauditLogSync\x12Q\n" +
	"\x14reprocess_deployment\x18\x0f \x01(\v2\x1c.central.ReprocessDeploymentH\x00R\x13reprocessDeployment\x12U\n" +
	"\x16invalidate_image_cache\x18\x10 \x01(\v2\x1d.central.InvalidateImageCacheH\x00R\x14invalidateImageCache\x12u\n" +
	"\"issue_local_scanner_certs_response\x18\x11 \x01(\v2'.central.IssueLocalScannerCertsResponseH\x00R\x1eissueLocalScannerCertsResponse\x125\n" +
	"\rupdated_image\x18\x12 \x01(\v2\x0e.storage.ImageH\x00R\fupdatedImage\x12T\n" +
	"\x15reprocess_deployments\x18\x13 \x01(\v2\x1d.central.ReprocessDeploymentsH\x00R\x14reprocessDeployments\x12I\n" +
	"\x12node_inventory_ack\x18\x14 \x01(\v2\x19.central.NodeInventoryACKH\x00R\x10nodeInventoryAck\x12^\n" +
	"\x19delegated_registry_config\x18\x15 \x01(\v2 .central.DelegatedRegistryConfigH\x00R\x17delegatedRegistryConfig\x123\n" +
	"\n" +
	"scan_image\x18\x16 \x01(\v2\x12.central.ScanImageH\x00R\tscanImage\x12K\n" +
	"\x12image_integrations\x18\x17 \x01(\v2\x1a.central.ImageIntegrationsH\x00R\x11imageIntegrations\x12K\n" +
	"\x12compliance_request\x18\x18 \x01(\v2\x1a.central.ComplianceRequestH\x00R\x11complianceRequest\x12X\n" +
	"\x17cluster_health_response\x18\x19 \x01(\v2\x1e.central.ClusterHealthResponseH\x00R\x15clusterHealthResponse\x12<\n" +
	"\rdeduper_state\x18\x1a \x01(\v2\x15.central.DeduperStateH\x00R\fdeduperState\x12m\n" +
	"\x1edeployment_enhancement_request\x18\x1b \x01(\v2%.central.DeploymentEnhancementRequestH\x00R\x1cdeploymentEnhancementRequest\x12{\n" +
	"$issue_secured_cluster_certs_response\x18\x1c \x01(\v2).central.IssueSecuredClusterCertsResponseH\x00R issueSecuredClusterCertsResponseB\x05\n" +
	"\x03msg\"\xd5\x01\n" +
	"\fDeduperState\x12R\n" +
	"\x0fresource_hashes\x18\x01 \x03(\v2).central.DeduperState.ResourceHashesEntryR\x0eresourceHashes\x12\x18\n" +
	"\acurrent\x18\x02 \x01(\x05R\acurrent\x12\x14\n" +
	"\x05total\x18\x03 \x01(\x05R\x05total\x1aA\n" +
	"\x13ResourceHashesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\xa1\x02\n" +
	"\x10NodeInventoryACK\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1b\n" +
	"\tnode_name\x18\x02 \x01(\tR\bnodeName\x128\n" +
	"\x06action\x18\x03 \x01(\x0e2 .central.NodeInventoryACK.ActionR\x06action\x12G\n" +
	"\vmessageType\x18\x04 \x01(\x0e2%.central.NodeInventoryACK.MessageTypeR\vmessageType\"\x1b\n" +
	"\x06Action\x12\a\n" +
	"\x03ACK\x10\x00\x12\b\n" +
	"\x04NACK\x10\x01\"1\n" +
	"\vMessageType\x12\x11\n" +
	"\rNodeInventory\x10\x00\x12\x0f\n" +
	"\vNodeIndexer\x10\x01\"\xe4\x01\n" +
	"\fAuditLogSync\x12m\n" +
	"\x1anode_audit_log_file_states\x18\x01 \x03(\v21.central.AuditLogSync.NodeAuditLogFileStatesEntryR\x16nodeAuditLogFileStates\x1ae\n" +
	"\x1bNodeAuditLogFileStatesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.storage.AuditLogFileStateR\x05value:\x028\x01\"\xf0\x01\n" +
	"\x12AuditLogStatusInfo\x12s\n" +
	"\x1anode_audit_log_file_states\x18\x01 \x03(\v27.central.AuditLogStatusInfo.NodeAuditLogFileStatesEntryR\x16nodeAuditLogFileStates\x1ae\n" +
	"\x1bNodeAuditLogFileStatesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.storage.AuditLogFileStateR\x05value:\x028\x01\"<\n" +
	"\x13ReprocessDeployment\x12%\n" +
	"\x0edeployment_ids\x18\x01 \x03(\tR\rdeploymentIds\"\xac\x01\n" +
	"\x14InvalidateImageCache\x12E\n" +
	"\n" +
	"image_keys\x18\x01 \x03(\v2&.central.InvalidateImageCache.ImageKeyR\timageKeys\x1aM\n" +
	"\bImageKey\x12\x19\n" +
	"\bimage_id\x18\x01 \x01(\tR\aimageId\x12&\n" +
	"\x0fimage_full_name\x18\x02 \x01(\tR\rimageFullName2P\n" +
	"\rSensorService\x12?\n" +
	"\vCommunicate\x12\x16.central.MsgFromSensor\x1a\x14.central.MsgToSensor(\x010\x01B\x1fZ\x1d./internalapi/central;centralb\x06proto3"

var (
	file_internalapi_central_sensor_iservice_proto_rawDescOnce sync.Once
	file_internalapi_central_sensor_iservice_proto_rawDescData []byte
)

func file_internalapi_central_sensor_iservice_proto_rawDescGZIP() []byte {
	file_internalapi_central_sensor_iservice_proto_rawDescOnce.Do(func() {
		file_internalapi_central_sensor_iservice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internalapi_central_sensor_iservice_proto_rawDesc), len(file_internalapi_central_sensor_iservice_proto_rawDesc)))
	})
	return file_internalapi_central_sensor_iservice_proto_rawDescData
}

var file_internalapi_central_sensor_iservice_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_internalapi_central_sensor_iservice_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_internalapi_central_sensor_iservice_proto_goTypes = []any{
	(NodeInventoryACK_Action)(0),             // 0: central.NodeInventoryACK.Action
	(NodeInventoryACK_MessageType)(0),        // 1: central.NodeInventoryACK.MessageType
	(*MsgFromSensor)(nil),                    // 2: central.MsgFromSensor
	(*ReprocessDeployments)(nil),             // 3: central.ReprocessDeployments
	(*MsgToSensor)(nil),                      // 4: central.MsgToSensor
	(*DeduperState)(nil),                     // 5: central.DeduperState
	(*NodeInventoryACK)(nil),                 // 6: central.NodeInventoryACK
	(*AuditLogSync)(nil),                     // 7: central.AuditLogSync
	(*AuditLogStatusInfo)(nil),               // 8: central.AuditLogStatusInfo
	(*ReprocessDeployment)(nil),              // 9: central.ReprocessDeployment
	(*InvalidateImageCache)(nil),             // 10: central.InvalidateImageCache
	nil,                                      // 11: central.DeduperState.ResourceHashesEntry
	nil,                                      // 12: central.AuditLogSync.NodeAuditLogFileStatesEntry
	nil,                                      // 13: central.AuditLogStatusInfo.NodeAuditLogFileStatesEntry
	(*InvalidateImageCache_ImageKey)(nil),    // 14: central.InvalidateImageCache.ImageKey
	(*SensorEvent)(nil),                      // 15: central.SensorEvent
	(*NetworkFlowUpdate)(nil),                // 16: central.NetworkFlowUpdate
	(*ScrapeUpdate)(nil),                     // 17: central.ScrapeUpdate
	(*NetworkPoliciesResponse)(nil),          // 18: central.NetworkPoliciesResponse
	(*ClusterStatusUpdate)(nil),              // 19: central.ClusterStatusUpdate
	(*PullTelemetryDataResponse)(nil),        // 20: central.PullTelemetryDataResponse
	(*RawClusterHealthInfo)(nil),             // 21: central.RawClusterHealthInfo
	(*SensorHello)(nil),                      // 22: central.SensorHello
	(*IssueLocalScannerCertsRequest)(nil),    // 23: central.IssueLocalScannerCertsRequest
	(*ClusterMetrics)(nil),                   // 24: central.ClusterMetrics
	(*ProcessListeningOnPortsUpdate)(nil),    // 25: central.ProcessListeningOnPortsUpdate
	(*ComplianceOperatorInfo)(nil),           // 26: central.ComplianceOperatorInfo
	(*ComplianceResponse)(nil),               // 27: central.ComplianceResponse
	(*DeploymentEnhancementResponse)(nil),    // 28: central.DeploymentEnhancementResponse
	(*IssueSecuredClusterCertsRequest)(nil),  // 29: central.IssueSecuredClusterCertsRequest
	(*SensorEnforcement)(nil),                // 30: central.SensorEnforcement
	(*ScrapeCommand)(nil),                    // 31: central.ScrapeCommand
	(*NetworkPoliciesCommand)(nil),           // 32: central.NetworkPoliciesCommand
	(*ClusterConfig)(nil),                    // 33: central.ClusterConfig
	(*SensorUpgradeTrigger)(nil),             // 34: central.SensorUpgradeTrigger
	(*PullTelemetryDataRequest)(nil),         // 35: central.PullTelemetryDataRequest
	(*PolicySync)(nil),                       // 36: central.PolicySync
	(*BaselineSync)(nil),                     // 37: central.BaselineSync
	(*CancelPullTelemetryDataRequest)(nil),   // 38: central.CancelPullTelemetryDataRequest
	(*PushNetworkEntitiesRequest)(nil),       // 39: central.PushNetworkEntitiesRequest
	(*CentralHello)(nil),                     // 40: central.CentralHello
	(*NetworkBaselineSync)(nil),              // 41: central.NetworkBaselineSync
	(*IssueLocalScannerCertsResponse)(nil),   // 42: central.IssueLocalScannerCertsResponse
	(*storage.Image)(nil),                    // 43: storage.Image
	(*DelegatedRegistryConfig)(nil),          // 44: central.DelegatedRegistryConfig
	(*ScanImage)(nil),                        // 45: central.ScanImage
	(*ImageIntegrations)(nil),                // 46: central.ImageIntegrations
	(*ComplianceRequest)(nil),                // 47: central.ComplianceRequest
	(*ClusterHealthResponse)(nil),            // 48: central.ClusterHealthResponse
	(*DeploymentEnhancementRequest)(nil),     // 49: central.DeploymentEnhancementRequest
	(*IssueSecuredClusterCertsResponse)(nil), // 50: central.IssueSecuredClusterCertsResponse
	(*storage.AuditLogFileState)(nil),        // 51: storage.AuditLogFileState
}
var file_internalapi_central_sensor_iservice_proto_depIdxs = []int32{
	15, // 0: central.MsgFromSensor.event:type_name -> central.SensorEvent
	16, // 1: central.MsgFromSensor.network_flow_update:type_name -> central.NetworkFlowUpdate
	17, // 2: central.MsgFromSensor.scrape_update:type_name -> central.ScrapeUpdate
	18, // 3: central.MsgFromSensor.network_policies_response:type_name -> central.NetworkPoliciesResponse
	19, // 4: central.MsgFromSensor.cluster_status_update:type_name -> central.ClusterStatusUpdate
	20, // 5: central.MsgFromSensor.telemetry_data_response:type_name -> central.PullTelemetryDataResponse
	21, // 6: central.MsgFromSensor.cluster_health_info:type_name -> central.RawClusterHealthInfo
	22, // 7: central.MsgFromSensor.hello:type_name -> central.SensorHello
	8,  // 8: central.MsgFromSensor.audit_log_status_info:type_name -> central.AuditLogStatusInfo
	23, // 9: central.MsgFromSensor.issue_local_scanner_certs_request:type_name -> central.IssueLocalScannerCertsRequest
	24, // 10: central.MsgFromSensor.cluster_metrics:type_name -> central.ClusterMetrics
	25, // 11: central.MsgFromSensor.process_listening_on_port_update:type_name -> central.ProcessListeningOnPortsUpdate
	26, // 12: central.MsgFromSensor.compliance_operator_info:type_name -> central.ComplianceOperatorInfo
	27, // 13: central.MsgFromSensor.compliance_response:type_name -> central.ComplianceResponse
	28, // 14: central.MsgFromSensor.deployment_enhancement_response:type_name -> central.DeploymentEnhancementResponse
	29, // 15: central.MsgFromSensor.issue_secured_cluster_certs_request:type_name -> central.IssueSecuredClusterCertsRequest
	30, // 16: central.MsgToSensor.enforcement:type_name -> central.SensorEnforcement
	31, // 17: central.MsgToSensor.scrape_command:type_name -> central.ScrapeCommand
	32, // 18: central.MsgToSensor.network_policies_command:type_name -> central.NetworkPoliciesCommand
	33, // 19: central.MsgToSensor.cluster_config:type_name -> central.ClusterConfig
	34, // 20: central.MsgToSensor.sensor_upgrade_trigger:type_name -> central.SensorUpgradeTrigger
	35, // 21: central.MsgToSensor.telemetry_data_request:type_name -> central.PullTelemetryDataRequest
	36, // 22: central.MsgToSensor.policy_sync:type_name -> central.PolicySync
	37, // 23: central.MsgToSensor.baseline_sync:type_name -> central.BaselineSync
	38, // 24: central.MsgToSensor.cancel_pull_telemetry_data_request:type_name -> central.CancelPullTelemetryDataRequest
	39, // 25: central.MsgToSensor.push_network_entities_request:type_name -> central.PushNetworkEntitiesRequest
	40, // 26: central.MsgToSensor.hello:type_name -> central.CentralHello
	41, // 27: central.MsgToSensor.network_baseline_sync:type_name -> central.NetworkBaselineSync
	7,  // 28: central.MsgToSensor.audit_log_sync:type_name -> central.AuditLogSync
	9,  // 29: central.MsgToSensor.reprocess_deployment:type_name -> central.ReprocessDeployment
	10, // 30: central.MsgToSensor.invalidate_image_cache:type_name -> central.InvalidateImageCache
	42, // 31: central.MsgToSensor.issue_local_scanner_certs_response:type_name -> central.IssueLocalScannerCertsResponse
	43, // 32: central.MsgToSensor.updated_image:type_name -> storage.Image
	3,  // 33: central.MsgToSensor.reprocess_deployments:type_name -> central.ReprocessDeployments
	6,  // 34: central.MsgToSensor.node_inventory_ack:type_name -> central.NodeInventoryACK
	44, // 35: central.MsgToSensor.delegated_registry_config:type_name -> central.DelegatedRegistryConfig
	45, // 36: central.MsgToSensor.scan_image:type_name -> central.ScanImage
	46, // 37: central.MsgToSensor.image_integrations:type_name -> central.ImageIntegrations
	47, // 38: central.MsgToSensor.compliance_request:type_name -> central.ComplianceRequest
	48, // 39: central.MsgToSensor.cluster_health_response:type_name -> central.ClusterHealthResponse
	5,  // 40: central.MsgToSensor.deduper_state:type_name -> central.DeduperState
	49, // 41: central.MsgToSensor.deployment_enhancement_request:type_name -> central.DeploymentEnhancementRequest
	50, // 42: central.MsgToSensor.issue_secured_cluster_certs_response:type_name -> central.IssueSecuredClusterCertsResponse
	11, // 43: central.DeduperState.resource_hashes:type_name -> central.DeduperState.ResourceHashesEntry
	0,  // 44: central.NodeInventoryACK.action:type_name -> central.NodeInventoryACK.Action
	1,  // 45: central.NodeInventoryACK.messageType:type_name -> central.NodeInventoryACK.MessageType
	12, // 46: central.AuditLogSync.node_audit_log_file_states:type_name -> central.AuditLogSync.NodeAuditLogFileStatesEntry
	13, // 47: central.AuditLogStatusInfo.node_audit_log_file_states:type_name -> central.AuditLogStatusInfo.NodeAuditLogFileStatesEntry
	14, // 48: central.InvalidateImageCache.image_keys:type_name -> central.InvalidateImageCache.ImageKey
	51, // 49: central.AuditLogSync.NodeAuditLogFileStatesEntry.value:type_name -> storage.AuditLogFileState
	51, // 50: central.AuditLogStatusInfo.NodeAuditLogFileStatesEntry.value:type_name -> storage.AuditLogFileState
	2,  // 51: central.SensorService.Communicate:input_type -> central.MsgFromSensor
	4,  // 52: central.SensorService.Communicate:output_type -> central.MsgToSensor
	52, // [52:53] is the sub-list for method output_type
	51, // [51:52] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_internalapi_central_sensor_iservice_proto_init() }
func file_internalapi_central_sensor_iservice_proto_init() {
	if File_internalapi_central_sensor_iservice_proto != nil {
		return
	}
	file_internalapi_central_baseline_sync_proto_init()
	file_internalapi_central_cluster_config_proto_init()
	file_internalapi_central_cluster_metrics_proto_init()
	file_internalapi_central_cluster_status_proto_init()
	file_internalapi_central_compliance_operator_proto_init()
	file_internalapi_central_delegated_registry_config_proto_init()
	file_internalapi_central_deployment_enhancement_proto_init()
	file_internalapi_central_hello_proto_init()
	file_internalapi_central_image_proto_init()
	file_internalapi_central_local_scanner_proto_init()
	file_internalapi_central_network_baseline_sync_proto_init()
	file_internalapi_central_network_flow_proto_init()
	file_internalapi_central_policy_sync_proto_init()
	file_internalapi_central_process_listening_on_ports_update_proto_init()
	file_internalapi_central_secured_cluster_cert_refresh_proto_init()
	file_internalapi_central_sensor_events_proto_init()
	file_internalapi_central_sensor_upgrade_proto_init()
	file_internalapi_central_telemetry_proto_init()
	file_internalapi_central_sensor_iservice_proto_msgTypes[0].OneofWrappers = []any{
		(*MsgFromSensor_Event)(nil),
		(*MsgFromSensor_NetworkFlowUpdate)(nil),
		(*MsgFromSensor_ScrapeUpdate)(nil),
		(*MsgFromSensor_NetworkPoliciesResponse)(nil),
		(*MsgFromSensor_ClusterStatusUpdate)(nil),
		(*MsgFromSensor_TelemetryDataResponse)(nil),
		(*MsgFromSensor_ClusterHealthInfo)(nil),
		(*MsgFromSensor_Hello)(nil),
		(*MsgFromSensor_AuditLogStatusInfo)(nil),
		(*MsgFromSensor_IssueLocalScannerCertsRequest)(nil),
		(*MsgFromSensor_ClusterMetrics)(nil),
		(*MsgFromSensor_ProcessListeningOnPortUpdate)(nil),
		(*MsgFromSensor_ComplianceOperatorInfo)(nil),
		(*MsgFromSensor_ComplianceResponse)(nil),
		(*MsgFromSensor_DeploymentEnhancementResponse)(nil),
		(*MsgFromSensor_IssueSecuredClusterCertsRequest)(nil),
	}
	file_internalapi_central_sensor_iservice_proto_msgTypes[2].OneofWrappers = []any{
		(*MsgToSensor_Enforcement)(nil),
		(*MsgToSensor_ScrapeCommand)(nil),
		(*MsgToSensor_NetworkPoliciesCommand)(nil),
		(*MsgToSensor_ClusterConfig)(nil),
		(*MsgToSensor_SensorUpgradeTrigger)(nil),
		(*MsgToSensor_TelemetryDataRequest)(nil),
		(*MsgToSensor_PolicySync)(nil),
		(*MsgToSensor_BaselineSync)(nil),
		(*MsgToSensor_CancelPullTelemetryDataRequest)(nil),
		(*MsgToSensor_PushNetworkEntitiesRequest)(nil),
		(*MsgToSensor_Hello)(nil),
		(*MsgToSensor_NetworkBaselineSync)(nil),
		(*MsgToSensor_AuditLogSync)(nil),
		(*MsgToSensor_ReprocessDeployment)(nil),
		(*MsgToSensor_InvalidateImageCache)(nil),
		(*MsgToSensor_IssueLocalScannerCertsResponse)(nil),
		(*MsgToSensor_UpdatedImage)(nil),
		(*MsgToSensor_ReprocessDeployments)(nil),
		(*MsgToSensor_NodeInventoryAck)(nil),
		(*MsgToSensor_DelegatedRegistryConfig)(nil),
		(*MsgToSensor_ScanImage)(nil),
		(*MsgToSensor_ImageIntegrations)(nil),
		(*MsgToSensor_ComplianceRequest)(nil),
		(*MsgToSensor_ClusterHealthResponse)(nil),
		(*MsgToSensor_DeduperState)(nil),
		(*MsgToSensor_DeploymentEnhancementRequest)(nil),
		(*MsgToSensor_IssueSecuredClusterCertsResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internalapi_central_sensor_iservice_proto_rawDesc), len(file_internalapi_central_sensor_iservice_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internalapi_central_sensor_iservice_proto_goTypes,
		DependencyIndexes: file_internalapi_central_sensor_iservice_proto_depIdxs,
		EnumInfos:         file_internalapi_central_sensor_iservice_proto_enumTypes,
		MessageInfos:      file_internalapi_central_sensor_iservice_proto_msgTypes,
	}.Build()
	File_internalapi_central_sensor_iservice_proto = out.File
	file_internalapi_central_sensor_iservice_proto_goTypes = nil
	file_internalapi_central_sensor_iservice_proto_depIdxs = nil
}
