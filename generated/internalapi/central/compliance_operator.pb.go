// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/central/compliance_operator.proto

package central

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ComplianceOperatorCheckResultV2_CheckStatus int32

const (
	ComplianceOperatorCheckResultV2_UNSET          ComplianceOperatorCheckResultV2_CheckStatus = 0
	ComplianceOperatorCheckResultV2_PASS           ComplianceOperatorCheckResultV2_CheckStatus = 1
	ComplianceOperatorCheckResultV2_FAIL           ComplianceOperatorCheckResultV2_CheckStatus = 2
	ComplianceOperatorCheckResultV2_ERROR          ComplianceOperatorCheckResultV2_CheckStatus = 3
	ComplianceOperatorCheckResultV2_INFO           ComplianceOperatorCheckResultV2_CheckStatus = 4
	ComplianceOperatorCheckResultV2_MANUAL         ComplianceOperatorCheckResultV2_CheckStatus = 5
	ComplianceOperatorCheckResultV2_NOT_APPLICABLE ComplianceOperatorCheckResultV2_CheckStatus = 6
	ComplianceOperatorCheckResultV2_INCONSISTENT   ComplianceOperatorCheckResultV2_CheckStatus = 7
)

var ComplianceOperatorCheckResultV2_CheckStatus_name = map[int32]string{
	0: "UNSET",
	1: "PASS",
	2: "FAIL",
	3: "ERROR",
	4: "INFO",
	5: "MANUAL",
	6: "NOT_APPLICABLE",
	7: "INCONSISTENT",
}

var ComplianceOperatorCheckResultV2_CheckStatus_value = map[string]int32{
	"UNSET":          0,
	"PASS":           1,
	"FAIL":           2,
	"ERROR":          3,
	"INFO":           4,
	"MANUAL":         5,
	"NOT_APPLICABLE": 6,
	"INCONSISTENT":   7,
}

func (x ComplianceOperatorCheckResultV2_CheckStatus) String() string {
	return proto.EnumName(ComplianceOperatorCheckResultV2_CheckStatus_name, int32(x))
}

func (ComplianceOperatorCheckResultV2_CheckStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{7, 0}
}

type ComplianceOperatorCheckResultV2_RuleSeverity int32

const (
	ComplianceOperatorCheckResultV2_UNSET_RULE_SEVERITY   ComplianceOperatorCheckResultV2_RuleSeverity = 0
	ComplianceOperatorCheckResultV2_UNKNOWN_RULE_SEVERITY ComplianceOperatorCheckResultV2_RuleSeverity = 1
	ComplianceOperatorCheckResultV2_INFO_RULE_SEVERITY    ComplianceOperatorCheckResultV2_RuleSeverity = 2
	ComplianceOperatorCheckResultV2_LOW_RULE_SEVERITY     ComplianceOperatorCheckResultV2_RuleSeverity = 3
	ComplianceOperatorCheckResultV2_MEDIUM_RULE_SEVERITY  ComplianceOperatorCheckResultV2_RuleSeverity = 4
	ComplianceOperatorCheckResultV2_HIGH_RULE_SEVERITY    ComplianceOperatorCheckResultV2_RuleSeverity = 5
)

var ComplianceOperatorCheckResultV2_RuleSeverity_name = map[int32]string{
	0: "UNSET_RULE_SEVERITY",
	1: "UNKNOWN_RULE_SEVERITY",
	2: "INFO_RULE_SEVERITY",
	3: "LOW_RULE_SEVERITY",
	4: "MEDIUM_RULE_SEVERITY",
	5: "HIGH_RULE_SEVERITY",
}

var ComplianceOperatorCheckResultV2_RuleSeverity_value = map[string]int32{
	"UNSET_RULE_SEVERITY":   0,
	"UNKNOWN_RULE_SEVERITY": 1,
	"INFO_RULE_SEVERITY":    2,
	"LOW_RULE_SEVERITY":     3,
	"MEDIUM_RULE_SEVERITY":  4,
	"HIGH_RULE_SEVERITY":    5,
}

func (x ComplianceOperatorCheckResultV2_RuleSeverity) String() string {
	return proto.EnumName(ComplianceOperatorCheckResultV2_RuleSeverity_name, int32(x))
}

func (ComplianceOperatorCheckResultV2_RuleSeverity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{7, 1}
}

// ComplianceOperatorInfo has basic info and status about the compliance operator.
type ComplianceOperatorInfo struct {
	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The following fields are made optional/nullable because there can be errors when trying to obtain them.
	//
	// Types that are valid to be assigned to TotalDesiredPodsOpt:
	//	*ComplianceOperatorInfo_TotalDesiredPods
	TotalDesiredPodsOpt isComplianceOperatorInfo_TotalDesiredPodsOpt `protobuf_oneof:"total_desired_pods_opt"`
	// Types that are valid to be assigned to TotalReadyPodsOpt:
	//	*ComplianceOperatorInfo_TotalReadyPods
	TotalReadyPodsOpt isComplianceOperatorInfo_TotalReadyPodsOpt `protobuf_oneof:"total_ready_pods_opt"`
	// Collection of errors that occurred while trying to obtain collector health info.
	StatusError          string   `protobuf:"bytes,5,opt,name=status_error,json=statusError,proto3" json:"status_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComplianceOperatorInfo) Reset()         { *m = ComplianceOperatorInfo{} }
func (m *ComplianceOperatorInfo) String() string { return proto.CompactTextString(m) }
func (*ComplianceOperatorInfo) ProtoMessage()    {}
func (*ComplianceOperatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{0}
}
func (m *ComplianceOperatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceOperatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceOperatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceOperatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceOperatorInfo.Merge(m, src)
}
func (m *ComplianceOperatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceOperatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceOperatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceOperatorInfo proto.InternalMessageInfo

type isComplianceOperatorInfo_TotalDesiredPodsOpt interface {
	isComplianceOperatorInfo_TotalDesiredPodsOpt()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isComplianceOperatorInfo_TotalDesiredPodsOpt
}
type isComplianceOperatorInfo_TotalReadyPodsOpt interface {
	isComplianceOperatorInfo_TotalReadyPodsOpt()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isComplianceOperatorInfo_TotalReadyPodsOpt
}

type ComplianceOperatorInfo_TotalDesiredPods struct {
	TotalDesiredPods int32 `protobuf:"varint,3,opt,name=total_desired_pods,json=totalDesiredPods,proto3,oneof" json:"total_desired_pods,omitempty"`
}
type ComplianceOperatorInfo_TotalReadyPods struct {
	TotalReadyPods int32 `protobuf:"varint,4,opt,name=total_ready_pods,json=totalReadyPods,proto3,oneof" json:"total_ready_pods,omitempty"`
}

func (*ComplianceOperatorInfo_TotalDesiredPods) isComplianceOperatorInfo_TotalDesiredPodsOpt() {}
func (m *ComplianceOperatorInfo_TotalDesiredPods) Clone() isComplianceOperatorInfo_TotalDesiredPodsOpt {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceOperatorInfo_TotalDesiredPods)
	*cloned = *m

	return cloned
}
func (*ComplianceOperatorInfo_TotalReadyPods) isComplianceOperatorInfo_TotalReadyPodsOpt() {}
func (m *ComplianceOperatorInfo_TotalReadyPods) Clone() isComplianceOperatorInfo_TotalReadyPodsOpt {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceOperatorInfo_TotalReadyPods)
	*cloned = *m

	return cloned
}

func (m *ComplianceOperatorInfo) GetTotalDesiredPodsOpt() isComplianceOperatorInfo_TotalDesiredPodsOpt {
	if m != nil {
		return m.TotalDesiredPodsOpt
	}
	return nil
}
func (m *ComplianceOperatorInfo) GetTotalReadyPodsOpt() isComplianceOperatorInfo_TotalReadyPodsOpt {
	if m != nil {
		return m.TotalReadyPodsOpt
	}
	return nil
}

func (m *ComplianceOperatorInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ComplianceOperatorInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ComplianceOperatorInfo) GetTotalDesiredPods() int32 {
	if x, ok := m.GetTotalDesiredPodsOpt().(*ComplianceOperatorInfo_TotalDesiredPods); ok {
		return x.TotalDesiredPods
	}
	return 0
}

func (m *ComplianceOperatorInfo) GetTotalReadyPods() int32 {
	if x, ok := m.GetTotalReadyPodsOpt().(*ComplianceOperatorInfo_TotalReadyPods); ok {
		return x.TotalReadyPods
	}
	return 0
}

func (m *ComplianceOperatorInfo) GetStatusError() string {
	if m != nil {
		return m.StatusError
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ComplianceOperatorInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ComplianceOperatorInfo_TotalDesiredPods)(nil),
		(*ComplianceOperatorInfo_TotalReadyPods)(nil),
	}
}

func (m *ComplianceOperatorInfo) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceOperatorInfo) Clone() *ComplianceOperatorInfo {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceOperatorInfo)
	*cloned = *m

	if m.TotalDesiredPodsOpt != nil {
		cloned.TotalDesiredPodsOpt = m.TotalDesiredPodsOpt.Clone()
	}
	if m.TotalReadyPodsOpt != nil {
		cloned.TotalReadyPodsOpt = m.TotalReadyPodsOpt.Clone()
	}
	return cloned
}

type EnableComplianceRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableComplianceRequest) Reset()         { *m = EnableComplianceRequest{} }
func (m *EnableComplianceRequest) String() string { return proto.CompactTextString(m) }
func (*EnableComplianceRequest) ProtoMessage()    {}
func (*EnableComplianceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{1}
}
func (m *EnableComplianceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableComplianceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableComplianceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableComplianceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableComplianceRequest.Merge(m, src)
}
func (m *EnableComplianceRequest) XXX_Size() int {
	return m.Size()
}
func (m *EnableComplianceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableComplianceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableComplianceRequest proto.InternalMessageInfo

func (m *EnableComplianceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EnableComplianceRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *EnableComplianceRequest) Clone() *EnableComplianceRequest {
	if m == nil {
		return nil
	}
	cloned := new(EnableComplianceRequest)
	*cloned = *m

	return cloned
}

type DisableComplianceRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisableComplianceRequest) Reset()         { *m = DisableComplianceRequest{} }
func (m *DisableComplianceRequest) String() string { return proto.CompactTextString(m) }
func (*DisableComplianceRequest) ProtoMessage()    {}
func (*DisableComplianceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{2}
}
func (m *DisableComplianceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisableComplianceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisableComplianceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisableComplianceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableComplianceRequest.Merge(m, src)
}
func (m *DisableComplianceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DisableComplianceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableComplianceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisableComplianceRequest proto.InternalMessageInfo

func (m *DisableComplianceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DisableComplianceRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DisableComplianceRequest) Clone() *DisableComplianceRequest {
	if m == nil {
		return nil
	}
	cloned := new(DisableComplianceRequest)
	*cloned = *m

	return cloned
}

// ApplyComplianceScanConfigRequest contains information about a compliance scan configuration to be applied to secured cluster.
type ApplyComplianceScanConfigRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to ScanRequest:
	//	*ApplyComplianceScanConfigRequest_OneTimeScan_
	//	*ApplyComplianceScanConfigRequest_ScheduledScan_
	//	*ApplyComplianceScanConfigRequest_RerunScan
	ScanRequest          isApplyComplianceScanConfigRequest_ScanRequest `protobuf_oneof:"scan_request"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *ApplyComplianceScanConfigRequest) Reset()         { *m = ApplyComplianceScanConfigRequest{} }
func (m *ApplyComplianceScanConfigRequest) String() string { return proto.CompactTextString(m) }
func (*ApplyComplianceScanConfigRequest) ProtoMessage()    {}
func (*ApplyComplianceScanConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{3}
}
func (m *ApplyComplianceScanConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyComplianceScanConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyComplianceScanConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyComplianceScanConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyComplianceScanConfigRequest.Merge(m, src)
}
func (m *ApplyComplianceScanConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplyComplianceScanConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyComplianceScanConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyComplianceScanConfigRequest proto.InternalMessageInfo

type isApplyComplianceScanConfigRequest_ScanRequest interface {
	isApplyComplianceScanConfigRequest_ScanRequest()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isApplyComplianceScanConfigRequest_ScanRequest
}

type ApplyComplianceScanConfigRequest_OneTimeScan_ struct {
	OneTimeScan *ApplyComplianceScanConfigRequest_OneTimeScan `protobuf:"bytes,2,opt,name=one_time_scan,json=oneTimeScan,proto3,oneof" json:"one_time_scan,omitempty"`
}
type ApplyComplianceScanConfigRequest_ScheduledScan_ struct {
	ScheduledScan *ApplyComplianceScanConfigRequest_ScheduledScan `protobuf:"bytes,3,opt,name=scheduled_scan,json=scheduledScan,proto3,oneof" json:"scheduled_scan,omitempty"`
}
type ApplyComplianceScanConfigRequest_RerunScan struct {
	RerunScan *ApplyComplianceScanConfigRequest_RerunScheduledScan `protobuf:"bytes,4,opt,name=rerun_scan,json=rerunScan,proto3,oneof" json:"rerun_scan,omitempty"`
}

func (*ApplyComplianceScanConfigRequest_OneTimeScan_) isApplyComplianceScanConfigRequest_ScanRequest() {
}
func (m *ApplyComplianceScanConfigRequest_OneTimeScan_) Clone() isApplyComplianceScanConfigRequest_ScanRequest {
	if m == nil {
		return nil
	}
	cloned := new(ApplyComplianceScanConfigRequest_OneTimeScan_)
	*cloned = *m

	cloned.OneTimeScan = m.OneTimeScan.Clone()
	return cloned
}
func (*ApplyComplianceScanConfigRequest_ScheduledScan_) isApplyComplianceScanConfigRequest_ScanRequest() {
}
func (m *ApplyComplianceScanConfigRequest_ScheduledScan_) Clone() isApplyComplianceScanConfigRequest_ScanRequest {
	if m == nil {
		return nil
	}
	cloned := new(ApplyComplianceScanConfigRequest_ScheduledScan_)
	*cloned = *m

	cloned.ScheduledScan = m.ScheduledScan.Clone()
	return cloned
}
func (*ApplyComplianceScanConfigRequest_RerunScan) isApplyComplianceScanConfigRequest_ScanRequest() {}
func (m *ApplyComplianceScanConfigRequest_RerunScan) Clone() isApplyComplianceScanConfigRequest_ScanRequest {
	if m == nil {
		return nil
	}
	cloned := new(ApplyComplianceScanConfigRequest_RerunScan)
	*cloned = *m

	cloned.RerunScan = m.RerunScan.Clone()
	return cloned
}

func (m *ApplyComplianceScanConfigRequest) GetScanRequest() isApplyComplianceScanConfigRequest_ScanRequest {
	if m != nil {
		return m.ScanRequest
	}
	return nil
}

func (m *ApplyComplianceScanConfigRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ApplyComplianceScanConfigRequest) GetOneTimeScan() *ApplyComplianceScanConfigRequest_OneTimeScan {
	if x, ok := m.GetScanRequest().(*ApplyComplianceScanConfigRequest_OneTimeScan_); ok {
		return x.OneTimeScan
	}
	return nil
}

func (m *ApplyComplianceScanConfigRequest) GetScheduledScan() *ApplyComplianceScanConfigRequest_ScheduledScan {
	if x, ok := m.GetScanRequest().(*ApplyComplianceScanConfigRequest_ScheduledScan_); ok {
		return x.ScheduledScan
	}
	return nil
}

func (m *ApplyComplianceScanConfigRequest) GetRerunScan() *ApplyComplianceScanConfigRequest_RerunScheduledScan {
	if x, ok := m.GetScanRequest().(*ApplyComplianceScanConfigRequest_RerunScan); ok {
		return x.RerunScan
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApplyComplianceScanConfigRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApplyComplianceScanConfigRequest_OneTimeScan_)(nil),
		(*ApplyComplianceScanConfigRequest_ScheduledScan_)(nil),
		(*ApplyComplianceScanConfigRequest_RerunScan)(nil),
	}
}

func (m *ApplyComplianceScanConfigRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ApplyComplianceScanConfigRequest) Clone() *ApplyComplianceScanConfigRequest {
	if m == nil {
		return nil
	}
	cloned := new(ApplyComplianceScanConfigRequest)
	*cloned = *m

	if m.ScanRequest != nil {
		cloned.ScanRequest = m.ScanRequest.Clone()
	}
	return cloned
}

type ApplyComplianceScanConfigRequest_BaseScanSettings struct {
	DbRecordId             string   `protobuf:"bytes,1,opt,name=db_record_id,json=dbRecordId,proto3" json:"db_record_id,omitempty"`
	ScanName               string   `protobuf:"bytes,2,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	Profiles               []string `protobuf:"bytes,3,rep,name=profiles,proto3" json:"profiles,omitempty"`
	ShowNotApplicable      bool     `protobuf:"varint,4,opt,name=show_not_applicable,json=showNotApplicable,proto3" json:"show_not_applicable,omitempty"`
	StrictNodeScan         bool     `protobuf:"varint,5,opt,name=strict_node_scan,json=strictNodeScan,proto3" json:"strict_node_scan,omitempty"`
	AutoApplyRemediations  bool     `protobuf:"varint,6,opt,name=auto_apply_remediations,json=autoApplyRemediations,proto3" json:"auto_apply_remediations,omitempty"`
	AutoUpdateRemediations bool     `protobuf:"varint,7,opt,name=auto_update_remediations,json=autoUpdateRemediations,proto3" json:"auto_update_remediations,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) Reset() {
	*m = ApplyComplianceScanConfigRequest_BaseScanSettings{}
}
func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) String() string {
	return proto.CompactTextString(m)
}
func (*ApplyComplianceScanConfigRequest_BaseScanSettings) ProtoMessage() {}
func (*ApplyComplianceScanConfigRequest_BaseScanSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{3, 0}
}
func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyComplianceScanConfigRequest_BaseScanSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyComplianceScanConfigRequest_BaseScanSettings.Merge(m, src)
}
func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) XXX_Size() int {
	return m.Size()
}
func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyComplianceScanConfigRequest_BaseScanSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyComplianceScanConfigRequest_BaseScanSettings proto.InternalMessageInfo

func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) GetDbRecordId() string {
	if m != nil {
		return m.DbRecordId
	}
	return ""
}

func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) GetProfiles() []string {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) GetShowNotApplicable() bool {
	if m != nil {
		return m.ShowNotApplicable
	}
	return false
}

func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) GetStrictNodeScan() bool {
	if m != nil {
		return m.StrictNodeScan
	}
	return false
}

func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) GetAutoApplyRemediations() bool {
	if m != nil {
		return m.AutoApplyRemediations
	}
	return false
}

func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) GetAutoUpdateRemediations() bool {
	if m != nil {
		return m.AutoUpdateRemediations
	}
	return false
}

func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) Clone() *ApplyComplianceScanConfigRequest_BaseScanSettings {
	if m == nil {
		return nil
	}
	cloned := new(ApplyComplianceScanConfigRequest_BaseScanSettings)
	*cloned = *m

	if m.Profiles != nil {
		cloned.Profiles = make([]string, len(m.Profiles))
		copy(cloned.Profiles, m.Profiles)
	}
	return cloned
}

type ApplyComplianceScanConfigRequest_OneTimeScan struct {
	ScanSettings         *ApplyComplianceScanConfigRequest_BaseScanSettings `protobuf:"bytes,1,opt,name=scan_settings,json=scanSettings,proto3" json:"scan_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *ApplyComplianceScanConfigRequest_OneTimeScan) Reset() {
	*m = ApplyComplianceScanConfigRequest_OneTimeScan{}
}
func (m *ApplyComplianceScanConfigRequest_OneTimeScan) String() string {
	return proto.CompactTextString(m)
}
func (*ApplyComplianceScanConfigRequest_OneTimeScan) ProtoMessage() {}
func (*ApplyComplianceScanConfigRequest_OneTimeScan) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{3, 1}
}
func (m *ApplyComplianceScanConfigRequest_OneTimeScan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyComplianceScanConfigRequest_OneTimeScan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyComplianceScanConfigRequest_OneTimeScan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyComplianceScanConfigRequest_OneTimeScan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyComplianceScanConfigRequest_OneTimeScan.Merge(m, src)
}
func (m *ApplyComplianceScanConfigRequest_OneTimeScan) XXX_Size() int {
	return m.Size()
}
func (m *ApplyComplianceScanConfigRequest_OneTimeScan) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyComplianceScanConfigRequest_OneTimeScan.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyComplianceScanConfigRequest_OneTimeScan proto.InternalMessageInfo

func (m *ApplyComplianceScanConfigRequest_OneTimeScan) GetScanSettings() *ApplyComplianceScanConfigRequest_BaseScanSettings {
	if m != nil {
		return m.ScanSettings
	}
	return nil
}

func (m *ApplyComplianceScanConfigRequest_OneTimeScan) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ApplyComplianceScanConfigRequest_OneTimeScan) Clone() *ApplyComplianceScanConfigRequest_OneTimeScan {
	if m == nil {
		return nil
	}
	cloned := new(ApplyComplianceScanConfigRequest_OneTimeScan)
	*cloned = *m

	cloned.ScanSettings = m.ScanSettings.Clone()
	return cloned
}

type ApplyComplianceScanConfigRequest_ScheduledScan struct {
	ScanSettings         *ApplyComplianceScanConfigRequest_BaseScanSettings `protobuf:"bytes,1,opt,name=scan_settings,json=scanSettings,proto3" json:"scan_settings,omitempty"`
	Cron                 string                                             `protobuf:"bytes,2,opt,name=cron,proto3" json:"cron,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *ApplyComplianceScanConfigRequest_ScheduledScan) Reset() {
	*m = ApplyComplianceScanConfigRequest_ScheduledScan{}
}
func (m *ApplyComplianceScanConfigRequest_ScheduledScan) String() string {
	return proto.CompactTextString(m)
}
func (*ApplyComplianceScanConfigRequest_ScheduledScan) ProtoMessage() {}
func (*ApplyComplianceScanConfigRequest_ScheduledScan) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{3, 2}
}
func (m *ApplyComplianceScanConfigRequest_ScheduledScan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyComplianceScanConfigRequest_ScheduledScan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyComplianceScanConfigRequest_ScheduledScan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyComplianceScanConfigRequest_ScheduledScan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyComplianceScanConfigRequest_ScheduledScan.Merge(m, src)
}
func (m *ApplyComplianceScanConfigRequest_ScheduledScan) XXX_Size() int {
	return m.Size()
}
func (m *ApplyComplianceScanConfigRequest_ScheduledScan) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyComplianceScanConfigRequest_ScheduledScan.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyComplianceScanConfigRequest_ScheduledScan proto.InternalMessageInfo

func (m *ApplyComplianceScanConfigRequest_ScheduledScan) GetScanSettings() *ApplyComplianceScanConfigRequest_BaseScanSettings {
	if m != nil {
		return m.ScanSettings
	}
	return nil
}

func (m *ApplyComplianceScanConfigRequest_ScheduledScan) GetCron() string {
	if m != nil {
		return m.Cron
	}
	return ""
}

func (m *ApplyComplianceScanConfigRequest_ScheduledScan) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ApplyComplianceScanConfigRequest_ScheduledScan) Clone() *ApplyComplianceScanConfigRequest_ScheduledScan {
	if m == nil {
		return nil
	}
	cloned := new(ApplyComplianceScanConfigRequest_ScheduledScan)
	*cloned = *m

	cloned.ScanSettings = m.ScanSettings.Clone()
	return cloned
}

type ApplyComplianceScanConfigRequest_RerunScheduledScan struct {
	ScanName             string   `protobuf:"bytes,1,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) Reset() {
	*m = ApplyComplianceScanConfigRequest_RerunScheduledScan{}
}
func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) String() string {
	return proto.CompactTextString(m)
}
func (*ApplyComplianceScanConfigRequest_RerunScheduledScan) ProtoMessage() {}
func (*ApplyComplianceScanConfigRequest_RerunScheduledScan) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{3, 3}
}
func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyComplianceScanConfigRequest_RerunScheduledScan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyComplianceScanConfigRequest_RerunScheduledScan.Merge(m, src)
}
func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) XXX_Size() int {
	return m.Size()
}
func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyComplianceScanConfigRequest_RerunScheduledScan.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyComplianceScanConfigRequest_RerunScheduledScan proto.InternalMessageInfo

func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) Clone() *ApplyComplianceScanConfigRequest_RerunScheduledScan {
	if m == nil {
		return nil
	}
	cloned := new(ApplyComplianceScanConfigRequest_RerunScheduledScan)
	*cloned = *m

	return cloned
}

// DeleteComplianceScanConfigRequest contains information about compliance scan configuration to be deleted from secured cluster.
type DeleteComplianceScanConfigRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteComplianceScanConfigRequest) Reset()         { *m = DeleteComplianceScanConfigRequest{} }
func (m *DeleteComplianceScanConfigRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteComplianceScanConfigRequest) ProtoMessage()    {}
func (*DeleteComplianceScanConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{4}
}
func (m *DeleteComplianceScanConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteComplianceScanConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteComplianceScanConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteComplianceScanConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteComplianceScanConfigRequest.Merge(m, src)
}
func (m *DeleteComplianceScanConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteComplianceScanConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteComplianceScanConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteComplianceScanConfigRequest proto.InternalMessageInfo

func (m *DeleteComplianceScanConfigRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteComplianceScanConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteComplianceScanConfigRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeleteComplianceScanConfigRequest) Clone() *DeleteComplianceScanConfigRequest {
	if m == nil {
		return nil
	}
	cloned := new(DeleteComplianceScanConfigRequest)
	*cloned = *m

	return cloned
}

// ComplianceRequest is a message from Central (to Sensor) to perform an action related to compliance.
type ComplianceRequest struct {
	// Types that are valid to be assigned to Request:
	//	*ComplianceRequest_EnableCompliance
	//	*ComplianceRequest_DisableCompliance
	//	*ComplianceRequest_ApplyScanConfig
	//	*ComplianceRequest_DeleteScanConfig
	Request              isComplianceRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ComplianceRequest) Reset()         { *m = ComplianceRequest{} }
func (m *ComplianceRequest) String() string { return proto.CompactTextString(m) }
func (*ComplianceRequest) ProtoMessage()    {}
func (*ComplianceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{5}
}
func (m *ComplianceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceRequest.Merge(m, src)
}
func (m *ComplianceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceRequest proto.InternalMessageInfo

type isComplianceRequest_Request interface {
	isComplianceRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isComplianceRequest_Request
}

type ComplianceRequest_EnableCompliance struct {
	EnableCompliance *EnableComplianceRequest `protobuf:"bytes,1,opt,name=enable_compliance,json=enableCompliance,proto3,oneof" json:"enable_compliance,omitempty"`
}
type ComplianceRequest_DisableCompliance struct {
	DisableCompliance *DisableComplianceRequest `protobuf:"bytes,2,opt,name=disable_compliance,json=disableCompliance,proto3,oneof" json:"disable_compliance,omitempty"`
}
type ComplianceRequest_ApplyScanConfig struct {
	ApplyScanConfig *ApplyComplianceScanConfigRequest `protobuf:"bytes,3,opt,name=apply_scan_config,json=applyScanConfig,proto3,oneof" json:"apply_scan_config,omitempty"`
}
type ComplianceRequest_DeleteScanConfig struct {
	DeleteScanConfig *DeleteComplianceScanConfigRequest `protobuf:"bytes,4,opt,name=delete_scan_config,json=deleteScanConfig,proto3,oneof" json:"delete_scan_config,omitempty"`
}

func (*ComplianceRequest_EnableCompliance) isComplianceRequest_Request() {}
func (m *ComplianceRequest_EnableCompliance) Clone() isComplianceRequest_Request {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceRequest_EnableCompliance)
	*cloned = *m

	cloned.EnableCompliance = m.EnableCompliance.Clone()
	return cloned
}
func (*ComplianceRequest_DisableCompliance) isComplianceRequest_Request() {}
func (m *ComplianceRequest_DisableCompliance) Clone() isComplianceRequest_Request {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceRequest_DisableCompliance)
	*cloned = *m

	cloned.DisableCompliance = m.DisableCompliance.Clone()
	return cloned
}
func (*ComplianceRequest_ApplyScanConfig) isComplianceRequest_Request() {}
func (m *ComplianceRequest_ApplyScanConfig) Clone() isComplianceRequest_Request {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceRequest_ApplyScanConfig)
	*cloned = *m

	cloned.ApplyScanConfig = m.ApplyScanConfig.Clone()
	return cloned
}
func (*ComplianceRequest_DeleteScanConfig) isComplianceRequest_Request() {}
func (m *ComplianceRequest_DeleteScanConfig) Clone() isComplianceRequest_Request {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceRequest_DeleteScanConfig)
	*cloned = *m

	cloned.DeleteScanConfig = m.DeleteScanConfig.Clone()
	return cloned
}

func (m *ComplianceRequest) GetRequest() isComplianceRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ComplianceRequest) GetEnableCompliance() *EnableComplianceRequest {
	if x, ok := m.GetRequest().(*ComplianceRequest_EnableCompliance); ok {
		return x.EnableCompliance
	}
	return nil
}

func (m *ComplianceRequest) GetDisableCompliance() *DisableComplianceRequest {
	if x, ok := m.GetRequest().(*ComplianceRequest_DisableCompliance); ok {
		return x.DisableCompliance
	}
	return nil
}

func (m *ComplianceRequest) GetApplyScanConfig() *ApplyComplianceScanConfigRequest {
	if x, ok := m.GetRequest().(*ComplianceRequest_ApplyScanConfig); ok {
		return x.ApplyScanConfig
	}
	return nil
}

func (m *ComplianceRequest) GetDeleteScanConfig() *DeleteComplianceScanConfigRequest {
	if x, ok := m.GetRequest().(*ComplianceRequest_DeleteScanConfig); ok {
		return x.DeleteScanConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ComplianceRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ComplianceRequest_EnableCompliance)(nil),
		(*ComplianceRequest_DisableCompliance)(nil),
		(*ComplianceRequest_ApplyScanConfig)(nil),
		(*ComplianceRequest_DeleteScanConfig)(nil),
	}
}

func (m *ComplianceRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceRequest) Clone() *ComplianceRequest {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceRequest)
	*cloned = *m

	if m.Request != nil {
		cloned.Request = m.Request.Clone()
	}
	return cloned
}

// ComplianceResponse is a message from Sensor (to Central) representing success/failure processing request.
type ComplianceResponse struct {
	// Types that are valid to be assigned to Response:
	//	*ComplianceResponse_EnableComplianceResponse_
	//	*ComplianceResponse_DisableComplianceResponse_
	//	*ComplianceResponse_ApplyComplianceScanConfigResponse_
	//	*ComplianceResponse_DeleteComplianceScanConfigResponse_
	Response             isComplianceResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ComplianceResponse) Reset()         { *m = ComplianceResponse{} }
func (m *ComplianceResponse) String() string { return proto.CompactTextString(m) }
func (*ComplianceResponse) ProtoMessage()    {}
func (*ComplianceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{6}
}
func (m *ComplianceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceResponse.Merge(m, src)
}
func (m *ComplianceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceResponse proto.InternalMessageInfo

type isComplianceResponse_Response interface {
	isComplianceResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isComplianceResponse_Response
}

type ComplianceResponse_EnableComplianceResponse_ struct {
	EnableComplianceResponse *ComplianceResponse_EnableComplianceResponse `protobuf:"bytes,1,opt,name=enable_compliance_response,json=enableComplianceResponse,proto3,oneof" json:"enable_compliance_response,omitempty"`
}
type ComplianceResponse_DisableComplianceResponse_ struct {
	DisableComplianceResponse *ComplianceResponse_DisableComplianceResponse `protobuf:"bytes,2,opt,name=disable_compliance_response,json=disableComplianceResponse,proto3,oneof" json:"disable_compliance_response,omitempty"`
}
type ComplianceResponse_ApplyComplianceScanConfigResponse_ struct {
	ApplyComplianceScanConfigResponse *ComplianceResponse_ApplyComplianceScanConfigResponse `protobuf:"bytes,3,opt,name=apply_compliance_scan_config_response,json=applyComplianceScanConfigResponse,proto3,oneof" json:"apply_compliance_scan_config_response,omitempty"`
}
type ComplianceResponse_DeleteComplianceScanConfigResponse_ struct {
	DeleteComplianceScanConfigResponse *ComplianceResponse_DeleteComplianceScanConfigResponse `protobuf:"bytes,4,opt,name=delete_compliance_scan_config_response,json=deleteComplianceScanConfigResponse,proto3,oneof" json:"delete_compliance_scan_config_response,omitempty"`
}

func (*ComplianceResponse_EnableComplianceResponse_) isComplianceResponse_Response() {}
func (m *ComplianceResponse_EnableComplianceResponse_) Clone() isComplianceResponse_Response {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_EnableComplianceResponse_)
	*cloned = *m

	cloned.EnableComplianceResponse = m.EnableComplianceResponse.Clone()
	return cloned
}
func (*ComplianceResponse_DisableComplianceResponse_) isComplianceResponse_Response() {}
func (m *ComplianceResponse_DisableComplianceResponse_) Clone() isComplianceResponse_Response {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_DisableComplianceResponse_)
	*cloned = *m

	cloned.DisableComplianceResponse = m.DisableComplianceResponse.Clone()
	return cloned
}
func (*ComplianceResponse_ApplyComplianceScanConfigResponse_) isComplianceResponse_Response() {}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse_) Clone() isComplianceResponse_Response {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_ApplyComplianceScanConfigResponse_)
	*cloned = *m

	cloned.ApplyComplianceScanConfigResponse = m.ApplyComplianceScanConfigResponse.Clone()
	return cloned
}
func (*ComplianceResponse_DeleteComplianceScanConfigResponse_) isComplianceResponse_Response() {}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse_) Clone() isComplianceResponse_Response {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_DeleteComplianceScanConfigResponse_)
	*cloned = *m

	cloned.DeleteComplianceScanConfigResponse = m.DeleteComplianceScanConfigResponse.Clone()
	return cloned
}

func (m *ComplianceResponse) GetResponse() isComplianceResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ComplianceResponse) GetEnableComplianceResponse() *ComplianceResponse_EnableComplianceResponse {
	if x, ok := m.GetResponse().(*ComplianceResponse_EnableComplianceResponse_); ok {
		return x.EnableComplianceResponse
	}
	return nil
}

func (m *ComplianceResponse) GetDisableComplianceResponse() *ComplianceResponse_DisableComplianceResponse {
	if x, ok := m.GetResponse().(*ComplianceResponse_DisableComplianceResponse_); ok {
		return x.DisableComplianceResponse
	}
	return nil
}

func (m *ComplianceResponse) GetApplyComplianceScanConfigResponse() *ComplianceResponse_ApplyComplianceScanConfigResponse {
	if x, ok := m.GetResponse().(*ComplianceResponse_ApplyComplianceScanConfigResponse_); ok {
		return x.ApplyComplianceScanConfigResponse
	}
	return nil
}

func (m *ComplianceResponse) GetDeleteComplianceScanConfigResponse() *ComplianceResponse_DeleteComplianceScanConfigResponse {
	if x, ok := m.GetResponse().(*ComplianceResponse_DeleteComplianceScanConfigResponse_); ok {
		return x.DeleteComplianceScanConfigResponse
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ComplianceResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ComplianceResponse_EnableComplianceResponse_)(nil),
		(*ComplianceResponse_DisableComplianceResponse_)(nil),
		(*ComplianceResponse_ApplyComplianceScanConfigResponse_)(nil),
		(*ComplianceResponse_DeleteComplianceScanConfigResponse_)(nil),
	}
}

func (m *ComplianceResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceResponse) Clone() *ComplianceResponse {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse)
	*cloned = *m

	if m.Response != nil {
		cloned.Response = m.Response.Clone()
	}
	return cloned
}

type ComplianceResponse_EnableComplianceResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*ComplianceResponse_EnableComplianceResponse_Error
	Payload              isComplianceResponse_EnableComplianceResponse_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *ComplianceResponse_EnableComplianceResponse) Reset() {
	*m = ComplianceResponse_EnableComplianceResponse{}
}
func (m *ComplianceResponse_EnableComplianceResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ComplianceResponse_EnableComplianceResponse) ProtoMessage() {}
func (*ComplianceResponse_EnableComplianceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{6, 0}
}
func (m *ComplianceResponse_EnableComplianceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceResponse_EnableComplianceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceResponse_EnableComplianceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceResponse_EnableComplianceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceResponse_EnableComplianceResponse.Merge(m, src)
}
func (m *ComplianceResponse_EnableComplianceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceResponse_EnableComplianceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceResponse_EnableComplianceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceResponse_EnableComplianceResponse proto.InternalMessageInfo

type isComplianceResponse_EnableComplianceResponse_Payload interface {
	isComplianceResponse_EnableComplianceResponse_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isComplianceResponse_EnableComplianceResponse_Payload
}

type ComplianceResponse_EnableComplianceResponse_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (*ComplianceResponse_EnableComplianceResponse_Error) isComplianceResponse_EnableComplianceResponse_Payload() {
}
func (m *ComplianceResponse_EnableComplianceResponse_Error) Clone() isComplianceResponse_EnableComplianceResponse_Payload {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_EnableComplianceResponse_Error)
	*cloned = *m

	return cloned
}

func (m *ComplianceResponse_EnableComplianceResponse) GetPayload() isComplianceResponse_EnableComplianceResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ComplianceResponse_EnableComplianceResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceResponse_EnableComplianceResponse) GetError() string {
	if x, ok := m.GetPayload().(*ComplianceResponse_EnableComplianceResponse_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ComplianceResponse_EnableComplianceResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ComplianceResponse_EnableComplianceResponse_Error)(nil),
	}
}

func (m *ComplianceResponse_EnableComplianceResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceResponse_EnableComplianceResponse) Clone() *ComplianceResponse_EnableComplianceResponse {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_EnableComplianceResponse)
	*cloned = *m

	if m.Payload != nil {
		cloned.Payload = m.Payload.Clone()
	}
	return cloned
}

type ComplianceResponse_DisableComplianceResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*ComplianceResponse_DisableComplianceResponse_Error
	Payload              isComplianceResponse_DisableComplianceResponse_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *ComplianceResponse_DisableComplianceResponse) Reset() {
	*m = ComplianceResponse_DisableComplianceResponse{}
}
func (m *ComplianceResponse_DisableComplianceResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ComplianceResponse_DisableComplianceResponse) ProtoMessage() {}
func (*ComplianceResponse_DisableComplianceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{6, 1}
}
func (m *ComplianceResponse_DisableComplianceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceResponse_DisableComplianceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceResponse_DisableComplianceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceResponse_DisableComplianceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceResponse_DisableComplianceResponse.Merge(m, src)
}
func (m *ComplianceResponse_DisableComplianceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceResponse_DisableComplianceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceResponse_DisableComplianceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceResponse_DisableComplianceResponse proto.InternalMessageInfo

type isComplianceResponse_DisableComplianceResponse_Payload interface {
	isComplianceResponse_DisableComplianceResponse_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isComplianceResponse_DisableComplianceResponse_Payload
}

type ComplianceResponse_DisableComplianceResponse_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (*ComplianceResponse_DisableComplianceResponse_Error) isComplianceResponse_DisableComplianceResponse_Payload() {
}
func (m *ComplianceResponse_DisableComplianceResponse_Error) Clone() isComplianceResponse_DisableComplianceResponse_Payload {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_DisableComplianceResponse_Error)
	*cloned = *m

	return cloned
}

func (m *ComplianceResponse_DisableComplianceResponse) GetPayload() isComplianceResponse_DisableComplianceResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ComplianceResponse_DisableComplianceResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceResponse_DisableComplianceResponse) GetError() string {
	if x, ok := m.GetPayload().(*ComplianceResponse_DisableComplianceResponse_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ComplianceResponse_DisableComplianceResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ComplianceResponse_DisableComplianceResponse_Error)(nil),
	}
}

func (m *ComplianceResponse_DisableComplianceResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceResponse_DisableComplianceResponse) Clone() *ComplianceResponse_DisableComplianceResponse {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_DisableComplianceResponse)
	*cloned = *m

	if m.Payload != nil {
		cloned.Payload = m.Payload.Clone()
	}
	return cloned
}

type ComplianceResponse_ApplyComplianceScanConfigResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*ComplianceResponse_ApplyComplianceScanConfigResponse_Error
	Payload              isComplianceResponse_ApplyComplianceScanConfigResponse_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                                                       `json:"-"`
	XXX_unrecognized     []byte                                                         `json:"-"`
	XXX_sizecache        int32                                                          `json:"-"`
}

func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) Reset() {
	*m = ComplianceResponse_ApplyComplianceScanConfigResponse{}
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ComplianceResponse_ApplyComplianceScanConfigResponse) ProtoMessage() {}
func (*ComplianceResponse_ApplyComplianceScanConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{6, 2}
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceResponse_ApplyComplianceScanConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceResponse_ApplyComplianceScanConfigResponse.Merge(m, src)
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceResponse_ApplyComplianceScanConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceResponse_ApplyComplianceScanConfigResponse proto.InternalMessageInfo

type isComplianceResponse_ApplyComplianceScanConfigResponse_Payload interface {
	isComplianceResponse_ApplyComplianceScanConfigResponse_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isComplianceResponse_ApplyComplianceScanConfigResponse_Payload
}

type ComplianceResponse_ApplyComplianceScanConfigResponse_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (*ComplianceResponse_ApplyComplianceScanConfigResponse_Error) isComplianceResponse_ApplyComplianceScanConfigResponse_Payload() {
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse_Error) Clone() isComplianceResponse_ApplyComplianceScanConfigResponse_Payload {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_ApplyComplianceScanConfigResponse_Error)
	*cloned = *m

	return cloned
}

func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) GetPayload() isComplianceResponse_ApplyComplianceScanConfigResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) GetError() string {
	if x, ok := m.GetPayload().(*ComplianceResponse_ApplyComplianceScanConfigResponse_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ComplianceResponse_ApplyComplianceScanConfigResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ComplianceResponse_ApplyComplianceScanConfigResponse_Error)(nil),
	}
}

func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) Clone() *ComplianceResponse_ApplyComplianceScanConfigResponse {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_ApplyComplianceScanConfigResponse)
	*cloned = *m

	if m.Payload != nil {
		cloned.Payload = m.Payload.Clone()
	}
	return cloned
}

type ComplianceResponse_DeleteComplianceScanConfigResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*ComplianceResponse_DeleteComplianceScanConfigResponse_Error
	Payload              isComplianceResponse_DeleteComplianceScanConfigResponse_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                                                        `json:"-"`
	XXX_unrecognized     []byte                                                          `json:"-"`
	XXX_sizecache        int32                                                           `json:"-"`
}

func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) Reset() {
	*m = ComplianceResponse_DeleteComplianceScanConfigResponse{}
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ComplianceResponse_DeleteComplianceScanConfigResponse) ProtoMessage() {}
func (*ComplianceResponse_DeleteComplianceScanConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{6, 3}
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceResponse_DeleteComplianceScanConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceResponse_DeleteComplianceScanConfigResponse.Merge(m, src)
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceResponse_DeleteComplianceScanConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceResponse_DeleteComplianceScanConfigResponse proto.InternalMessageInfo

type isComplianceResponse_DeleteComplianceScanConfigResponse_Payload interface {
	isComplianceResponse_DeleteComplianceScanConfigResponse_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isComplianceResponse_DeleteComplianceScanConfigResponse_Payload
}

type ComplianceResponse_DeleteComplianceScanConfigResponse_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (*ComplianceResponse_DeleteComplianceScanConfigResponse_Error) isComplianceResponse_DeleteComplianceScanConfigResponse_Payload() {
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse_Error) Clone() isComplianceResponse_DeleteComplianceScanConfigResponse_Payload {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_DeleteComplianceScanConfigResponse_Error)
	*cloned = *m

	return cloned
}

func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) GetPayload() isComplianceResponse_DeleteComplianceScanConfigResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) GetError() string {
	if x, ok := m.GetPayload().(*ComplianceResponse_DeleteComplianceScanConfigResponse_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ComplianceResponse_DeleteComplianceScanConfigResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ComplianceResponse_DeleteComplianceScanConfigResponse_Error)(nil),
	}
}

func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) Clone() *ComplianceResponse_DeleteComplianceScanConfigResponse {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceResponse_DeleteComplianceScanConfigResponse)
	*cloned = *m

	if m.Payload != nil {
		cloned.Payload = m.Payload.Clone()
	}
	return cloned
}

type ComplianceOperatorCheckResultV2 struct {
	Id                   string                                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CheckId              string                                       `protobuf:"bytes,2,opt,name=check_id,json=checkId,proto3" json:"check_id,omitempty"`
	CheckName            string                                       `protobuf:"bytes,3,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	ClusterId            string                                       `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Status               ComplianceOperatorCheckResultV2_CheckStatus  `protobuf:"varint,5,opt,name=status,proto3,enum=central.ComplianceOperatorCheckResultV2_CheckStatus" json:"status,omitempty"`
	Severity             ComplianceOperatorCheckResultV2_RuleSeverity `protobuf:"varint,6,opt,name=severity,proto3,enum=central.ComplianceOperatorCheckResultV2_RuleSeverity" json:"severity,omitempty"`
	Description          string                                       `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Instructions         string                                       `protobuf:"bytes,8,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Labels               map[string]string                            `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations          map[string]string                            `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedTime          *types.Timestamp                             `protobuf:"bytes,11,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	Standard             string                                       `protobuf:"bytes,12,opt,name=standard,proto3" json:"standard,omitempty"`
	Control              string                                       `protobuf:"bytes,13,opt,name=control,proto3" json:"control,omitempty"`
	ScanName             string                                       `protobuf:"bytes,14,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	SuiteName            string                                       `protobuf:"bytes,15,opt,name=suite_name,json=suiteName,proto3" json:"suite_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *ComplianceOperatorCheckResultV2) Reset()         { *m = ComplianceOperatorCheckResultV2{} }
func (m *ComplianceOperatorCheckResultV2) String() string { return proto.CompactTextString(m) }
func (*ComplianceOperatorCheckResultV2) ProtoMessage()    {}
func (*ComplianceOperatorCheckResultV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16c1ba535ff8dc9, []int{7}
}
func (m *ComplianceOperatorCheckResultV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceOperatorCheckResultV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceOperatorCheckResultV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceOperatorCheckResultV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceOperatorCheckResultV2.Merge(m, src)
}
func (m *ComplianceOperatorCheckResultV2) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceOperatorCheckResultV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceOperatorCheckResultV2.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceOperatorCheckResultV2 proto.InternalMessageInfo

func (m *ComplianceOperatorCheckResultV2) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceOperatorCheckResultV2) GetCheckId() string {
	if m != nil {
		return m.CheckId
	}
	return ""
}

func (m *ComplianceOperatorCheckResultV2) GetCheckName() string {
	if m != nil {
		return m.CheckName
	}
	return ""
}

func (m *ComplianceOperatorCheckResultV2) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ComplianceOperatorCheckResultV2) GetStatus() ComplianceOperatorCheckResultV2_CheckStatus {
	if m != nil {
		return m.Status
	}
	return ComplianceOperatorCheckResultV2_UNSET
}

func (m *ComplianceOperatorCheckResultV2) GetSeverity() ComplianceOperatorCheckResultV2_RuleSeverity {
	if m != nil {
		return m.Severity
	}
	return ComplianceOperatorCheckResultV2_UNSET_RULE_SEVERITY
}

func (m *ComplianceOperatorCheckResultV2) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComplianceOperatorCheckResultV2) GetInstructions() string {
	if m != nil {
		return m.Instructions
	}
	return ""
}

func (m *ComplianceOperatorCheckResultV2) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ComplianceOperatorCheckResultV2) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ComplianceOperatorCheckResultV2) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *ComplianceOperatorCheckResultV2) GetStandard() string {
	if m != nil {
		return m.Standard
	}
	return ""
}

func (m *ComplianceOperatorCheckResultV2) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *ComplianceOperatorCheckResultV2) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceOperatorCheckResultV2) GetSuiteName() string {
	if m != nil {
		return m.SuiteName
	}
	return ""
}

func (m *ComplianceOperatorCheckResultV2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceOperatorCheckResultV2) Clone() *ComplianceOperatorCheckResultV2 {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceOperatorCheckResultV2)
	*cloned = *m

	if m.Labels != nil {
		cloned.Labels = make(map[string]string, len(m.Labels))
		for k, v := range m.Labels {
			cloned.Labels[k] = v
		}
	}
	if m.Annotations != nil {
		cloned.Annotations = make(map[string]string, len(m.Annotations))
		for k, v := range m.Annotations {
			cloned.Annotations[k] = v
		}
	}
	cloned.CreatedTime = m.CreatedTime.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("central.ComplianceOperatorCheckResultV2_CheckStatus", ComplianceOperatorCheckResultV2_CheckStatus_name, ComplianceOperatorCheckResultV2_CheckStatus_value)
	proto.RegisterEnum("central.ComplianceOperatorCheckResultV2_RuleSeverity", ComplianceOperatorCheckResultV2_RuleSeverity_name, ComplianceOperatorCheckResultV2_RuleSeverity_value)
	proto.RegisterType((*ComplianceOperatorInfo)(nil), "central.ComplianceOperatorInfo")
	proto.RegisterType((*EnableComplianceRequest)(nil), "central.EnableComplianceRequest")
	proto.RegisterType((*DisableComplianceRequest)(nil), "central.DisableComplianceRequest")
	proto.RegisterType((*ApplyComplianceScanConfigRequest)(nil), "central.ApplyComplianceScanConfigRequest")
	proto.RegisterType((*ApplyComplianceScanConfigRequest_BaseScanSettings)(nil), "central.ApplyComplianceScanConfigRequest.BaseScanSettings")
	proto.RegisterType((*ApplyComplianceScanConfigRequest_OneTimeScan)(nil), "central.ApplyComplianceScanConfigRequest.OneTimeScan")
	proto.RegisterType((*ApplyComplianceScanConfigRequest_ScheduledScan)(nil), "central.ApplyComplianceScanConfigRequest.ScheduledScan")
	proto.RegisterType((*ApplyComplianceScanConfigRequest_RerunScheduledScan)(nil), "central.ApplyComplianceScanConfigRequest.RerunScheduledScan")
	proto.RegisterType((*DeleteComplianceScanConfigRequest)(nil), "central.DeleteComplianceScanConfigRequest")
	proto.RegisterType((*ComplianceRequest)(nil), "central.ComplianceRequest")
	proto.RegisterType((*ComplianceResponse)(nil), "central.ComplianceResponse")
	proto.RegisterType((*ComplianceResponse_EnableComplianceResponse)(nil), "central.ComplianceResponse.EnableComplianceResponse")
	proto.RegisterType((*ComplianceResponse_DisableComplianceResponse)(nil), "central.ComplianceResponse.DisableComplianceResponse")
	proto.RegisterType((*ComplianceResponse_ApplyComplianceScanConfigResponse)(nil), "central.ComplianceResponse.ApplyComplianceScanConfigResponse")
	proto.RegisterType((*ComplianceResponse_DeleteComplianceScanConfigResponse)(nil), "central.ComplianceResponse.DeleteComplianceScanConfigResponse")
	proto.RegisterType((*ComplianceOperatorCheckResultV2)(nil), "central.ComplianceOperatorCheckResultV2")
	proto.RegisterMapType((map[string]string)(nil), "central.ComplianceOperatorCheckResultV2.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "central.ComplianceOperatorCheckResultV2.LabelsEntry")
}

func init() {
	proto.RegisterFile("internalapi/central/compliance_operator.proto", fileDescriptor_b16c1ba535ff8dc9)
}

var fileDescriptor_b16c1ba535ff8dc9 = []byte{
	// 1426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xd6, 0xaf, 0x25, 0x8d, 0x64, 0x85, 0xde, 0x24, 0x0e, 0xad, 0x34, 0x8e, 0x2d, 0xa0, 0x45,
	0x12, 0xa0, 0x32, 0x9a, 0xfe, 0x25, 0x41, 0x13, 0x40, 0xb2, 0x95, 0x48, 0xa8, 0x2c, 0xb9, 0x94,
	0x1d, 0xa3, 0x09, 0x0a, 0x76, 0x4d, 0xae, 0x1d, 0x22, 0x34, 0x97, 0xdd, 0x5d, 0x25, 0xf0, 0xb1,
	0x40, 0x4f, 0xbd, 0x15, 0xe8, 0xa1, 0xf7, 0x3e, 0x45, 0x5f, 0xa0, 0xe8, 0xb1, 0x8f, 0x50, 0x24,
	0x2f, 0xd1, 0x63, 0xb1, 0xbb, 0x94, 0x44, 0xeb, 0xc7, 0x76, 0x02, 0xf4, 0xc6, 0x9d, 0x6f, 0xe6,
	0x9b, 0xe1, 0xcc, 0x70, 0x76, 0x08, 0x1f, 0x7b, 0x81, 0x20, 0x2c, 0xc0, 0x3e, 0x0e, 0xbd, 0x0d,
	0x87, 0x04, 0x82, 0x61, 0x7f, 0xc3, 0xa1, 0xc7, 0xa1, 0xef, 0xe1, 0xc0, 0x21, 0x36, 0x0d, 0x09,
	0xc3, 0x82, 0xb2, 0x5a, 0xc8, 0xa8, 0xa0, 0x28, 0x17, 0xa9, 0x54, 0x6e, 0x1e, 0x51, 0x7a, 0xe4,
	0x93, 0x0d, 0x25, 0x3e, 0x18, 0x1c, 0x6e, 0x08, 0xef, 0x98, 0x70, 0x81, 0x8f, 0x43, 0xad, 0x59,
	0xfd, 0x31, 0x05, 0xcb, 0x9b, 0x23, 0x9e, 0x5e, 0x44, 0xd3, 0x0e, 0x0e, 0x29, 0x32, 0x21, 0xf7,
	0x8a, 0x30, 0xee, 0xd1, 0xc0, 0x4c, 0xae, 0x25, 0x6f, 0x15, 0xac, 0xe1, 0x11, 0x7d, 0x00, 0x85,
	0x00, 0x1f, 0x13, 0x1e, 0x62, 0x87, 0x98, 0x29, 0x85, 0x8d, 0x05, 0xa8, 0x06, 0x48, 0x50, 0x81,
	0x7d, 0xdb, 0x25, 0xdc, 0x63, 0xc4, 0xb5, 0x43, 0xea, 0x72, 0x33, 0xbd, 0x96, 0xbc, 0x95, 0x6d,
	0x25, 0x2c, 0x43, 0x61, 0x5b, 0x1a, 0xda, 0xa1, 0x2e, 0x47, 0x77, 0x40, 0xcb, 0x6c, 0x46, 0xb0,
	0x7b, 0xa2, 0xb5, 0x33, 0x4a, 0x3b, 0x69, 0x95, 0x15, 0x62, 0x49, 0x40, 0xe9, 0xae, 0x43, 0x89,
	0x0b, 0x2c, 0x06, 0xdc, 0x26, 0x8c, 0x51, 0x66, 0x66, 0x95, 0xf3, 0xa2, 0x96, 0x35, 0xa5, 0xa8,
	0x61, 0xc2, 0xf2, 0xb4, 0x7b, 0x9b, 0x86, 0xa2, 0xb1, 0x0c, 0x57, 0x26, 0x1d, 0x49, 0x79, 0xf5,
	0x36, 0x5c, 0x6b, 0x06, 0xf8, 0xc0, 0x27, 0xe3, 0x44, 0x58, 0xe4, 0x87, 0x01, 0xe1, 0x02, 0x95,
	0x21, 0xe5, 0xb9, 0xd1, 0xeb, 0xa7, 0x3c, 0xb7, 0x7a, 0x07, 0xcc, 0x2d, 0x8f, 0x5f, 0x4c, 0xf7,
	0xcf, 0x1c, 0xac, 0xd5, 0xc3, 0xd0, 0x3f, 0x19, 0xab, 0xf6, 0x1d, 0x1c, 0x6c, 0xd2, 0xe0, 0xd0,
	0x3b, 0x9a, 0x63, 0x84, 0x9e, 0xc3, 0x22, 0x0d, 0x88, 0x2d, 0xcb, 0x64, 0x73, 0x07, 0x07, 0x2a,
	0xbd, 0xc5, 0xbb, 0x9f, 0xd7, 0xa2, 0x8a, 0xd6, 0xce, 0x63, 0xac, 0xf5, 0x02, 0xb2, 0xeb, 0x1d,
	0x2b, 0xa0, 0x95, 0xb0, 0x8a, 0x74, 0x7c, 0x44, 0xdf, 0x43, 0x99, 0x3b, 0x2f, 0x88, 0x3b, 0xf0,
	0x89, 0xab, 0xd9, 0xd3, 0x8a, 0xfd, 0xcb, 0x8b, 0xb3, 0xf7, 0x87, 0xf6, 0x11, 0xff, 0x22, 0x8f,
	0x0b, 0xd0, 0x77, 0x00, 0x8c, 0xb0, 0x41, 0xa0, 0xd9, 0x33, 0x8a, 0xfd, 0xab, 0x8b, 0xb3, 0x5b,
	0xd2, 0x76, 0xd2, 0x45, 0x81, 0x69, 0x29, 0x0e, 0x2a, 0x7f, 0xa4, 0xc0, 0x68, 0x60, 0xae, 0x2c,
	0xfb, 0x44, 0x08, 0x2f, 0x38, 0xe2, 0x68, 0x0d, 0x4a, 0xee, 0x81, 0xcd, 0x88, 0x43, 0x99, 0x6b,
	0x8f, 0x92, 0x09, 0xee, 0x81, 0xa5, 0x44, 0x6d, 0x17, 0x5d, 0x87, 0x82, 0x8c, 0xc7, 0x96, 0x3d,
	0x1a, 0xf5, 0x6b, 0x5e, 0x0a, 0xba, 0xf8, 0x98, 0xa0, 0x0a, 0xe4, 0x43, 0x46, 0x0f, 0x3d, 0x9f,
	0xc8, 0x26, 0x4d, 0x4b, 0x6c, 0x78, 0x46, 0x35, 0xb8, 0xcc, 0x5f, 0xd0, 0xd7, 0x76, 0x40, 0x85,
	0x8d, 0xc3, 0xd0, 0xf7, 0x1c, 0x59, 0x7a, 0xf5, 0x5e, 0x79, 0x6b, 0x49, 0x42, 0x5d, 0x2a, 0xea,
	0x23, 0x00, 0xdd, 0x02, 0x83, 0x0b, 0xe6, 0x39, 0xc2, 0x0e, 0xa8, 0x1b, 0x15, 0x30, 0xab, 0x94,
	0xcb, 0x5a, 0xde, 0xa5, 0xae, 0x2e, 0xc5, 0x17, 0x70, 0x0d, 0x0f, 0x04, 0x55, 0xac, 0x27, 0x36,
	0x23, 0xc7, 0xc4, 0xf5, 0xb0, 0xf0, 0x68, 0xc0, 0xcd, 0x05, 0x65, 0x70, 0x55, 0xc2, 0x2a, 0x61,
	0x56, 0x0c, 0x44, 0xf7, 0xc0, 0x54, 0x76, 0x83, 0xd0, 0xc5, 0x82, 0x9c, 0x36, 0xcc, 0x29, 0xc3,
	0x65, 0x89, 0xef, 0x29, 0x38, 0x6e, 0x59, 0x09, 0xa0, 0x18, 0x6b, 0x0d, 0x64, 0xc3, 0xa2, 0xca,
	0x09, 0x8f, 0xd2, 0xa8, 0xd2, 0x56, 0xbc, 0xfb, 0xe0, 0xe2, 0xc5, 0x9a, 0x2c, 0x84, 0x55, 0xe2,
	0xb1, 0x53, 0xe5, 0xa7, 0x24, 0x2c, 0x9e, 0x2a, 0xe5, 0xff, 0xee, 0x12, 0x21, 0xc8, 0x38, 0x8c,
	0x06, 0x51, 0x89, 0xd5, 0x73, 0xe5, 0x13, 0x40, 0xd3, 0x5d, 0x75, 0xba, 0x23, 0x92, 0xa7, 0x3b,
	0xa2, 0x51, 0x06, 0x45, 0x6b, 0x33, 0xed, 0xb5, 0xfa, 0x04, 0xd6, 0xb7, 0x88, 0x4f, 0x04, 0x79,
	0x97, 0x0f, 0x19, 0x41, 0x26, 0xd6, 0x6e, 0xea, 0xb9, 0xfa, 0x6f, 0x0a, 0x96, 0xa6, 0xe7, 0x46,
	0x0f, 0x96, 0x88, 0x1a, 0x3f, 0xf6, 0x78, 0xa0, 0x47, 0xa9, 0x59, 0x1b, 0xa5, 0x66, 0xce, 0x80,
	0x92, 0x03, 0x95, 0x4c, 0x40, 0xc8, 0x02, 0xe4, 0xea, 0x21, 0x15, 0x67, 0xd4, 0x83, 0x64, 0x7d,
	0xc4, 0x38, 0x6f, 0x8e, 0xb5, 0x12, 0xd6, 0x92, 0x3b, 0x89, 0xa1, 0x7d, 0x58, 0xd2, 0xad, 0xaa,
	0x32, 0xe3, 0xa8, 0x57, 0x8f, 0xa6, 0xc7, 0xed, 0x0b, 0xd7, 0xaf, 0x95, 0xb0, 0x2e, 0x29, 0x96,
	0x31, 0x82, 0x9e, 0x01, 0x72, 0x55, 0x72, 0x4f, 0x31, 0xeb, 0xc9, 0x71, 0x67, 0x1c, 0xec, 0x79,
	0xf9, 0x97, 0x89, 0xd0, 0x3c, 0x63, 0xa8, 0x51, 0x80, 0xdc, 0xb0, 0x86, 0x3f, 0xe7, 0x00, 0xc5,
	0x5f, 0x95, 0x87, 0x34, 0xe0, 0x04, 0x09, 0xa8, 0x4c, 0xe5, 0xde, 0x66, 0x11, 0x1a, 0x15, 0xe1,
	0xb3, 0x51, 0x14, 0xd3, 0x04, 0x33, 0xea, 0xa2, 0x81, 0x56, 0xc2, 0x32, 0xc9, 0x1c, 0x0c, 0xbd,
	0x86, 0xeb, 0xd3, 0x05, 0x1a, 0xbb, 0x9d, 0x1c, 0xf9, 0x33, 0xdc, 0xce, 0x28, 0xde, 0xc8, 0xef,
	0x8a, 0x3b, 0x0f, 0x44, 0xbf, 0x24, 0xe1, 0x43, 0x5d, 0xc6, 0x98, 0xdf, 0x58, 0xde, 0xc7, 0x31,
	0xe8, 0xd2, 0x3e, 0x3c, 0x2b, 0x86, 0x33, 0xaa, 0x3d, 0x8a, 0x65, 0x1d, 0x9f, 0xa7, 0x84, 0x7e,
	0x4d, 0xc2, 0x47, 0x51, 0x07, 0x9c, 0x17, 0x94, 0xee, 0x8a, 0x47, 0x67, 0x26, 0xe6, 0x8c, 0x46,
	0x19, 0x45, 0x55, 0x75, 0xcf, 0xd5, 0xaa, 0x6c, 0x83, 0x39, 0xaf, 0xb6, 0x53, 0xdf, 0xfa, 0x32,
	0x64, 0xf5, 0x3a, 0xa2, 0x3e, 0xf6, 0x56, 0xc2, 0xd2, 0x47, 0xd9, 0x7f, 0x21, 0x3e, 0xf1, 0x29,
	0x76, 0x2b, 0x5d, 0x58, 0x99, 0x5b, 0xb3, 0xf7, 0xe1, 0x7b, 0x0a, 0xeb, 0xe7, 0xe6, 0xff, 0x7d,
	0x78, 0xf7, 0xa1, 0x7a, 0x7e, 0x0a, 0xdf, 0x83, 0xb8, 0x01, 0x90, 0x1f, 0xd6, 0xb1, 0xfa, 0x36,
	0x0f, 0x37, 0xa7, 0x97, 0xce, 0xcd, 0x17, 0xc4, 0x79, 0x69, 0x11, 0x3e, 0xf0, 0xc5, 0xd3, 0xbb,
	0x53, 0x2e, 0x56, 0x20, 0xef, 0x48, 0x05, 0x79, 0xc3, 0xeb, 0x99, 0x9a, 0x53, 0xe7, 0xb6, 0x8b,
	0x6e, 0x00, 0x68, 0x48, 0x0d, 0xdc, 0xb4, 0xde, 0x47, 0x95, 0x44, 0x5d, 0xf0, 0x12, 0xf6, 0x07,
	0x5c, 0x10, 0x26, 0x6d, 0x33, 0x11, 0xac, 0x25, 0x6d, 0x17, 0x75, 0x60, 0x41, 0xaf, 0x8f, 0xea,
	0xa6, 0x2e, 0xcf, 0xfc, 0xdc, 0x67, 0x86, 0x58, 0x53, 0xa7, 0xbe, 0xb2, 0xb5, 0x22, 0x0e, 0xf4,
	0x0d, 0xe4, 0x39, 0x79, 0x45, 0x98, 0x27, 0x4e, 0xd4, 0x45, 0x5e, 0x9e, 0xf9, 0x1d, 0xcf, 0xe6,
	0xb3, 0x06, 0x3e, 0xe9, 0x47, 0xc6, 0xd6, 0x88, 0x06, 0xad, 0x41, 0xd1, 0x25, 0xdc, 0x61, 0x5e,
	0x28, 0x2f, 0x72, 0x75, 0xcb, 0x17, 0xac, 0xb8, 0x08, 0x55, 0xa1, 0xe4, 0x05, 0x5c, 0xb0, 0x81,
	0xa3, 0x17, 0x81, 0xbc, 0x52, 0x39, 0x25, 0x93, 0xaf, 0xe9, 0xe3, 0x03, 0xe2, 0x73, 0xb3, 0xb0,
	0x96, 0x9e, 0x33, 0xd5, 0x66, 0x87, 0xd5, 0x51, 0x66, 0xcd, 0x40, 0xb0, 0x13, 0x2b, 0xe2, 0x40,
	0xcf, 0xa1, 0x88, 0x83, 0x80, 0x8a, 0x68, 0xf3, 0x00, 0x45, 0x79, 0xff, 0xc2, 0x94, 0xf5, 0xb1,
	0xad, 0xe6, 0x8d, 0xb3, 0xa1, 0x87, 0x50, 0x72, 0x18, 0xc1, 0x82, 0xb8, 0x6a, 0x0f, 0x36, 0x8b,
	0xea, 0xb3, 0xaf, 0xd4, 0xf4, 0xbf, 0x4c, 0x6d, 0xf8, 0x2f, 0x53, 0xdb, 0x1d, 0xfe, 0xcb, 0x58,
	0xc5, 0x48, 0x5f, 0x4a, 0xe4, 0x42, 0xc7, 0x05, 0x0e, 0x5c, 0xcc, 0x5c, 0xb3, 0x14, 0x5d, 0xed,
	0xd1, 0x59, 0xfe, 0xd3, 0x38, 0x34, 0x10, 0x8c, 0xfa, 0xe6, 0x62, 0xd4, 0x44, 0xfa, 0x78, 0x7a,
	0x23, 0x28, 0x4f, 0xec, 0x88, 0x37, 0x00, 0xf8, 0xc0, 0x13, 0x44, 0xa3, 0x97, 0x74, 0x0b, 0x29,
	0x89, 0x84, 0x2b, 0xf7, 0xa1, 0x18, 0x4b, 0x12, 0x32, 0x20, 0xfd, 0x92, 0x9c, 0x44, 0xbd, 0x2b,
	0x1f, 0xd1, 0x15, 0xc8, 0xbe, 0xc2, 0xfe, 0x60, 0xb8, 0x0d, 0xe8, 0xc3, 0x83, 0xd4, 0xbd, 0x64,
	0xe5, 0x11, 0x18, 0x93, 0xc9, 0x78, 0x17, 0xfb, 0x2a, 0x87, 0x62, 0xac, 0x0d, 0x51, 0x01, 0xb2,
	0x7b, 0xdd, 0x7e, 0x73, 0xd7, 0x48, 0xa0, 0x3c, 0x64, 0x76, 0xea, 0xfd, 0xbe, 0x91, 0x94, 0x4f,
	0x8f, 0xeb, 0xed, 0x8e, 0x91, 0x92, 0x70, 0xd3, 0xb2, 0x7a, 0x96, 0x91, 0x96, 0xc2, 0x76, 0xf7,
	0x71, 0xcf, 0xc8, 0x20, 0x80, 0x85, 0xed, 0x7a, 0x77, 0xaf, 0xde, 0x31, 0xb2, 0x08, 0x41, 0xb9,
	0xdb, 0xdb, 0xb5, 0xeb, 0x3b, 0x3b, 0x9d, 0xf6, 0x66, 0xbd, 0xd1, 0x69, 0x1a, 0x0b, 0xc8, 0x80,
	0x52, 0xbb, 0xbb, 0xd9, 0xeb, 0xf6, 0xdb, 0xfd, 0xdd, 0x66, 0x77, 0xd7, 0xc8, 0x55, 0x7f, 0x4f,
	0x42, 0x29, 0xde, 0xac, 0xe8, 0x1a, 0x5c, 0x56, 0x6e, 0x6d, 0x6b, 0xaf, 0xd3, 0xb4, 0xfb, 0xcd,
	0xa7, 0x4d, 0xab, 0xbd, 0xfb, 0xad, 0x91, 0x40, 0x2b, 0x70, 0x75, 0xaf, 0xfb, 0x75, 0xb7, 0xb7,
	0xdf, 0x9d, 0x80, 0x92, 0x68, 0x19, 0x90, 0x0c, 0x60, 0x42, 0x9e, 0x42, 0x57, 0x61, 0xa9, 0xd3,
	0xdb, 0x9f, 0x10, 0xa7, 0x91, 0x09, 0x57, 0xb6, 0x9b, 0x5b, 0xed, 0xbd, 0xed, 0x09, 0x24, 0x23,
	0x89, 0x5a, 0xed, 0x27, 0xad, 0x09, 0x79, 0xb6, 0xb1, 0xf2, 0xd7, 0x9b, 0xd5, 0xe4, 0xdf, 0x6f,
	0x56, 0x93, 0xff, 0xbc, 0x59, 0x4d, 0xfe, 0xf6, 0x76, 0x35, 0xf1, 0x6c, 0xf8, 0x5b, 0x7c, 0xb0,
	0xa0, 0x7a, 0xe8, 0xd3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x98, 0xe4, 0xe1, 0xe1, 0x57, 0x0f,
	0x00, 0x00,
}

func (m *ComplianceOperatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceOperatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceOperatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StatusError) > 0 {
		i -= len(m.StatusError)
		copy(dAtA[i:], m.StatusError)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.StatusError)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TotalReadyPodsOpt != nil {
		{
			size := m.TotalReadyPodsOpt.Size()
			i -= size
			if _, err := m.TotalReadyPodsOpt.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TotalDesiredPodsOpt != nil {
		{
			size := m.TotalDesiredPodsOpt.Size()
			i -= size
			if _, err := m.TotalDesiredPodsOpt.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceOperatorInfo_TotalDesiredPods) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceOperatorInfo_TotalDesiredPods) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintComplianceOperator(dAtA, i, uint64(m.TotalDesiredPods))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ComplianceOperatorInfo_TotalReadyPods) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceOperatorInfo_TotalReadyPods) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintComplianceOperator(dAtA, i, uint64(m.TotalReadyPods))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *EnableComplianceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableComplianceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableComplianceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisableComplianceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisableComplianceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisableComplianceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplyComplianceScanConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyComplianceScanConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyComplianceScanConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ScanRequest != nil {
		{
			size := m.ScanRequest.Size()
			i -= size
			if _, err := m.ScanRequest.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplyComplianceScanConfigRequest_OneTimeScan_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyComplianceScanConfigRequest_OneTimeScan_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneTimeScan != nil {
		{
			size, err := m.OneTimeScan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ApplyComplianceScanConfigRequest_ScheduledScan_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyComplianceScanConfigRequest_ScheduledScan_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScheduledScan != nil {
		{
			size, err := m.ScheduledScan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ApplyComplianceScanConfigRequest_RerunScan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyComplianceScanConfigRequest_RerunScan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RerunScan != nil {
		{
			size, err := m.RerunScan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AutoUpdateRemediations {
		i--
		if m.AutoUpdateRemediations {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.AutoApplyRemediations {
		i--
		if m.AutoApplyRemediations {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.StrictNodeScan {
		i--
		if m.StrictNodeScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ShowNotApplicable {
		i--
		if m.ShowNotApplicable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Profiles[iNdEx])
			copy(dAtA[i:], m.Profiles[iNdEx])
			i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Profiles[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DbRecordId) > 0 {
		i -= len(m.DbRecordId)
		copy(dAtA[i:], m.DbRecordId)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.DbRecordId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplyComplianceScanConfigRequest_OneTimeScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyComplianceScanConfigRequest_OneTimeScan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyComplianceScanConfigRequest_OneTimeScan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ScanSettings != nil {
		{
			size, err := m.ScanSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplyComplianceScanConfigRequest_ScheduledScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyComplianceScanConfigRequest_ScheduledScan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyComplianceScanConfigRequest_ScheduledScan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cron) > 0 {
		i -= len(m.Cron)
		copy(dAtA[i:], m.Cron)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Cron)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScanSettings != nil {
		{
			size, err := m.ScanSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteComplianceScanConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteComplianceScanConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteComplianceScanConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceRequest_EnableCompliance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceRequest_EnableCompliance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableCompliance != nil {
		{
			size, err := m.EnableCompliance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ComplianceRequest_DisableCompliance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceRequest_DisableCompliance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableCompliance != nil {
		{
			size, err := m.DisableCompliance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ComplianceRequest_ApplyScanConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceRequest_ApplyScanConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApplyScanConfig != nil {
		{
			size, err := m.ApplyScanConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ComplianceRequest_DeleteScanConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceRequest_DeleteScanConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteScanConfig != nil {
		{
			size, err := m.DeleteScanConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ComplianceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Response != nil {
		{
			size := m.Response.Size()
			i -= size
			if _, err := m.Response.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceResponse_EnableComplianceResponse_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_EnableComplianceResponse_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableComplianceResponse != nil {
		{
			size, err := m.EnableComplianceResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ComplianceResponse_DisableComplianceResponse_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_DisableComplianceResponse_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableComplianceResponse != nil {
		{
			size, err := m.DisableComplianceResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_ApplyComplianceScanConfigResponse_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApplyComplianceScanConfigResponse != nil {
		{
			size, err := m.ApplyComplianceScanConfigResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_DeleteComplianceScanConfigResponse_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteComplianceScanConfigResponse != nil {
		{
			size, err := m.DeleteComplianceScanConfigResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ComplianceResponse_EnableComplianceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceResponse_EnableComplianceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_EnableComplianceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceResponse_EnableComplianceResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_EnableComplianceResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Error)
	copy(dAtA[i:], m.Error)
	i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Error)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ComplianceResponse_DisableComplianceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceResponse_DisableComplianceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_DisableComplianceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceResponse_DisableComplianceResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_DisableComplianceResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Error)
	copy(dAtA[i:], m.Error)
	i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Error)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceResponse_ApplyComplianceScanConfigResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_ApplyComplianceScanConfigResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Error)
	copy(dAtA[i:], m.Error)
	i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Error)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceResponse_DeleteComplianceScanConfigResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceResponse_DeleteComplianceScanConfigResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Error)
	copy(dAtA[i:], m.Error)
	i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Error)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ComplianceOperatorCheckResultV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceOperatorCheckResultV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceOperatorCheckResultV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SuiteName) > 0 {
		i -= len(m.SuiteName)
		copy(dAtA[i:], m.SuiteName)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.SuiteName)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Standard) > 0 {
		i -= len(m.Standard)
		copy(dAtA[i:], m.Standard)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Standard)))
		i--
		dAtA[i] = 0x62
	}
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceOperator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintComplianceOperator(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintComplianceOperator(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintComplianceOperator(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintComplianceOperator(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintComplianceOperator(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintComplianceOperator(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Instructions) > 0 {
		i -= len(m.Instructions)
		copy(dAtA[i:], m.Instructions)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Instructions)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Severity != 0 {
		i = encodeVarintComplianceOperator(dAtA, i, uint64(m.Severity))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintComplianceOperator(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CheckName) > 0 {
		i -= len(m.CheckName)
		copy(dAtA[i:], m.CheckName)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.CheckName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CheckId) > 0 {
		i -= len(m.CheckId)
		copy(dAtA[i:], m.CheckId)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.CheckId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceOperator(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceOperator(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceOperator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComplianceOperatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.TotalDesiredPodsOpt != nil {
		n += m.TotalDesiredPodsOpt.Size()
	}
	if m.TotalReadyPodsOpt != nil {
		n += m.TotalReadyPodsOpt.Size()
	}
	l = len(m.StatusError)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceOperatorInfo_TotalDesiredPods) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovComplianceOperator(uint64(m.TotalDesiredPods))
	return n
}
func (m *ComplianceOperatorInfo_TotalReadyPods) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovComplianceOperator(uint64(m.TotalReadyPods))
	return n
}
func (m *EnableComplianceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DisableComplianceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyComplianceScanConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.ScanRequest != nil {
		n += m.ScanRequest.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyComplianceScanConfigRequest_OneTimeScan_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneTimeScan != nil {
		l = m.OneTimeScan.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	return n
}
func (m *ApplyComplianceScanConfigRequest_ScheduledScan_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledScan != nil {
		l = m.ScheduledScan.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	return n
}
func (m *ApplyComplianceScanConfigRequest_RerunScan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RerunScan != nil {
		l = m.RerunScan.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	return n
}
func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DbRecordId)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if len(m.Profiles) > 0 {
		for _, s := range m.Profiles {
			l = len(s)
			n += 1 + l + sovComplianceOperator(uint64(l))
		}
	}
	if m.ShowNotApplicable {
		n += 2
	}
	if m.StrictNodeScan {
		n += 2
	}
	if m.AutoApplyRemediations {
		n += 2
	}
	if m.AutoUpdateRemediations {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyComplianceScanConfigRequest_OneTimeScan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScanSettings != nil {
		l = m.ScanSettings.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyComplianceScanConfigRequest_ScheduledScan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScanSettings != nil {
		l = m.ScanSettings.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.Cron)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteComplianceScanConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceRequest_EnableCompliance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableCompliance != nil {
		l = m.EnableCompliance.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	return n
}
func (m *ComplianceRequest_DisableCompliance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableCompliance != nil {
		l = m.DisableCompliance.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	return n
}
func (m *ComplianceRequest_ApplyScanConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplyScanConfig != nil {
		l = m.ApplyScanConfig.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	return n
}
func (m *ComplianceRequest_DeleteScanConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteScanConfig != nil {
		l = m.DeleteScanConfig.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	return n
}
func (m *ComplianceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceResponse_EnableComplianceResponse_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableComplianceResponse != nil {
		l = m.EnableComplianceResponse.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	return n
}
func (m *ComplianceResponse_DisableComplianceResponse_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableComplianceResponse != nil {
		l = m.DisableComplianceResponse.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	return n
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplyComplianceScanConfigResponse != nil {
		l = m.ApplyComplianceScanConfigResponse.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	return n
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteComplianceScanConfigResponse != nil {
		l = m.DeleteComplianceScanConfigResponse.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	return n
}
func (m *ComplianceResponse_EnableComplianceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceResponse_EnableComplianceResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	n += 1 + l + sovComplianceOperator(uint64(l))
	return n
}
func (m *ComplianceResponse_DisableComplianceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceResponse_DisableComplianceResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	n += 1 + l + sovComplianceOperator(uint64(l))
	return n
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceResponse_ApplyComplianceScanConfigResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	n += 1 + l + sovComplianceOperator(uint64(l))
	return n
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceResponse_DeleteComplianceScanConfigResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	n += 1 + l + sovComplianceOperator(uint64(l))
	return n
}
func (m *ComplianceOperatorCheckResultV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.CheckId)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.CheckName)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovComplianceOperator(uint64(m.Status))
	}
	if m.Severity != 0 {
		n += 1 + sovComplianceOperator(uint64(m.Severity))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.Instructions)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovComplianceOperator(uint64(len(k))) + 1 + len(v) + sovComplianceOperator(uint64(len(v)))
			n += mapEntrySize + 1 + sovComplianceOperator(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovComplianceOperator(uint64(len(k))) + 1 + len(v) + sovComplianceOperator(uint64(len(v)))
			n += mapEntrySize + 1 + sovComplianceOperator(uint64(mapEntrySize))
		}
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.Standard)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	l = len(m.SuiteName)
	if l > 0 {
		n += 1 + l + sovComplianceOperator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceOperator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceOperator(x uint64) (n int) {
	return sovComplianceOperator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComplianceOperatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceOperatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceOperatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDesiredPods", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDesiredPodsOpt = &ComplianceOperatorInfo_TotalDesiredPods{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReadyPods", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalReadyPodsOpt = &ComplianceOperatorInfo_TotalReadyPods{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableComplianceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableComplianceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableComplianceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisableComplianceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisableComplianceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisableComplianceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyComplianceScanConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyComplianceScanConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyComplianceScanConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneTimeScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplyComplianceScanConfigRequest_OneTimeScan{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScanRequest = &ApplyComplianceScanConfigRequest_OneTimeScan_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplyComplianceScanConfigRequest_ScheduledScan{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScanRequest = &ApplyComplianceScanConfigRequest_ScheduledScan_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RerunScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplyComplianceScanConfigRequest_RerunScheduledScan{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScanRequest = &ApplyComplianceScanConfigRequest_RerunScan{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyComplianceScanConfigRequest_BaseScanSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseScanSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseScanSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbRecordId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbRecordId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowNotApplicable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowNotApplicable = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrictNodeScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StrictNodeScan = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoApplyRemediations", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoApplyRemediations = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpdateRemediations", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoUpdateRemediations = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyComplianceScanConfigRequest_OneTimeScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneTimeScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneTimeScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanSettings == nil {
				m.ScanSettings = &ApplyComplianceScanConfigRequest_BaseScanSettings{}
			}
			if err := m.ScanSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyComplianceScanConfigRequest_ScheduledScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanSettings == nil {
				m.ScanSettings = &ApplyComplianceScanConfigRequest_BaseScanSettings{}
			}
			if err := m.ScanSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cron", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cron = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyComplianceScanConfigRequest_RerunScheduledScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RerunScheduledScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RerunScheduledScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteComplianceScanConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteComplianceScanConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteComplianceScanConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCompliance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnableComplianceRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &ComplianceRequest_EnableCompliance{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableCompliance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisableComplianceRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &ComplianceRequest_DisableCompliance{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyScanConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplyComplianceScanConfigRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &ComplianceRequest_ApplyScanConfig{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteScanConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteComplianceScanConfigRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &ComplianceRequest_DeleteScanConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableComplianceResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ComplianceResponse_EnableComplianceResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ComplianceResponse_EnableComplianceResponse_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableComplianceResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ComplianceResponse_DisableComplianceResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ComplianceResponse_DisableComplianceResponse_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyComplianceScanConfigResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ComplianceResponse_ApplyComplianceScanConfigResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ComplianceResponse_ApplyComplianceScanConfigResponse_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteComplianceScanConfigResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ComplianceResponse_DeleteComplianceScanConfigResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ComplianceResponse_DeleteComplianceScanConfigResponse_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceResponse_EnableComplianceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableComplianceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableComplianceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = &ComplianceResponse_EnableComplianceResponse_Error{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceResponse_DisableComplianceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisableComplianceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisableComplianceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = &ComplianceResponse_DisableComplianceResponse_Error{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceResponse_ApplyComplianceScanConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyComplianceScanConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyComplianceScanConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = &ComplianceResponse_ApplyComplianceScanConfigResponse_Error{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceResponse_DeleteComplianceScanConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteComplianceScanConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteComplianceScanConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = &ComplianceResponse_DeleteComplianceScanConfigResponse_Error{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceOperatorCheckResultV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceOperatorCheckResultV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceOperatorCheckResultV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ComplianceOperatorCheckResultV2_CheckStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= ComplianceOperatorCheckResultV2_RuleSeverity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowComplianceOperator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowComplianceOperator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthComplianceOperator
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthComplianceOperator
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowComplianceOperator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthComplianceOperator
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthComplianceOperator
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipComplianceOperator(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthComplianceOperator
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowComplianceOperator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowComplianceOperator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthComplianceOperator
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthComplianceOperator
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowComplianceOperator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthComplianceOperator
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthComplianceOperator
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipComplianceOperator(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthComplianceOperator
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceOperator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceOperator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceOperator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceOperator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceOperator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceOperator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceOperator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceOperator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceOperator = fmt.Errorf("proto: unexpected end of group")
)
