// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/central/sensor_upgrade_ctrl_iservice.proto

package central

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpgradeCheckInFromUpgraderRequest struct {
	ClusterId         string `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	UpgradeProcessId  string `protobuf:"bytes,1,opt,name=upgrade_process_id,json=upgradeProcessId,proto3" json:"upgrade_process_id,omitempty"`
	CurrentWorkflow   string `protobuf:"bytes,2,opt,name=current_workflow,json=currentWorkflow,proto3" json:"current_workflow,omitempty"`
	LastExecutedStage string `protobuf:"bytes,3,opt,name=last_executed_stage,json=lastExecutedStage,proto3" json:"last_executed_stage,omitempty"`
	// The error from the last executed stage, if any.
	// If this is empty, that implies that the last stage
	// was succesfully executed.
	LastExecutedStageError string   `protobuf:"bytes,4,opt,name=last_executed_stage_error,json=lastExecutedStageError,proto3" json:"last_executed_stage_error,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *UpgradeCheckInFromUpgraderRequest) Reset()         { *m = UpgradeCheckInFromUpgraderRequest{} }
func (m *UpgradeCheckInFromUpgraderRequest) String() string { return proto.CompactTextString(m) }
func (*UpgradeCheckInFromUpgraderRequest) ProtoMessage()    {}
func (*UpgradeCheckInFromUpgraderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c23719610e3bb4d, []int{0}
}
func (m *UpgradeCheckInFromUpgraderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeCheckInFromUpgraderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeCheckInFromUpgraderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeCheckInFromUpgraderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeCheckInFromUpgraderRequest.Merge(m, src)
}
func (m *UpgradeCheckInFromUpgraderRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeCheckInFromUpgraderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeCheckInFromUpgraderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeCheckInFromUpgraderRequest proto.InternalMessageInfo

func (m *UpgradeCheckInFromUpgraderRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *UpgradeCheckInFromUpgraderRequest) GetUpgradeProcessId() string {
	if m != nil {
		return m.UpgradeProcessId
	}
	return ""
}

func (m *UpgradeCheckInFromUpgraderRequest) GetCurrentWorkflow() string {
	if m != nil {
		return m.CurrentWorkflow
	}
	return ""
}

func (m *UpgradeCheckInFromUpgraderRequest) GetLastExecutedStage() string {
	if m != nil {
		return m.LastExecutedStage
	}
	return ""
}

func (m *UpgradeCheckInFromUpgraderRequest) GetLastExecutedStageError() string {
	if m != nil {
		return m.LastExecutedStageError
	}
	return ""
}

func (m *UpgradeCheckInFromUpgraderRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpgradeCheckInFromUpgraderRequest) Clone() *UpgradeCheckInFromUpgraderRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpgradeCheckInFromUpgraderRequest)
	*cloned = *m

	return cloned
}

type UpgradeCheckInFromUpgraderResponse struct {
	WorkflowToExecute    string   `protobuf:"bytes,1,opt,name=workflow_to_execute,json=workflowToExecute,proto3" json:"workflow_to_execute,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeCheckInFromUpgraderResponse) Reset()         { *m = UpgradeCheckInFromUpgraderResponse{} }
func (m *UpgradeCheckInFromUpgraderResponse) String() string { return proto.CompactTextString(m) }
func (*UpgradeCheckInFromUpgraderResponse) ProtoMessage()    {}
func (*UpgradeCheckInFromUpgraderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c23719610e3bb4d, []int{1}
}
func (m *UpgradeCheckInFromUpgraderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeCheckInFromUpgraderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeCheckInFromUpgraderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeCheckInFromUpgraderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeCheckInFromUpgraderResponse.Merge(m, src)
}
func (m *UpgradeCheckInFromUpgraderResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeCheckInFromUpgraderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeCheckInFromUpgraderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeCheckInFromUpgraderResponse proto.InternalMessageInfo

func (m *UpgradeCheckInFromUpgraderResponse) GetWorkflowToExecute() string {
	if m != nil {
		return m.WorkflowToExecute
	}
	return ""
}

func (m *UpgradeCheckInFromUpgraderResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpgradeCheckInFromUpgraderResponse) Clone() *UpgradeCheckInFromUpgraderResponse {
	if m == nil {
		return nil
	}
	cloned := new(UpgradeCheckInFromUpgraderResponse)
	*cloned = *m

	return cloned
}

type UpgradeCheckInFromSensorRequest struct {
	ClusterId        string `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	UpgradeProcessId string `protobuf:"bytes,1,opt,name=upgrade_process_id,json=upgradeProcessId,proto3" json:"upgrade_process_id,omitempty"`
	// Types that are valid to be assigned to State:
	//	*UpgradeCheckInFromSensorRequest_LaunchError
	//	*UpgradeCheckInFromSensorRequest_PodStates
	//	*UpgradeCheckInFromSensorRequest_DeploymentGone
	State                isUpgradeCheckInFromSensorRequest_State `protobuf_oneof:"state"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *UpgradeCheckInFromSensorRequest) Reset()         { *m = UpgradeCheckInFromSensorRequest{} }
func (m *UpgradeCheckInFromSensorRequest) String() string { return proto.CompactTextString(m) }
func (*UpgradeCheckInFromSensorRequest) ProtoMessage()    {}
func (*UpgradeCheckInFromSensorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c23719610e3bb4d, []int{2}
}
func (m *UpgradeCheckInFromSensorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeCheckInFromSensorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeCheckInFromSensorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeCheckInFromSensorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeCheckInFromSensorRequest.Merge(m, src)
}
func (m *UpgradeCheckInFromSensorRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeCheckInFromSensorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeCheckInFromSensorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeCheckInFromSensorRequest proto.InternalMessageInfo

type isUpgradeCheckInFromSensorRequest_State interface {
	isUpgradeCheckInFromSensorRequest_State()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isUpgradeCheckInFromSensorRequest_State
}

type UpgradeCheckInFromSensorRequest_LaunchError struct {
	LaunchError string `protobuf:"bytes,2,opt,name=launch_error,json=launchError,proto3,oneof" json:"launch_error,omitempty"`
}
type UpgradeCheckInFromSensorRequest_PodStates struct {
	PodStates *UpgradeCheckInFromSensorRequest_UpgraderPodStates `protobuf:"bytes,3,opt,name=pod_states,json=podStates,proto3,oneof" json:"pod_states,omitempty"`
}
type UpgradeCheckInFromSensorRequest_DeploymentGone struct {
	DeploymentGone bool `protobuf:"varint,4,opt,name=deployment_gone,json=deploymentGone,proto3,oneof" json:"deployment_gone,omitempty"`
}

func (*UpgradeCheckInFromSensorRequest_LaunchError) isUpgradeCheckInFromSensorRequest_State() {}
func (m *UpgradeCheckInFromSensorRequest_LaunchError) Clone() isUpgradeCheckInFromSensorRequest_State {
	if m == nil {
		return nil
	}
	cloned := new(UpgradeCheckInFromSensorRequest_LaunchError)
	*cloned = *m

	return cloned
}
func (*UpgradeCheckInFromSensorRequest_PodStates) isUpgradeCheckInFromSensorRequest_State() {}
func (m *UpgradeCheckInFromSensorRequest_PodStates) Clone() isUpgradeCheckInFromSensorRequest_State {
	if m == nil {
		return nil
	}
	cloned := new(UpgradeCheckInFromSensorRequest_PodStates)
	*cloned = *m

	cloned.PodStates = m.PodStates.Clone()
	return cloned
}
func (*UpgradeCheckInFromSensorRequest_DeploymentGone) isUpgradeCheckInFromSensorRequest_State() {}
func (m *UpgradeCheckInFromSensorRequest_DeploymentGone) Clone() isUpgradeCheckInFromSensorRequest_State {
	if m == nil {
		return nil
	}
	cloned := new(UpgradeCheckInFromSensorRequest_DeploymentGone)
	*cloned = *m

	return cloned
}

func (m *UpgradeCheckInFromSensorRequest) GetState() isUpgradeCheckInFromSensorRequest_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UpgradeCheckInFromSensorRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *UpgradeCheckInFromSensorRequest) GetUpgradeProcessId() string {
	if m != nil {
		return m.UpgradeProcessId
	}
	return ""
}

func (m *UpgradeCheckInFromSensorRequest) GetLaunchError() string {
	if x, ok := m.GetState().(*UpgradeCheckInFromSensorRequest_LaunchError); ok {
		return x.LaunchError
	}
	return ""
}

func (m *UpgradeCheckInFromSensorRequest) GetPodStates() *UpgradeCheckInFromSensorRequest_UpgraderPodStates {
	if x, ok := m.GetState().(*UpgradeCheckInFromSensorRequest_PodStates); ok {
		return x.PodStates
	}
	return nil
}

func (m *UpgradeCheckInFromSensorRequest) GetDeploymentGone() bool {
	if x, ok := m.GetState().(*UpgradeCheckInFromSensorRequest_DeploymentGone); ok {
		return x.DeploymentGone
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpgradeCheckInFromSensorRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpgradeCheckInFromSensorRequest_LaunchError)(nil),
		(*UpgradeCheckInFromSensorRequest_PodStates)(nil),
		(*UpgradeCheckInFromSensorRequest_DeploymentGone)(nil),
	}
}

func (m *UpgradeCheckInFromSensorRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpgradeCheckInFromSensorRequest) Clone() *UpgradeCheckInFromSensorRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpgradeCheckInFromSensorRequest)
	*cloned = *m

	if m.State != nil {
		cloned.State = m.State.Clone()
	}
	return cloned
}

type UpgradeCheckInFromSensorRequest_PodErrorCondition struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ImageRelated         bool     `protobuf:"varint,2,opt,name=image_related,json=imageRelated,proto3" json:"image_related,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) Reset() {
	*m = UpgradeCheckInFromSensorRequest_PodErrorCondition{}
}
func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) String() string {
	return proto.CompactTextString(m)
}
func (*UpgradeCheckInFromSensorRequest_PodErrorCondition) ProtoMessage() {}
func (*UpgradeCheckInFromSensorRequest_PodErrorCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c23719610e3bb4d, []int{2, 0}
}
func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeCheckInFromSensorRequest_PodErrorCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeCheckInFromSensorRequest_PodErrorCondition.Merge(m, src)
}
func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeCheckInFromSensorRequest_PodErrorCondition.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeCheckInFromSensorRequest_PodErrorCondition proto.InternalMessageInfo

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) GetImageRelated() bool {
	if m != nil {
		return m.ImageRelated
	}
	return false
}

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) Clone() *UpgradeCheckInFromSensorRequest_PodErrorCondition {
	if m == nil {
		return nil
	}
	cloned := new(UpgradeCheckInFromSensorRequest_PodErrorCondition)
	*cloned = *m

	return cloned
}

type UpgradeCheckInFromSensorRequest_UpgraderPodState struct {
	PodName              string                                             `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	Started              bool                                               `protobuf:"varint,2,opt,name=started,proto3" json:"started,omitempty"`
	Error                *UpgradeCheckInFromSensorRequest_PodErrorCondition `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) Reset() {
	*m = UpgradeCheckInFromSensorRequest_UpgraderPodState{}
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) String() string {
	return proto.CompactTextString(m)
}
func (*UpgradeCheckInFromSensorRequest_UpgraderPodState) ProtoMessage() {}
func (*UpgradeCheckInFromSensorRequest_UpgraderPodState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c23719610e3bb4d, []int{2, 1}
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeCheckInFromSensorRequest_UpgraderPodState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeCheckInFromSensorRequest_UpgraderPodState.Merge(m, src)
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeCheckInFromSensorRequest_UpgraderPodState.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeCheckInFromSensorRequest_UpgraderPodState proto.InternalMessageInfo

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) GetStarted() bool {
	if m != nil {
		return m.Started
	}
	return false
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) GetError() *UpgradeCheckInFromSensorRequest_PodErrorCondition {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) Clone() *UpgradeCheckInFromSensorRequest_UpgraderPodState {
	if m == nil {
		return nil
	}
	cloned := new(UpgradeCheckInFromSensorRequest_UpgraderPodState)
	*cloned = *m

	cloned.Error = m.Error.Clone()
	return cloned
}

type UpgradeCheckInFromSensorRequest_UpgraderPodStates struct {
	States               []*UpgradeCheckInFromSensorRequest_UpgraderPodState `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) Reset() {
	*m = UpgradeCheckInFromSensorRequest_UpgraderPodStates{}
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) String() string {
	return proto.CompactTextString(m)
}
func (*UpgradeCheckInFromSensorRequest_UpgraderPodStates) ProtoMessage() {}
func (*UpgradeCheckInFromSensorRequest_UpgraderPodStates) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c23719610e3bb4d, []int{2, 2}
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeCheckInFromSensorRequest_UpgraderPodStates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeCheckInFromSensorRequest_UpgraderPodStates.Merge(m, src)
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeCheckInFromSensorRequest_UpgraderPodStates.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeCheckInFromSensorRequest_UpgraderPodStates proto.InternalMessageInfo

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) GetStates() []*UpgradeCheckInFromSensorRequest_UpgraderPodState {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) Clone() *UpgradeCheckInFromSensorRequest_UpgraderPodStates {
	if m == nil {
		return nil
	}
	cloned := new(UpgradeCheckInFromSensorRequest_UpgraderPodStates)
	*cloned = *m

	if m.States != nil {
		cloned.States = make([]*UpgradeCheckInFromSensorRequest_UpgraderPodState, len(m.States))
		for idx, v := range m.States {
			cloned.States[idx] = v.Clone()
		}
	}
	return cloned
}

// UpgradeCheckInResponseDetails contains proto messages that are added to details
// when returning errors from these endpoints.
type UpgradeCheckInResponseDetails struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeCheckInResponseDetails) Reset()         { *m = UpgradeCheckInResponseDetails{} }
func (m *UpgradeCheckInResponseDetails) String() string { return proto.CompactTextString(m) }
func (*UpgradeCheckInResponseDetails) ProtoMessage()    {}
func (*UpgradeCheckInResponseDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c23719610e3bb4d, []int{3}
}
func (m *UpgradeCheckInResponseDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeCheckInResponseDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeCheckInResponseDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeCheckInResponseDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeCheckInResponseDetails.Merge(m, src)
}
func (m *UpgradeCheckInResponseDetails) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeCheckInResponseDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeCheckInResponseDetails.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeCheckInResponseDetails proto.InternalMessageInfo

func (m *UpgradeCheckInResponseDetails) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpgradeCheckInResponseDetails) Clone() *UpgradeCheckInResponseDetails {
	if m == nil {
		return nil
	}
	cloned := new(UpgradeCheckInResponseDetails)
	*cloned = *m

	return cloned
}

type UpgradeCheckInResponseDetails_NoUpgradeInProgress struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) Reset() {
	*m = UpgradeCheckInResponseDetails_NoUpgradeInProgress{}
}
func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) String() string {
	return proto.CompactTextString(m)
}
func (*UpgradeCheckInResponseDetails_NoUpgradeInProgress) ProtoMessage() {}
func (*UpgradeCheckInResponseDetails_NoUpgradeInProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c23719610e3bb4d, []int{3, 0}
}
func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeCheckInResponseDetails_NoUpgradeInProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeCheckInResponseDetails_NoUpgradeInProgress.Merge(m, src)
}
func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeCheckInResponseDetails_NoUpgradeInProgress.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeCheckInResponseDetails_NoUpgradeInProgress proto.InternalMessageInfo

func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) Clone() *UpgradeCheckInResponseDetails_NoUpgradeInProgress {
	if m == nil {
		return nil
	}
	cloned := new(UpgradeCheckInResponseDetails_NoUpgradeInProgress)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*UpgradeCheckInFromUpgraderRequest)(nil), "central.UpgradeCheckInFromUpgraderRequest")
	proto.RegisterType((*UpgradeCheckInFromUpgraderResponse)(nil), "central.UpgradeCheckInFromUpgraderResponse")
	proto.RegisterType((*UpgradeCheckInFromSensorRequest)(nil), "central.UpgradeCheckInFromSensorRequest")
	proto.RegisterType((*UpgradeCheckInFromSensorRequest_PodErrorCondition)(nil), "central.UpgradeCheckInFromSensorRequest.PodErrorCondition")
	proto.RegisterType((*UpgradeCheckInFromSensorRequest_UpgraderPodState)(nil), "central.UpgradeCheckInFromSensorRequest.UpgraderPodState")
	proto.RegisterType((*UpgradeCheckInFromSensorRequest_UpgraderPodStates)(nil), "central.UpgradeCheckInFromSensorRequest.UpgraderPodStates")
	proto.RegisterType((*UpgradeCheckInResponseDetails)(nil), "central.UpgradeCheckInResponseDetails")
	proto.RegisterType((*UpgradeCheckInResponseDetails_NoUpgradeInProgress)(nil), "central.UpgradeCheckInResponseDetails.NoUpgradeInProgress")
}

func init() {
	proto.RegisterFile("internalapi/central/sensor_upgrade_ctrl_iservice.proto", fileDescriptor_3c23719610e3bb4d)
}

var fileDescriptor_3c23719610e3bb4d = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xdf, 0x4e, 0xd4, 0x4e,
	0x14, 0xde, 0xf2, 0x9f, 0x03, 0xbf, 0x1f, 0xec, 0x10, 0xc9, 0x52, 0xc2, 0x8a, 0xcb, 0x0d, 0xa8,
	0xe9, 0x26, 0x98, 0x90, 0xe0, 0x25, 0x88, 0xb2, 0x37, 0x64, 0x2d, 0x18, 0x13, 0x35, 0x69, 0x4a,
	0x7b, 0x28, 0x0d, 0xed, 0x9c, 0x3a, 0x33, 0x15, 0x79, 0x01, 0x9f, 0x41, 0xdf, 0xc8, 0x4b, 0x1f,
	0xc1, 0xe0, 0x1b, 0x78, 0xed, 0x85, 0xe9, 0x74, 0x46, 0x22, 0x2b, 0x88, 0x26, 0xde, 0x75, 0xce,
	0xf7, 0xcd, 0x39, 0xe7, 0xfb, 0x4e, 0xe7, 0xc0, 0x46, 0xca, 0x15, 0x0a, 0x1e, 0x66, 0x61, 0x91,
	0x76, 0x23, 0xe4, 0x4a, 0x84, 0x59, 0x57, 0x22, 0x97, 0x24, 0x82, 0xb2, 0x48, 0x44, 0x18, 0x63,
	0x10, 0x29, 0x91, 0x05, 0xa9, 0x44, 0xf1, 0x26, 0x8d, 0xd0, 0x2b, 0x04, 0x29, 0x62, 0xe3, 0x86,
	0xeb, 0x2e, 0x26, 0x44, 0x49, 0x86, 0x5d, 0x1d, 0x3e, 0x2c, 0x8f, 0xba, 0x98, 0x17, 0xea, 0xac,
	0x66, 0x75, 0xde, 0x0d, 0xc1, 0x9d, 0x67, 0x75, 0x96, 0xed, 0x63, 0x8c, 0x4e, 0x7a, 0xfc, 0xb1,
	0xa0, 0xdc, 0x44, 0x84, 0x8f, 0xaf, 0x4b, 0x94, 0x8a, 0x2d, 0x01, 0x44, 0x59, 0x29, 0x15, 0x8a,
	0x20, 0x8d, 0x5b, 0xa3, 0xcb, 0xce, 0xea, 0xa4, 0x3f, 0x69, 0x22, 0xbd, 0x98, 0xdd, 0x07, 0x66,
	0x3b, 0x29, 0x04, 0x45, 0x28, 0x65, 0x45, 0x73, 0x34, 0x6d, 0xd6, 0x20, 0xfd, 0x1a, 0xe8, 0xc5,
	0x6c, 0x0d, 0x66, 0xa3, 0x52, 0x08, 0xe4, 0x2a, 0x38, 0x25, 0x71, 0x72, 0x94, 0xd1, 0x69, 0x6b,
	0x48, 0x73, 0x67, 0x4c, 0xfc, 0xb9, 0x09, 0x33, 0x0f, 0xe6, 0xb2, 0x50, 0xaa, 0x00, 0xdf, 0x62,
	0x54, 0x2a, 0x8c, 0x03, 0xa9, 0xc2, 0x04, 0x5b, 0xc3, 0x9a, 0xdd, 0xac, 0xa0, 0x1d, 0x83, 0xec,
	0x57, 0x00, 0xdb, 0x84, 0x85, 0x5f, 0xf0, 0x03, 0x14, 0x82, 0x44, 0x6b, 0x44, 0xdf, 0x9a, 0x1f,
	0xb8, 0xb5, 0x53, 0xa1, 0x9d, 0x03, 0xe8, 0x5c, 0xe7, 0x83, 0x2c, 0x88, 0x4b, 0xac, 0x1a, 0xb2,
	0x3d, 0x07, 0x8a, 0x6c, 0x1d, 0x23, 0xb5, 0x69, 0xa1, 0x03, 0x32, 0x05, 0x3a, 0xdf, 0x46, 0xe0,
	0xf6, 0x60, 0xda, 0x7d, 0x3d, 0xbd, 0x7f, 0x62, 0xee, 0x0a, 0x4c, 0x67, 0x61, 0xc9, 0xa3, 0x63,
	0x23, 0x5a, 0x1b, 0xbb, 0xdb, 0xf0, 0xa7, 0xea, 0xa8, 0xd6, 0xca, 0x5e, 0x02, 0x14, 0xa4, 0xcd,
	0x51, 0x28, 0xb5, 0x9b, 0x53, 0xeb, 0x0f, 0x3d, 0xf3, 0xbf, 0x78, 0xbf, 0xe9, 0xd7, 0xe2, 0xa2,
	0x4f, 0x95, 0x7f, 0x0a, 0xe5, 0x6e, 0xc3, 0x9f, 0x2c, 0xec, 0x81, 0xad, 0xc1, 0x4c, 0x8c, 0x45,
	0x46, 0x67, 0x79, 0x35, 0xe1, 0x84, 0x38, 0x6a, 0xe7, 0x27, 0x76, 0x1b, 0xfe, 0xff, 0x17, 0xc0,
	0x13, 0xe2, 0xe8, 0xfa, 0xd0, 0xec, 0x53, 0xac, 0x7b, 0xda, 0x26, 0x1e, 0xa7, 0x2a, 0x25, 0xce,
	0x5a, 0x30, 0x9e, 0xa3, 0x94, 0xd5, 0x9c, 0x6b, 0x91, 0xf6, 0xc8, 0x56, 0xe0, 0xbf, 0x34, 0xaf,
	0xe6, 0x29, 0x30, 0x0b, 0x15, 0xc6, 0x5a, 0xdc, 0x84, 0x3f, 0xad, 0x83, 0x7e, 0x1d, 0x73, 0x3f,
	0x38, 0x30, 0x7b, 0xb9, 0x43, 0xb6, 0x00, 0x13, 0x95, 0x60, 0x1e, 0xe6, 0x3f, 0x92, 0x16, 0x14,
	0xef, 0x85, 0x39, 0x56, 0xe5, 0xa4, 0x0a, 0xc5, 0x45, 0x3a, 0x7b, 0x64, 0x7d, 0x18, 0xad, 0x3d,
	0xfc, 0x53, 0x83, 0x06, 0x34, 0xf9, 0x75, 0x22, 0xf7, 0x08, 0x9a, 0x03, 0xe6, 0xb1, 0xa7, 0x30,
	0x66, 0x06, 0xe1, 0x2c, 0x0f, 0xaf, 0x4e, 0xad, 0x6f, 0xfe, 0xf5, 0x20, 0x7c, 0x93, 0x68, 0x6b,
	0x1c, 0x46, 0xf5, 0x57, 0x67, 0x03, 0x96, 0x7e, 0x4e, 0x62, 0x7f, 0xe4, 0x47, 0xa8, 0xc2, 0x34,
	0x93, 0xee, 0x2d, 0x98, 0xdb, 0x23, 0x43, 0xe9, 0xf1, 0xbe, 0xa0, 0x44, 0xa0, 0x94, 0xeb, 0x5f,
	0x1d, 0x58, 0xac, 0x6b, 0xd9, 0xeb, 0xc4, 0x95, 0xa0, 0x6c, 0xbf, 0xde, 0x30, 0xac, 0x04, 0xf7,
	0xea, 0xc7, 0xc2, 0xee, 0x5e, 0xa3, 0xe0, 0xd2, 0x66, 0x71, 0xef, 0xdd, 0x88, 0x6b, 0x5e, 0xdf,
	0x2b, 0x68, 0x5d, 0xe5, 0x09, 0x5b, 0xbd, 0xa9, 0x6d, 0xee, 0xbc, 0x57, 0x2f, 0x44, 0xcf, 0x2e,
	0x44, 0x6f, 0xa7, 0x5a, 0x88, 0x5b, 0x0b, 0x1f, 0xcf, 0xdb, 0xce, 0xa7, 0xf3, 0xb6, 0xf3, 0xf9,
	0xbc, 0xed, 0xbc, 0xff, 0xd2, 0x6e, 0xbc, 0xb0, 0x2b, 0xf4, 0x70, 0x4c, 0x53, 0x1f, 0x7c, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0xcd, 0x87, 0x90, 0xf0, 0x8c, 0x05, 0x00, 0x00,
}

func (m *UpgradeCheckInFromUpgraderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromUpgraderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeCheckInFromUpgraderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LastExecutedStageError) > 0 {
		i -= len(m.LastExecutedStageError)
		copy(dAtA[i:], m.LastExecutedStageError)
		i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(len(m.LastExecutedStageError)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastExecutedStage) > 0 {
		i -= len(m.LastExecutedStage)
		copy(dAtA[i:], m.LastExecutedStage)
		i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(len(m.LastExecutedStage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurrentWorkflow) > 0 {
		i -= len(m.CurrentWorkflow)
		copy(dAtA[i:], m.CurrentWorkflow)
		i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(len(m.CurrentWorkflow)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UpgradeProcessId) > 0 {
		i -= len(m.UpgradeProcessId)
		copy(dAtA[i:], m.UpgradeProcessId)
		i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(len(m.UpgradeProcessId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromUpgraderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromUpgraderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeCheckInFromUpgraderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WorkflowToExecute) > 0 {
		i -= len(m.WorkflowToExecute)
		copy(dAtA[i:], m.WorkflowToExecute)
		i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(len(m.WorkflowToExecute)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromSensorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromSensorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.State != nil {
		{
			size := m.State.Size()
			i -= size
			if _, err := m.State.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.UpgradeProcessId) > 0 {
		i -= len(m.UpgradeProcessId)
		copy(dAtA[i:], m.UpgradeProcessId)
		i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(len(m.UpgradeProcessId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromSensorRequest_LaunchError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_LaunchError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.LaunchError)
	copy(dAtA[i:], m.LaunchError)
	i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(len(m.LaunchError)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *UpgradeCheckInFromSensorRequest_PodStates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_PodStates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PodStates != nil {
		{
			size, err := m.PodStates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *UpgradeCheckInFromSensorRequest_DeploymentGone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_DeploymentGone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.DeploymentGone {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ImageRelated {
		i--
		if m.ImageRelated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Started {
		i--
		if m.Started {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.States) > 0 {
		for iNdEx := len(m.States) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.States[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSensorUpgradeCtrlIservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInResponseDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInResponseDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeCheckInResponseDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintSensorUpgradeCtrlIservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovSensorUpgradeCtrlIservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpgradeCheckInFromUpgraderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpgradeProcessId)
	if l > 0 {
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	l = len(m.CurrentWorkflow)
	if l > 0 {
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	l = len(m.LastExecutedStage)
	if l > 0 {
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	l = len(m.LastExecutedStageError)
	if l > 0 {
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpgradeCheckInFromUpgraderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkflowToExecute)
	if l > 0 {
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpgradeCheckInFromSensorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpgradeProcessId)
	if l > 0 {
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	if m.State != nil {
		n += m.State.Size()
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpgradeCheckInFromSensorRequest_LaunchError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LaunchError)
	n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	return n
}
func (m *UpgradeCheckInFromSensorRequest_PodStates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodStates != nil {
		l = m.PodStates.Size()
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	return n
}
func (m *UpgradeCheckInFromSensorRequest_DeploymentGone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	if m.ImageRelated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	if m.Started {
		n += 2
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.States) > 0 {
		for _, e := range m.States {
			l = e.Size()
			n += 1 + l + sovSensorUpgradeCtrlIservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpgradeCheckInResponseDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSensorUpgradeCtrlIservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSensorUpgradeCtrlIservice(x uint64) (n int) {
	return sovSensorUpgradeCtrlIservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpgradeCheckInFromUpgraderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgradeCtrlIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInFromUpgraderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInFromUpgraderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeProcessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgradeProcessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentWorkflow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentWorkflow = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastExecutedStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastExecutedStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastExecutedStageError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastExecutedStageError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgradeCtrlIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInFromUpgraderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgradeCtrlIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInFromUpgraderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInFromUpgraderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowToExecute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowToExecute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgradeCtrlIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInFromSensorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgradeCtrlIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInFromSensorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInFromSensorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeProcessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgradeProcessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = &UpgradeCheckInFromSensorRequest_LaunchError{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpgradeCheckInFromSensorRequest_UpgraderPodStates{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &UpgradeCheckInFromSensorRequest_PodStates{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentGone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.State = &UpgradeCheckInFromSensorRequest_DeploymentGone{b}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgradeCtrlIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgradeCtrlIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodErrorCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodErrorCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageRelated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImageRelated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgradeCtrlIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgradeCtrlIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgraderPodState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgraderPodState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Started = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &UpgradeCheckInFromSensorRequest_PodErrorCondition{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgradeCtrlIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgradeCtrlIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgraderPodStates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgraderPodStates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.States = append(m.States, &UpgradeCheckInFromSensorRequest_UpgraderPodState{})
			if err := m.States[len(m.States)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgradeCtrlIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInResponseDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgradeCtrlIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInResponseDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInResponseDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgradeCtrlIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgradeCtrlIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoUpgradeInProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoUpgradeInProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgradeCtrlIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSensorUpgradeCtrlIservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSensorUpgradeCtrlIservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensorUpgradeCtrlIservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSensorUpgradeCtrlIservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSensorUpgradeCtrlIservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSensorUpgradeCtrlIservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSensorUpgradeCtrlIservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSensorUpgradeCtrlIservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSensorUpgradeCtrlIservice = fmt.Errorf("proto: unexpected end of group")
)
