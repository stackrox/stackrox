// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/central/sensor_upgrade.proto

package central

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SensorUpgradeTrigger struct {
	// A UUID that identifies this specific upgrade process.
	UpgradeProcessId     string                            `protobuf:"bytes,1,opt,name=upgrade_process_id,json=upgradeProcessId,proto3" json:"upgrade_process_id,omitempty"`
	Image                string                            `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Command              []string                          `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`
	EnvVars              []*SensorUpgradeTrigger_EnvVarDef `protobuf:"bytes,4,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *SensorUpgradeTrigger) Reset()         { *m = SensorUpgradeTrigger{} }
func (m *SensorUpgradeTrigger) String() string { return proto.CompactTextString(m) }
func (*SensorUpgradeTrigger) ProtoMessage()    {}
func (*SensorUpgradeTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_20d0901c1423daa1, []int{0}
}
func (m *SensorUpgradeTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensorUpgradeTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SensorUpgradeTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SensorUpgradeTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorUpgradeTrigger.Merge(m, src)
}
func (m *SensorUpgradeTrigger) XXX_Size() int {
	return m.Size()
}
func (m *SensorUpgradeTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorUpgradeTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_SensorUpgradeTrigger proto.InternalMessageInfo

func (m *SensorUpgradeTrigger) GetUpgradeProcessId() string {
	if m != nil {
		return m.UpgradeProcessId
	}
	return ""
}

func (m *SensorUpgradeTrigger) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *SensorUpgradeTrigger) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *SensorUpgradeTrigger) GetEnvVars() []*SensorUpgradeTrigger_EnvVarDef {
	if m != nil {
		return m.EnvVars
	}
	return nil
}

func (m *SensorUpgradeTrigger) MessageClone() proto.Message {
	return m.Clone()
}
func (m *SensorUpgradeTrigger) Clone() *SensorUpgradeTrigger {
	if m == nil {
		return nil
	}
	cloned := new(SensorUpgradeTrigger)
	*cloned = *m

	if m.Command != nil {
		cloned.Command = make([]string, len(m.Command))
		copy(cloned.Command, m.Command)
	}
	if m.EnvVars != nil {
		cloned.EnvVars = make([]*SensorUpgradeTrigger_EnvVarDef, len(m.EnvVars))
		for idx, v := range m.EnvVars {
			cloned.EnvVars[idx] = v.Clone()
		}
	}
	return cloned
}

type SensorUpgradeTrigger_EnvVarDef struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SourceEnvVar         string   `protobuf:"bytes,2,opt,name=source_env_var,json=sourceEnvVar,proto3" json:"source_env_var,omitempty"`
	DefaultValue         string   `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorUpgradeTrigger_EnvVarDef) Reset()         { *m = SensorUpgradeTrigger_EnvVarDef{} }
func (m *SensorUpgradeTrigger_EnvVarDef) String() string { return proto.CompactTextString(m) }
func (*SensorUpgradeTrigger_EnvVarDef) ProtoMessage()    {}
func (*SensorUpgradeTrigger_EnvVarDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_20d0901c1423daa1, []int{0, 0}
}
func (m *SensorUpgradeTrigger_EnvVarDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensorUpgradeTrigger_EnvVarDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SensorUpgradeTrigger_EnvVarDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SensorUpgradeTrigger_EnvVarDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorUpgradeTrigger_EnvVarDef.Merge(m, src)
}
func (m *SensorUpgradeTrigger_EnvVarDef) XXX_Size() int {
	return m.Size()
}
func (m *SensorUpgradeTrigger_EnvVarDef) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorUpgradeTrigger_EnvVarDef.DiscardUnknown(m)
}

var xxx_messageInfo_SensorUpgradeTrigger_EnvVarDef proto.InternalMessageInfo

func (m *SensorUpgradeTrigger_EnvVarDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SensorUpgradeTrigger_EnvVarDef) GetSourceEnvVar() string {
	if m != nil {
		return m.SourceEnvVar
	}
	return ""
}

func (m *SensorUpgradeTrigger_EnvVarDef) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *SensorUpgradeTrigger_EnvVarDef) MessageClone() proto.Message {
	return m.Clone()
}
func (m *SensorUpgradeTrigger_EnvVarDef) Clone() *SensorUpgradeTrigger_EnvVarDef {
	if m == nil {
		return nil
	}
	cloned := new(SensorUpgradeTrigger_EnvVarDef)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*SensorUpgradeTrigger)(nil), "central.SensorUpgradeTrigger")
	proto.RegisterType((*SensorUpgradeTrigger_EnvVarDef)(nil), "central.SensorUpgradeTrigger.EnvVarDef")
}

func init() {
	proto.RegisterFile("internalapi/central/sensor_upgrade.proto", fileDescriptor_20d0901c1423daa1)
}

var fileDescriptor_20d0901c1423daa1 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbf, 0x4a, 0xf4, 0x40,
	0x14, 0xc5, 0xbf, 0x6c, 0xf6, 0x73, 0xdd, 0xf1, 0x0f, 0x32, 0x6c, 0x31, 0x08, 0x86, 0xa0, 0x82,
	0x29, 0x24, 0x01, 0x2d, 0xed, 0x16, 0x2d, 0xec, 0x24, 0xea, 0x16, 0x36, 0xc3, 0x35, 0xb9, 0x1b,
	0x22, 0xc9, 0x4c, 0xb8, 0x93, 0xe4, 0x59, 0x7c, 0x00, 0x1f, 0xc6, 0xd2, 0x47, 0x90, 0xf8, 0x22,
	0x62, 0x66, 0xb4, 0xda, 0x6a, 0xee, 0x3d, 0xe7, 0x5c, 0xe6, 0xc7, 0x61, 0x51, 0xa9, 0x5a, 0x24,
	0x05, 0x15, 0x34, 0x65, 0x92, 0xa1, 0x6a, 0x09, 0xaa, 0xc4, 0xa0, 0x32, 0x9a, 0x64, 0xd7, 0x14,
	0x04, 0x39, 0xc6, 0x0d, 0xe9, 0x56, 0xf3, 0x99, 0x73, 0x8f, 0xdf, 0x26, 0x6c, 0x71, 0x3f, 0x26,
	0x1e, 0x6d, 0xe0, 0x81, 0xca, 0xa2, 0x40, 0xe2, 0xe7, 0x8c, 0xbb, 0x13, 0xd9, 0x90, 0xce, 0xd0,
	0x18, 0x59, 0xe6, 0xc2, 0x0b, 0xbd, 0x68, 0x9e, 0x1e, 0x38, 0xe7, 0xce, 0x1a, 0xb7, 0x39, 0x5f,
	0xb0, 0xff, 0x65, 0x0d, 0x05, 0x8a, 0xc9, 0x18, 0xb0, 0x0b, 0x17, 0x6c, 0x96, 0xe9, 0xba, 0x06,
	0x95, 0x0b, 0x3f, 0xf4, 0xa3, 0x79, 0xfa, 0xbb, 0xf2, 0x25, 0xdb, 0x46, 0xd5, 0xcb, 0x1e, 0xc8,
	0x88, 0x69, 0xe8, 0x47, 0x3b, 0x17, 0x67, 0xb1, 0x43, 0x8a, 0x37, 0xe1, 0xc4, 0x37, 0xaa, 0x5f,
	0x01, 0x5d, 0xe3, 0x3a, 0x9d, 0xe1, 0x38, 0x9a, 0xc3, 0x17, 0x36, 0xff, 0x53, 0x39, 0x67, 0x53,
	0x05, 0x35, 0x3a, 0xc0, 0x71, 0xe6, 0xa7, 0x6c, 0xdf, 0xe8, 0x8e, 0x32, 0x94, 0xee, 0x2f, 0x47,
	0xb7, 0x6b, 0x55, 0x7b, 0xcc, 0x4f, 0xd8, 0x5e, 0x8e, 0x6b, 0xe8, 0xaa, 0x56, 0xf6, 0x50, 0x75,
	0x28, 0x7c, 0x1b, 0x72, 0xe2, 0xea, 0x47, 0x5b, 0x26, 0xef, 0x43, 0xe0, 0x7d, 0x0c, 0x81, 0xf7,
	0x39, 0x04, 0xde, 0xeb, 0x57, 0xf0, 0xef, 0xe9, 0x28, 0x4e, 0x36, 0xb4, 0x7d, 0xe5, 0xde, 0xe7,
	0xad, 0xb1, 0xe7, 0xcb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x6a, 0xa9, 0xf1, 0x93, 0x01,
	0x00, 0x00,
}

func (m *SensorUpgradeTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensorUpgradeTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensorUpgradeTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EnvVars) > 0 {
		for iNdEx := len(m.EnvVars) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnvVars[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSensorUpgrade(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Command) > 0 {
		for iNdEx := len(m.Command) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Command[iNdEx])
			copy(dAtA[i:], m.Command[iNdEx])
			i = encodeVarintSensorUpgrade(dAtA, i, uint64(len(m.Command[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintSensorUpgrade(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UpgradeProcessId) > 0 {
		i -= len(m.UpgradeProcessId)
		copy(dAtA[i:], m.UpgradeProcessId)
		i = encodeVarintSensorUpgrade(dAtA, i, uint64(len(m.UpgradeProcessId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SensorUpgradeTrigger_EnvVarDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensorUpgradeTrigger_EnvVarDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensorUpgradeTrigger_EnvVarDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintSensorUpgrade(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceEnvVar) > 0 {
		i -= len(m.SourceEnvVar)
		copy(dAtA[i:], m.SourceEnvVar)
		i = encodeVarintSensorUpgrade(dAtA, i, uint64(len(m.SourceEnvVar)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSensorUpgrade(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSensorUpgrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovSensorUpgrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SensorUpgradeTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpgradeProcessId)
	if l > 0 {
		n += 1 + l + sovSensorUpgrade(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovSensorUpgrade(uint64(l))
	}
	if len(m.Command) > 0 {
		for _, s := range m.Command {
			l = len(s)
			n += 1 + l + sovSensorUpgrade(uint64(l))
		}
	}
	if len(m.EnvVars) > 0 {
		for _, e := range m.EnvVars {
			l = e.Size()
			n += 1 + l + sovSensorUpgrade(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SensorUpgradeTrigger_EnvVarDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSensorUpgrade(uint64(l))
	}
	l = len(m.SourceEnvVar)
	if l > 0 {
		n += 1 + l + sovSensorUpgrade(uint64(l))
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovSensorUpgrade(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSensorUpgrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSensorUpgrade(x uint64) (n int) {
	return sovSensorUpgrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SensorUpgradeTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensorUpgradeTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensorUpgradeTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeProcessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgradeProcessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = append(m.Command, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvVars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvVars = append(m.EnvVars, &SensorUpgradeTrigger_EnvVarDef{})
			if err := m.EnvVars[len(m.EnvVars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SensorUpgradeTrigger_EnvVarDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvVarDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvVarDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceEnvVar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceEnvVar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSensorUpgrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSensorUpgrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensorUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensorUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSensorUpgrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSensorUpgrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSensorUpgrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSensorUpgrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSensorUpgrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSensorUpgrade = fmt.Errorf("proto: unexpected end of group")
)
