// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internalapi/central/sensor_upgrade_ctrl_iservice.proto

package central

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SensorUpgradeControlService_UpgradeCheckInFromUpgrader_FullMethodName = "/central.SensorUpgradeControlService/UpgradeCheckInFromUpgrader"
	SensorUpgradeControlService_UpgradeCheckInFromSensor_FullMethodName   = "/central.SensorUpgradeControlService/UpgradeCheckInFromSensor"
)

// SensorUpgradeControlServiceClient is the client API for SensorUpgradeControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorUpgradeControlServiceClient interface {
	UpgradeCheckInFromUpgrader(ctx context.Context, in *UpgradeCheckInFromUpgraderRequest, opts ...grpc.CallOption) (*UpgradeCheckInFromUpgraderResponse, error)
	UpgradeCheckInFromSensor(ctx context.Context, in *UpgradeCheckInFromSensorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sensorUpgradeControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorUpgradeControlServiceClient(cc grpc.ClientConnInterface) SensorUpgradeControlServiceClient {
	return &sensorUpgradeControlServiceClient{cc}
}

func (c *sensorUpgradeControlServiceClient) UpgradeCheckInFromUpgrader(ctx context.Context, in *UpgradeCheckInFromUpgraderRequest, opts ...grpc.CallOption) (*UpgradeCheckInFromUpgraderResponse, error) {
	out := new(UpgradeCheckInFromUpgraderResponse)
	err := c.cc.Invoke(ctx, SensorUpgradeControlService_UpgradeCheckInFromUpgrader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorUpgradeControlServiceClient) UpgradeCheckInFromSensor(ctx context.Context, in *UpgradeCheckInFromSensorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SensorUpgradeControlService_UpgradeCheckInFromSensor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorUpgradeControlServiceServer is the server API for SensorUpgradeControlService service.
// All implementations should embed UnimplementedSensorUpgradeControlServiceServer
// for forward compatibility
type SensorUpgradeControlServiceServer interface {
	UpgradeCheckInFromUpgrader(context.Context, *UpgradeCheckInFromUpgraderRequest) (*UpgradeCheckInFromUpgraderResponse, error)
	UpgradeCheckInFromSensor(context.Context, *UpgradeCheckInFromSensorRequest) (*emptypb.Empty, error)
}

// UnimplementedSensorUpgradeControlServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSensorUpgradeControlServiceServer struct {
}

func (UnimplementedSensorUpgradeControlServiceServer) UpgradeCheckInFromUpgrader(context.Context, *UpgradeCheckInFromUpgraderRequest) (*UpgradeCheckInFromUpgraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCheckInFromUpgrader not implemented")
}
func (UnimplementedSensorUpgradeControlServiceServer) UpgradeCheckInFromSensor(context.Context, *UpgradeCheckInFromSensorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCheckInFromSensor not implemented")
}

// UnsafeSensorUpgradeControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorUpgradeControlServiceServer will
// result in compilation errors.
type UnsafeSensorUpgradeControlServiceServer interface {
	mustEmbedUnimplementedSensorUpgradeControlServiceServer()
}

func RegisterSensorUpgradeControlServiceServer(s grpc.ServiceRegistrar, srv SensorUpgradeControlServiceServer) {
	s.RegisterService(&SensorUpgradeControlService_ServiceDesc, srv)
}

func _SensorUpgradeControlService_UpgradeCheckInFromUpgrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeCheckInFromUpgraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeControlServiceServer).UpgradeCheckInFromUpgrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorUpgradeControlService_UpgradeCheckInFromUpgrader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeControlServiceServer).UpgradeCheckInFromUpgrader(ctx, req.(*UpgradeCheckInFromUpgraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorUpgradeControlService_UpgradeCheckInFromSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeCheckInFromSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeControlServiceServer).UpgradeCheckInFromSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorUpgradeControlService_UpgradeCheckInFromSensor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeControlServiceServer).UpgradeCheckInFromSensor(ctx, req.(*UpgradeCheckInFromSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SensorUpgradeControlService_ServiceDesc is the grpc.ServiceDesc for SensorUpgradeControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorUpgradeControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "central.SensorUpgradeControlService",
	HandlerType: (*SensorUpgradeControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpgradeCheckInFromUpgrader",
			Handler:    _SensorUpgradeControlService_UpgradeCheckInFromUpgrader_Handler,
		},
		{
			MethodName: "UpgradeCheckInFromSensor",
			Handler:    _SensorUpgradeControlService_UpgradeCheckInFromSensor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalapi/central/sensor_upgrade_ctrl_iservice.proto",
}
