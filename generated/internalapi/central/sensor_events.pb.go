// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: internalapi/central/sensor_events.proto

package central

import (
	compliance "github.com/stackrox/rox/generated/internalapi/compliance"
	v4 "github.com/stackrox/rox/generated/internalapi/scanner/v4"
	storage "github.com/stackrox/rox/generated/storage"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceAction int32

const (
	ResourceAction_UNSET_ACTION_RESOURCE ResourceAction = 0
	ResourceAction_CREATE_RESOURCE       ResourceAction = 1
	ResourceAction_REMOVE_RESOURCE       ResourceAction = 2
	ResourceAction_UPDATE_RESOURCE       ResourceAction = 3
	ResourceAction_SYNC_RESOURCE         ResourceAction = 4
)

// Enum value maps for ResourceAction.
var (
	ResourceAction_name = map[int32]string{
		0: "UNSET_ACTION_RESOURCE",
		1: "CREATE_RESOURCE",
		2: "REMOVE_RESOURCE",
		3: "UPDATE_RESOURCE",
		4: "SYNC_RESOURCE",
	}
	ResourceAction_value = map[string]int32{
		"UNSET_ACTION_RESOURCE": 0,
		"CREATE_RESOURCE":       1,
		"REMOVE_RESOURCE":       2,
		"UPDATE_RESOURCE":       3,
		"SYNC_RESOURCE":         4,
	}
)

func (x ResourceAction) Enum() *ResourceAction {
	p := new(ResourceAction)
	*p = x
	return p
}

func (x ResourceAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceAction) Descriptor() protoreflect.EnumDescriptor {
	return file_internalapi_central_sensor_events_proto_enumTypes[0].Descriptor()
}

func (ResourceAction) Type() protoreflect.EnumType {
	return &file_internalapi_central_sensor_events_proto_enumTypes[0]
}

func (x ResourceAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceAction.Descriptor instead.
func (ResourceAction) EnumDescriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{0}
}

type AlertResults_Source int32

const (
	AlertResults_DEPLOYMENT_EVENT AlertResults_Source = 0
	AlertResults_AUDIT_EVENT      AlertResults_Source = 1
)

// Enum value maps for AlertResults_Source.
var (
	AlertResults_Source_name = map[int32]string{
		0: "DEPLOYMENT_EVENT",
		1: "AUDIT_EVENT",
	}
	AlertResults_Source_value = map[string]int32{
		"DEPLOYMENT_EVENT": 0,
		"AUDIT_EVENT":      1,
	}
)

func (x AlertResults_Source) Enum() *AlertResults_Source {
	p := new(AlertResults_Source)
	*p = x
	return p
}

func (x AlertResults_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertResults_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_internalapi_central_sensor_events_proto_enumTypes[1].Descriptor()
}

func (AlertResults_Source) Type() protoreflect.EnumType {
	return &file_internalapi_central_sensor_events_proto_enumTypes[1]
}

func (x AlertResults_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertResults_Source.Descriptor instead.
func (AlertResults_Source) EnumDescriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{1, 0}
}

type ReprocessDeploymentRisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *ReprocessDeploymentRisk) Reset() {
	*x = ReprocessDeploymentRisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReprocessDeploymentRisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReprocessDeploymentRisk) ProtoMessage() {}

func (x *ReprocessDeploymentRisk) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReprocessDeploymentRisk.ProtoReflect.Descriptor instead.
func (*ReprocessDeploymentRisk) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{0}
}

func (x *ReprocessDeploymentRisk) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type AlertResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only relevant if source == DEPLOYMENT.
	DeploymentId string                 `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Alerts       []*storage.Alert       `protobuf:"bytes,2,rep,name=alerts,proto3" json:"alerts,omitempty"`
	Stage        storage.LifecycleStage `protobuf:"varint,3,opt,name=stage,proto3,enum=storage.LifecycleStage" json:"stage,omitempty"`
	Source       AlertResults_Source    `protobuf:"varint,4,opt,name=source,proto3,enum=central.AlertResults_Source" json:"source,omitempty"`
}

func (x *AlertResults) Reset() {
	*x = AlertResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertResults) ProtoMessage() {}

func (x *AlertResults) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertResults.ProtoReflect.Descriptor instead.
func (*AlertResults) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{1}
}

func (x *AlertResults) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *AlertResults) GetAlerts() []*storage.Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *AlertResults) GetStage() storage.LifecycleStage {
	if x != nil {
		return x.Stage
	}
	return storage.LifecycleStage(0)
}

func (x *AlertResults) GetSource() AlertResults_Source {
	if x != nil {
		return x.Source
	}
	return AlertResults_DEPLOYMENT_EVENT
}

type Timing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dispatcher string `protobuf:"bytes,1,opt,name=dispatcher,proto3" json:"dispatcher,omitempty"`
	Resource   string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Nanos      int64  `protobuf:"varint,3,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Timing) Reset() {
	*x = Timing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing) ProtoMessage() {}

func (x *Timing) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing.ProtoReflect.Descriptor instead.
func (*Timing) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{2}
}

func (x *Timing) GetDispatcher() string {
	if x != nil {
		return x.Dispatcher
	}
	return ""
}

func (x *Timing) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Timing) GetNanos() int64 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

// Next tag: 32.
type SensorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These fields may be duplicated in the individual events, but avoid the need to branch all the time
	Id     string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Action ResourceAction `protobuf:"varint,2,opt,name=action,proto3,enum=central.ResourceAction" json:"action,omitempty"`
	Timing *Timing        `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are assignable to SensorHashOneof:
	//
	//	*SensorEvent_SensorHash
	SensorHashOneof isSensorEvent_SensorHashOneof `protobuf_oneof:"sensor_hash_oneof"`
	// Types that are assignable to Resource:
	//
	//	*SensorEvent_NetworkPolicy
	//	*SensorEvent_Deployment
	//	*SensorEvent_Pod
	//	*SensorEvent_Namespace
	//	*SensorEvent_Secret
	//	*SensorEvent_Node
	//	*SensorEvent_NodeInventory
	//	*SensorEvent_IndexReport
	//	*SensorEvent_ServiceAccount
	//	*SensorEvent_Role
	//	*SensorEvent_Binding
	//	*SensorEvent_ProcessIndicator
	//	*SensorEvent_ProviderMetadata
	//	*SensorEvent_Synced
	//	*SensorEvent_OrchestratorMetadata
	//	*SensorEvent_ImageIntegration
	//	*SensorEvent_ReprocessDeployment
	//	*SensorEvent_AlertResults
	//	*SensorEvent_ComplianceOperatorResult
	//	*SensorEvent_ComplianceOperatorProfile
	//	*SensorEvent_ComplianceOperatorRule
	//	*SensorEvent_ComplianceOperatorScanSettingBinding
	//	*SensorEvent_ComplianceOperatorScan
	//	*SensorEvent_ComplianceOperatorResultV2
	//	*SensorEvent_ComplianceOperatorProfileV2
	//	*SensorEvent_ComplianceOperatorRuleV2
	//	*SensorEvent_ComplianceOperatorScanV2
	//	*SensorEvent_ComplianceOperatorScanSettingBindingV2
	//	*SensorEvent_ComplianceOperatorSuiteV2
	//	*SensorEvent_ComplianceOperatorRemediationV2
	Resource isSensorEvent_Resource `protobuf_oneof:"resource"`
}

func (x *SensorEvent) Reset() {
	*x = SensorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorEvent) ProtoMessage() {}

func (x *SensorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorEvent.ProtoReflect.Descriptor instead.
func (*SensorEvent) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{3}
}

func (x *SensorEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SensorEvent) GetAction() ResourceAction {
	if x != nil {
		return x.Action
	}
	return ResourceAction_UNSET_ACTION_RESOURCE
}

func (x *SensorEvent) GetTiming() *Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (m *SensorEvent) GetSensorHashOneof() isSensorEvent_SensorHashOneof {
	if m != nil {
		return m.SensorHashOneof
	}
	return nil
}

func (x *SensorEvent) GetSensorHash() uint64 {
	if x, ok := x.GetSensorHashOneof().(*SensorEvent_SensorHash); ok {
		return x.SensorHash
	}
	return 0
}

func (m *SensorEvent) GetResource() isSensorEvent_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *SensorEvent) GetNetworkPolicy() *storage.NetworkPolicy {
	if x, ok := x.GetResource().(*SensorEvent_NetworkPolicy); ok {
		return x.NetworkPolicy
	}
	return nil
}

func (x *SensorEvent) GetDeployment() *storage.Deployment {
	if x, ok := x.GetResource().(*SensorEvent_Deployment); ok {
		return x.Deployment
	}
	return nil
}

func (x *SensorEvent) GetPod() *storage.Pod {
	if x, ok := x.GetResource().(*SensorEvent_Pod); ok {
		return x.Pod
	}
	return nil
}

func (x *SensorEvent) GetNamespace() *storage.NamespaceMetadata {
	if x, ok := x.GetResource().(*SensorEvent_Namespace); ok {
		return x.Namespace
	}
	return nil
}

func (x *SensorEvent) GetSecret() *storage.Secret {
	if x, ok := x.GetResource().(*SensorEvent_Secret); ok {
		return x.Secret
	}
	return nil
}

func (x *SensorEvent) GetNode() *storage.Node {
	if x, ok := x.GetResource().(*SensorEvent_Node); ok {
		return x.Node
	}
	return nil
}

func (x *SensorEvent) GetNodeInventory() *storage.NodeInventory {
	if x, ok := x.GetResource().(*SensorEvent_NodeInventory); ok {
		return x.NodeInventory
	}
	return nil
}

func (x *SensorEvent) GetIndexReport() *v4.IndexReport {
	if x, ok := x.GetResource().(*SensorEvent_IndexReport); ok {
		return x.IndexReport
	}
	return nil
}

func (x *SensorEvent) GetServiceAccount() *storage.ServiceAccount {
	if x, ok := x.GetResource().(*SensorEvent_ServiceAccount); ok {
		return x.ServiceAccount
	}
	return nil
}

func (x *SensorEvent) GetRole() *storage.K8SRole {
	if x, ok := x.GetResource().(*SensorEvent_Role); ok {
		return x.Role
	}
	return nil
}

func (x *SensorEvent) GetBinding() *storage.K8SRoleBinding {
	if x, ok := x.GetResource().(*SensorEvent_Binding); ok {
		return x.Binding
	}
	return nil
}

func (x *SensorEvent) GetProcessIndicator() *storage.ProcessIndicator {
	if x, ok := x.GetResource().(*SensorEvent_ProcessIndicator); ok {
		return x.ProcessIndicator
	}
	return nil
}

func (x *SensorEvent) GetProviderMetadata() *storage.ProviderMetadata {
	if x, ok := x.GetResource().(*SensorEvent_ProviderMetadata); ok {
		return x.ProviderMetadata
	}
	return nil
}

func (x *SensorEvent) GetSynced() *SensorEvent_ResourcesSynced {
	if x, ok := x.GetResource().(*SensorEvent_Synced); ok {
		return x.Synced
	}
	return nil
}

func (x *SensorEvent) GetOrchestratorMetadata() *storage.OrchestratorMetadata {
	if x, ok := x.GetResource().(*SensorEvent_OrchestratorMetadata); ok {
		return x.OrchestratorMetadata
	}
	return nil
}

func (x *SensorEvent) GetImageIntegration() *storage.ImageIntegration {
	if x, ok := x.GetResource().(*SensorEvent_ImageIntegration); ok {
		return x.ImageIntegration
	}
	return nil
}

func (x *SensorEvent) GetReprocessDeployment() *ReprocessDeploymentRisk {
	if x, ok := x.GetResource().(*SensorEvent_ReprocessDeployment); ok {
		return x.ReprocessDeployment
	}
	return nil
}

func (x *SensorEvent) GetAlertResults() *AlertResults {
	if x, ok := x.GetResource().(*SensorEvent_AlertResults); ok {
		return x.AlertResults
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorResult() *storage.ComplianceOperatorCheckResult {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorResult); ok {
		return x.ComplianceOperatorResult
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorProfile() *storage.ComplianceOperatorProfile {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorProfile); ok {
		return x.ComplianceOperatorProfile
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorRule() *storage.ComplianceOperatorRule {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorRule); ok {
		return x.ComplianceOperatorRule
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorScanSettingBinding() *storage.ComplianceOperatorScanSettingBinding {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorScanSettingBinding); ok {
		return x.ComplianceOperatorScanSettingBinding
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorScan() *storage.ComplianceOperatorScan {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorScan); ok {
		return x.ComplianceOperatorScan
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorResultV2() *ComplianceOperatorCheckResultV2 {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorResultV2); ok {
		return x.ComplianceOperatorResultV2
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorProfileV2() *ComplianceOperatorProfileV2 {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorProfileV2); ok {
		return x.ComplianceOperatorProfileV2
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorRuleV2() *ComplianceOperatorRuleV2 {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorRuleV2); ok {
		return x.ComplianceOperatorRuleV2
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorScanV2() *ComplianceOperatorScanV2 {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorScanV2); ok {
		return x.ComplianceOperatorScanV2
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorScanSettingBindingV2() *ComplianceOperatorScanSettingBindingV2 {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorScanSettingBindingV2); ok {
		return x.ComplianceOperatorScanSettingBindingV2
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorSuiteV2() *ComplianceOperatorSuiteV2 {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorSuiteV2); ok {
		return x.ComplianceOperatorSuiteV2
	}
	return nil
}

func (x *SensorEvent) GetComplianceOperatorRemediationV2() *ComplianceOperatorRemediationV2 {
	if x, ok := x.GetResource().(*SensorEvent_ComplianceOperatorRemediationV2); ok {
		return x.ComplianceOperatorRemediationV2
	}
	return nil
}

type isSensorEvent_SensorHashOneof interface {
	isSensorEvent_SensorHashOneof()
}

type SensorEvent_SensorHash struct {
	SensorHash uint64 `protobuf:"varint,26,opt,name=sensor_hash,json=sensorHash,proto3,oneof"`
}

func (*SensorEvent_SensorHash) isSensorEvent_SensorHashOneof() {}

type isSensorEvent_Resource interface {
	isSensorEvent_Resource()
}

type SensorEvent_NetworkPolicy struct {
	NetworkPolicy *storage.NetworkPolicy `protobuf:"bytes,4,opt,name=network_policy,json=networkPolicy,proto3,oneof"`
}

type SensorEvent_Deployment struct {
	Deployment *storage.Deployment `protobuf:"bytes,5,opt,name=deployment,proto3,oneof"`
}

type SensorEvent_Pod struct {
	Pod *storage.Pod `protobuf:"bytes,19,opt,name=pod,proto3,oneof"`
}

type SensorEvent_Namespace struct {
	Namespace *storage.NamespaceMetadata `protobuf:"bytes,6,opt,name=namespace,proto3,oneof"`
}

type SensorEvent_Secret struct {
	Secret *storage.Secret `protobuf:"bytes,7,opt,name=secret,proto3,oneof"`
}

type SensorEvent_Node struct {
	Node *storage.Node `protobuf:"bytes,9,opt,name=node,proto3,oneof"`
}

type SensorEvent_NodeInventory struct {
	NodeInventory *storage.NodeInventory `protobuf:"bytes,25,opt,name=node_inventory,json=nodeInventory,proto3,oneof"`
}

type SensorEvent_IndexReport struct {
	IndexReport *v4.IndexReport `protobuf:"bytes,34,opt,name=index_report,json=indexReport,proto3,oneof"`
}

type SensorEvent_ServiceAccount struct {
	ServiceAccount *storage.ServiceAccount `protobuf:"bytes,14,opt,name=service_account,json=serviceAccount,proto3,oneof"`
}

type SensorEvent_Role struct {
	Role *storage.K8SRole `protobuf:"bytes,15,opt,name=role,proto3,oneof"`
}

type SensorEvent_Binding struct {
	Binding *storage.K8SRoleBinding `protobuf:"bytes,16,opt,name=binding,proto3,oneof"`
}

type SensorEvent_ProcessIndicator struct {
	ProcessIndicator *storage.ProcessIndicator `protobuf:"bytes,8,opt,name=process_indicator,json=processIndicator,proto3,oneof"`
}

type SensorEvent_ProviderMetadata struct {
	ProviderMetadata *storage.ProviderMetadata `protobuf:"bytes,10,opt,name=provider_metadata,json=providerMetadata,proto3,oneof"`
}

type SensorEvent_Synced struct {
	Synced *SensorEvent_ResourcesSynced `protobuf:"bytes,11,opt,name=synced,proto3,oneof"`
}

type SensorEvent_OrchestratorMetadata struct {
	OrchestratorMetadata *storage.OrchestratorMetadata `protobuf:"bytes,12,opt,name=orchestrator_metadata,json=orchestratorMetadata,proto3,oneof"`
}

type SensorEvent_ImageIntegration struct {
	ImageIntegration *storage.ImageIntegration `protobuf:"bytes,13,opt,name=image_integration,json=imageIntegration,proto3,oneof"`
}

type SensorEvent_ReprocessDeployment struct {
	ReprocessDeployment *ReprocessDeploymentRisk `protobuf:"bytes,17,opt,name=reprocess_deployment,json=reprocessDeployment,proto3,oneof"`
}

type SensorEvent_AlertResults struct {
	AlertResults *AlertResults `protobuf:"bytes,18,opt,name=alert_results,json=alertResults,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorResult struct {
	ComplianceOperatorResult *storage.ComplianceOperatorCheckResult `protobuf:"bytes,20,opt,name=compliance_operator_result,json=complianceOperatorResult,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorProfile struct {
	ComplianceOperatorProfile *storage.ComplianceOperatorProfile `protobuf:"bytes,21,opt,name=compliance_operator_profile,json=complianceOperatorProfile,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorRule struct {
	ComplianceOperatorRule *storage.ComplianceOperatorRule `protobuf:"bytes,22,opt,name=compliance_operator_rule,json=complianceOperatorRule,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorScanSettingBinding struct {
	ComplianceOperatorScanSettingBinding *storage.ComplianceOperatorScanSettingBinding `protobuf:"bytes,23,opt,name=compliance_operator_scan_setting_binding,json=complianceOperatorScanSettingBinding,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorScan struct {
	ComplianceOperatorScan *storage.ComplianceOperatorScan `protobuf:"bytes,24,opt,name=compliance_operator_scan,json=complianceOperatorScan,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorResultV2 struct {
	// V2 Compliance
	ComplianceOperatorResultV2 *ComplianceOperatorCheckResultV2 `protobuf:"bytes,27,opt,name=compliance_operator_result_v2,json=complianceOperatorResultV2,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorProfileV2 struct {
	ComplianceOperatorProfileV2 *ComplianceOperatorProfileV2 `protobuf:"bytes,28,opt,name=compliance_operator_profile_v2,json=complianceOperatorProfileV2,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorRuleV2 struct {
	ComplianceOperatorRuleV2 *ComplianceOperatorRuleV2 `protobuf:"bytes,29,opt,name=compliance_operator_rule_v2,json=complianceOperatorRuleV2,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorScanV2 struct {
	ComplianceOperatorScanV2 *ComplianceOperatorScanV2 `protobuf:"bytes,30,opt,name=compliance_operator_scan_v2,json=complianceOperatorScanV2,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorScanSettingBindingV2 struct {
	ComplianceOperatorScanSettingBindingV2 *ComplianceOperatorScanSettingBindingV2 `protobuf:"bytes,31,opt,name=compliance_operator_scan_setting_binding_v2,json=complianceOperatorScanSettingBindingV2,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorSuiteV2 struct {
	ComplianceOperatorSuiteV2 *ComplianceOperatorSuiteV2 `protobuf:"bytes,32,opt,name=compliance_operator_suite_v2,json=complianceOperatorSuiteV2,proto3,oneof"`
}

type SensorEvent_ComplianceOperatorRemediationV2 struct {
	ComplianceOperatorRemediationV2 *ComplianceOperatorRemediationV2 `protobuf:"bytes,33,opt,name=compliance_operator_remediation_v2,json=complianceOperatorRemediationV2,proto3,oneof"`
}

func (*SensorEvent_NetworkPolicy) isSensorEvent_Resource() {}

func (*SensorEvent_Deployment) isSensorEvent_Resource() {}

func (*SensorEvent_Pod) isSensorEvent_Resource() {}

func (*SensorEvent_Namespace) isSensorEvent_Resource() {}

func (*SensorEvent_Secret) isSensorEvent_Resource() {}

func (*SensorEvent_Node) isSensorEvent_Resource() {}

func (*SensorEvent_NodeInventory) isSensorEvent_Resource() {}

func (*SensorEvent_IndexReport) isSensorEvent_Resource() {}

func (*SensorEvent_ServiceAccount) isSensorEvent_Resource() {}

func (*SensorEvent_Role) isSensorEvent_Resource() {}

func (*SensorEvent_Binding) isSensorEvent_Resource() {}

func (*SensorEvent_ProcessIndicator) isSensorEvent_Resource() {}

func (*SensorEvent_ProviderMetadata) isSensorEvent_Resource() {}

func (*SensorEvent_Synced) isSensorEvent_Resource() {}

func (*SensorEvent_OrchestratorMetadata) isSensorEvent_Resource() {}

func (*SensorEvent_ImageIntegration) isSensorEvent_Resource() {}

func (*SensorEvent_ReprocessDeployment) isSensorEvent_Resource() {}

func (*SensorEvent_AlertResults) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorResult) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorProfile) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorRule) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorScanSettingBinding) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorScan) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorResultV2) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorProfileV2) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorRuleV2) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorScanV2) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorScanSettingBindingV2) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorSuiteV2) isSensorEvent_Resource() {}

func (*SensorEvent_ComplianceOperatorRemediationV2) isSensorEvent_Resource() {}

type SensorEnforcement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enforcement storage.EnforcementAction `protobuf:"varint,1,opt,name=enforcement,proto3,enum=storage.EnforcementAction" json:"enforcement,omitempty"`
	// Types that are assignable to Resource:
	//
	//	*SensorEnforcement_Deployment
	//	*SensorEnforcement_ContainerInstance
	Resource isSensorEnforcement_Resource `protobuf_oneof:"resource"`
}

func (x *SensorEnforcement) Reset() {
	*x = SensorEnforcement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorEnforcement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorEnforcement) ProtoMessage() {}

func (x *SensorEnforcement) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorEnforcement.ProtoReflect.Descriptor instead.
func (*SensorEnforcement) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{4}
}

func (x *SensorEnforcement) GetEnforcement() storage.EnforcementAction {
	if x != nil {
		return x.Enforcement
	}
	return storage.EnforcementAction(0)
}

func (m *SensorEnforcement) GetResource() isSensorEnforcement_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *SensorEnforcement) GetDeployment() *DeploymentEnforcement {
	if x, ok := x.GetResource().(*SensorEnforcement_Deployment); ok {
		return x.Deployment
	}
	return nil
}

func (x *SensorEnforcement) GetContainerInstance() *ContainerInstanceEnforcement {
	if x, ok := x.GetResource().(*SensorEnforcement_ContainerInstance); ok {
		return x.ContainerInstance
	}
	return nil
}

type isSensorEnforcement_Resource interface {
	isSensorEnforcement_Resource()
}

type SensorEnforcement_Deployment struct {
	Deployment *DeploymentEnforcement `protobuf:"bytes,2,opt,name=deployment,proto3,oneof"`
}

type SensorEnforcement_ContainerInstance struct {
	ContainerInstance *ContainerInstanceEnforcement `protobuf:"bytes,3,opt,name=container_instance,json=containerInstance,proto3,oneof"`
}

func (*SensorEnforcement_Deployment) isSensorEnforcement_Resource() {}

func (*SensorEnforcement_ContainerInstance) isSensorEnforcement_Resource() {}

type DeploymentEnforcement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId   string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	DeploymentName string `protobuf:"bytes,2,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	DeploymentType string `protobuf:"bytes,3,opt,name=deployment_type,json=deploymentType,proto3" json:"deployment_type,omitempty"`
	Namespace      string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	AlertId        string `protobuf:"bytes,5,opt,name=alert_id,json=alertId,proto3" json:"alert_id,omitempty"`
	PolicyName     string `protobuf:"bytes,6,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
}

func (x *DeploymentEnforcement) Reset() {
	*x = DeploymentEnforcement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentEnforcement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentEnforcement) ProtoMessage() {}

func (x *DeploymentEnforcement) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentEnforcement.ProtoReflect.Descriptor instead.
func (*DeploymentEnforcement) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{5}
}

func (x *DeploymentEnforcement) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *DeploymentEnforcement) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *DeploymentEnforcement) GetDeploymentType() string {
	if x != nil {
		return x.DeploymentType
	}
	return ""
}

func (x *DeploymentEnforcement) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeploymentEnforcement) GetAlertId() string {
	if x != nil {
		return x.AlertId
	}
	return ""
}

func (x *DeploymentEnforcement) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

type ContainerInstanceEnforcement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodId                 string                 `protobuf:"bytes,2,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	DeploymentEnforcement *DeploymentEnforcement `protobuf:"bytes,3,opt,name=deployment_enforcement,json=deploymentEnforcement,proto3" json:"deployment_enforcement,omitempty"`
}

func (x *ContainerInstanceEnforcement) Reset() {
	*x = ContainerInstanceEnforcement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInstanceEnforcement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInstanceEnforcement) ProtoMessage() {}

func (x *ContainerInstanceEnforcement) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInstanceEnforcement.ProtoReflect.Descriptor instead.
func (*ContainerInstanceEnforcement) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{6}
}

func (x *ContainerInstanceEnforcement) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

func (x *ContainerInstanceEnforcement) GetDeploymentEnforcement() *DeploymentEnforcement {
	if x != nil {
		return x.DeploymentEnforcement
	}
	return nil
}

type ScrapeCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScrapeId string `protobuf:"bytes,1,opt,name=scrape_id,json=scrapeId,proto3" json:"scrape_id,omitempty"`
	// Types that are assignable to Command:
	//
	//	*ScrapeCommand_StartScrape
	//	*ScrapeCommand_KillScrape
	Command isScrapeCommand_Command `protobuf_oneof:"command"`
}

func (x *ScrapeCommand) Reset() {
	*x = ScrapeCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapeCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapeCommand) ProtoMessage() {}

func (x *ScrapeCommand) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapeCommand.ProtoReflect.Descriptor instead.
func (*ScrapeCommand) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{7}
}

func (x *ScrapeCommand) GetScrapeId() string {
	if x != nil {
		return x.ScrapeId
	}
	return ""
}

func (m *ScrapeCommand) GetCommand() isScrapeCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *ScrapeCommand) GetStartScrape() *StartScrape {
	if x, ok := x.GetCommand().(*ScrapeCommand_StartScrape); ok {
		return x.StartScrape
	}
	return nil
}

func (x *ScrapeCommand) GetKillScrape() *KillScrape {
	if x, ok := x.GetCommand().(*ScrapeCommand_KillScrape); ok {
		return x.KillScrape
	}
	return nil
}

type isScrapeCommand_Command interface {
	isScrapeCommand_Command()
}

type ScrapeCommand_StartScrape struct {
	StartScrape *StartScrape `protobuf:"bytes,2,opt,name=start_scrape,json=startScrape,proto3,oneof"`
}

type ScrapeCommand_KillScrape struct {
	KillScrape *KillScrape `protobuf:"bytes,3,opt,name=kill_scrape,json=killScrape,proto3,oneof"`
}

func (*ScrapeCommand_StartScrape) isScrapeCommand_Command() {}

func (*ScrapeCommand_KillScrape) isScrapeCommand_Command() {}

type StartScrape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dictates the hosts we expect results from.
	Hostnames []string `protobuf:"bytes,1,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	// Dictates which standards the compliance pods should run.
	Standards []string `protobuf:"bytes,2,rep,name=standards,proto3" json:"standards,omitempty"`
}

func (x *StartScrape) Reset() {
	*x = StartScrape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartScrape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartScrape) ProtoMessage() {}

func (x *StartScrape) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartScrape.ProtoReflect.Descriptor instead.
func (*StartScrape) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{8}
}

func (x *StartScrape) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *StartScrape) GetStandards() []string {
	if x != nil {
		return x.Standards
	}
	return nil
}

type KillScrape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KillScrape) Reset() {
	*x = KillScrape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillScrape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillScrape) ProtoMessage() {}

func (x *KillScrape) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillScrape.ProtoReflect.Descriptor instead.
func (*KillScrape) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{9}
}

type ScrapeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScrapeId string `protobuf:"bytes,1,opt,name=scrape_id,json=scrapeId,proto3" json:"scrape_id,omitempty"`
	// Types that are assignable to Update:
	//
	//	*ScrapeUpdate_ComplianceReturn
	//	*ScrapeUpdate_ScrapeStarted
	//	*ScrapeUpdate_ScrapeKilled
	Update isScrapeUpdate_Update `protobuf_oneof:"update"`
}

func (x *ScrapeUpdate) Reset() {
	*x = ScrapeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapeUpdate) ProtoMessage() {}

func (x *ScrapeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapeUpdate.ProtoReflect.Descriptor instead.
func (*ScrapeUpdate) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{10}
}

func (x *ScrapeUpdate) GetScrapeId() string {
	if x != nil {
		return x.ScrapeId
	}
	return ""
}

func (m *ScrapeUpdate) GetUpdate() isScrapeUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *ScrapeUpdate) GetComplianceReturn() *compliance.ComplianceReturn {
	if x, ok := x.GetUpdate().(*ScrapeUpdate_ComplianceReturn); ok {
		return x.ComplianceReturn
	}
	return nil
}

func (x *ScrapeUpdate) GetScrapeStarted() *ScrapeStarted {
	if x, ok := x.GetUpdate().(*ScrapeUpdate_ScrapeStarted); ok {
		return x.ScrapeStarted
	}
	return nil
}

func (x *ScrapeUpdate) GetScrapeKilled() *ScrapeKilled {
	if x, ok := x.GetUpdate().(*ScrapeUpdate_ScrapeKilled); ok {
		return x.ScrapeKilled
	}
	return nil
}

type isScrapeUpdate_Update interface {
	isScrapeUpdate_Update()
}

type ScrapeUpdate_ComplianceReturn struct {
	ComplianceReturn *compliance.ComplianceReturn `protobuf:"bytes,2,opt,name=compliance_return,json=complianceReturn,proto3,oneof"`
}

type ScrapeUpdate_ScrapeStarted struct {
	ScrapeStarted *ScrapeStarted `protobuf:"bytes,3,opt,name=scrape_started,json=scrapeStarted,proto3,oneof"`
}

type ScrapeUpdate_ScrapeKilled struct {
	ScrapeKilled *ScrapeKilled `protobuf:"bytes,4,opt,name=scrape_killed,json=scrapeKilled,proto3,oneof"`
}

func (*ScrapeUpdate_ComplianceReturn) isScrapeUpdate_Update() {}

func (*ScrapeUpdate_ScrapeStarted) isScrapeUpdate_Update() {}

func (*ScrapeUpdate_ScrapeKilled) isScrapeUpdate_Update() {}

type ScrapeStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ScrapeStarted) Reset() {
	*x = ScrapeStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapeStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapeStarted) ProtoMessage() {}

func (x *ScrapeStarted) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapeStarted.ProtoReflect.Descriptor instead.
func (*ScrapeStarted) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{11}
}

func (x *ScrapeStarted) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ScrapeKilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ScrapeKilled) Reset() {
	*x = ScrapeKilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapeKilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapeKilled) ProtoMessage() {}

func (x *ScrapeKilled) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapeKilled.ProtoReflect.Descriptor instead.
func (*ScrapeKilled) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{12}
}

func (x *ScrapeKilled) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type NetworkPoliciesCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId   int64                           `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Payload *NetworkPoliciesCommand_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *NetworkPoliciesCommand) Reset() {
	*x = NetworkPoliciesCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPoliciesCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPoliciesCommand) ProtoMessage() {}

func (x *NetworkPoliciesCommand) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPoliciesCommand.ProtoReflect.Descriptor instead.
func (*NetworkPoliciesCommand) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{13}
}

func (x *NetworkPoliciesCommand) GetSeqId() int64 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *NetworkPoliciesCommand) GetPayload() *NetworkPoliciesCommand_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type NetworkPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId   int64                            `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Payload *NetworkPoliciesResponse_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *NetworkPoliciesResponse) Reset() {
	*x = NetworkPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPoliciesResponse) ProtoMessage() {}

func (x *NetworkPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPoliciesResponse.ProtoReflect.Descriptor instead.
func (*NetworkPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{14}
}

func (x *NetworkPoliciesResponse) GetSeqId() int64 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *NetworkPoliciesResponse) GetPayload() *NetworkPoliciesResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SensorEvent_ResourcesSynced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnchangedIds []string `protobuf:"bytes,1,rep,name=unchanged_ids,json=unchangedIds,proto3" json:"unchanged_ids,omitempty"`
}

func (x *SensorEvent_ResourcesSynced) Reset() {
	*x = SensorEvent_ResourcesSynced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorEvent_ResourcesSynced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorEvent_ResourcesSynced) ProtoMessage() {}

func (x *SensorEvent_ResourcesSynced) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorEvent_ResourcesSynced.ProtoReflect.Descriptor instead.
func (*SensorEvent_ResourcesSynced) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SensorEvent_ResourcesSynced) GetUnchangedIds() []string {
	if x != nil {
		return x.UnchangedIds
	}
	return nil
}

type NetworkPoliciesCommand_Apply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyId      string                             `protobuf:"bytes,1,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	Modification *storage.NetworkPolicyModification `protobuf:"bytes,2,opt,name=modification,proto3" json:"modification,omitempty"`
}

func (x *NetworkPoliciesCommand_Apply) Reset() {
	*x = NetworkPoliciesCommand_Apply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPoliciesCommand_Apply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPoliciesCommand_Apply) ProtoMessage() {}

func (x *NetworkPoliciesCommand_Apply) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPoliciesCommand_Apply.ProtoReflect.Descriptor instead.
func (*NetworkPoliciesCommand_Apply) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{13, 0}
}

func (x *NetworkPoliciesCommand_Apply) GetApplyId() string {
	if x != nil {
		return x.ApplyId
	}
	return ""
}

func (x *NetworkPoliciesCommand_Apply) GetModification() *storage.NetworkPolicyModification {
	if x != nil {
		return x.Modification
	}
	return nil
}

type NetworkPoliciesCommand_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cmd:
	//
	//	*NetworkPoliciesCommand_Payload_Apply
	Cmd isNetworkPoliciesCommand_Payload_Cmd `protobuf_oneof:"cmd"`
}

func (x *NetworkPoliciesCommand_Payload) Reset() {
	*x = NetworkPoliciesCommand_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPoliciesCommand_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPoliciesCommand_Payload) ProtoMessage() {}

func (x *NetworkPoliciesCommand_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPoliciesCommand_Payload.ProtoReflect.Descriptor instead.
func (*NetworkPoliciesCommand_Payload) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{13, 1}
}

func (m *NetworkPoliciesCommand_Payload) GetCmd() isNetworkPoliciesCommand_Payload_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (x *NetworkPoliciesCommand_Payload) GetApply() *NetworkPoliciesCommand_Apply {
	if x, ok := x.GetCmd().(*NetworkPoliciesCommand_Payload_Apply); ok {
		return x.Apply
	}
	return nil
}

type isNetworkPoliciesCommand_Payload_Cmd interface {
	isNetworkPoliciesCommand_Payload_Cmd()
}

type NetworkPoliciesCommand_Payload_Apply struct {
	Apply *NetworkPoliciesCommand_Apply `protobuf:"bytes,1,opt,name=apply,proto3,oneof"`
}

func (*NetworkPoliciesCommand_Payload_Apply) isNetworkPoliciesCommand_Payload_Cmd() {}

type NetworkPoliciesResponse_Apply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyId          string                             `protobuf:"bytes,1,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	UndoModification *storage.NetworkPolicyModification `protobuf:"bytes,2,opt,name=undo_modification,json=undoModification,proto3" json:"undo_modification,omitempty"`
}

func (x *NetworkPoliciesResponse_Apply) Reset() {
	*x = NetworkPoliciesResponse_Apply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPoliciesResponse_Apply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPoliciesResponse_Apply) ProtoMessage() {}

func (x *NetworkPoliciesResponse_Apply) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPoliciesResponse_Apply.ProtoReflect.Descriptor instead.
func (*NetworkPoliciesResponse_Apply) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{14, 0}
}

func (x *NetworkPoliciesResponse_Apply) GetApplyId() string {
	if x != nil {
		return x.ApplyId
	}
	return ""
}

func (x *NetworkPoliciesResponse_Apply) GetUndoModification() *storage.NetworkPolicyModification {
	if x != nil {
		return x.UndoModification
	}
	return nil
}

type NetworkPoliciesResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *NetworkPoliciesResponse_Error) Reset() {
	*x = NetworkPoliciesResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPoliciesResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPoliciesResponse_Error) ProtoMessage() {}

func (x *NetworkPoliciesResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPoliciesResponse_Error.ProtoReflect.Descriptor instead.
func (*NetworkPoliciesResponse_Error) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{14, 1}
}

func (x *NetworkPoliciesResponse_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NetworkPoliciesResponse_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cmd:
	//
	//	*NetworkPoliciesResponse_Payload_Error
	//	*NetworkPoliciesResponse_Payload_Apply
	Cmd isNetworkPoliciesResponse_Payload_Cmd `protobuf_oneof:"cmd"`
}

func (x *NetworkPoliciesResponse_Payload) Reset() {
	*x = NetworkPoliciesResponse_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internalapi_central_sensor_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPoliciesResponse_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPoliciesResponse_Payload) ProtoMessage() {}

func (x *NetworkPoliciesResponse_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_central_sensor_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPoliciesResponse_Payload.ProtoReflect.Descriptor instead.
func (*NetworkPoliciesResponse_Payload) Descriptor() ([]byte, []int) {
	return file_internalapi_central_sensor_events_proto_rawDescGZIP(), []int{14, 2}
}

func (m *NetworkPoliciesResponse_Payload) GetCmd() isNetworkPoliciesResponse_Payload_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (x *NetworkPoliciesResponse_Payload) GetError() *NetworkPoliciesResponse_Error {
	if x, ok := x.GetCmd().(*NetworkPoliciesResponse_Payload_Error); ok {
		return x.Error
	}
	return nil
}

func (x *NetworkPoliciesResponse_Payload) GetApply() *NetworkPoliciesResponse_Apply {
	if x, ok := x.GetCmd().(*NetworkPoliciesResponse_Payload_Apply); ok {
		return x.Apply
	}
	return nil
}

type isNetworkPoliciesResponse_Payload_Cmd interface {
	isNetworkPoliciesResponse_Payload_Cmd()
}

type NetworkPoliciesResponse_Payload_Error struct {
	Error *NetworkPoliciesResponse_Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type NetworkPoliciesResponse_Payload_Apply struct {
	Apply *NetworkPoliciesResponse_Apply `protobuf:"bytes,2,opt,name=apply,proto3,oneof"`
}

func (*NetworkPoliciesResponse_Payload_Error) isNetworkPoliciesResponse_Payload_Cmd() {}

func (*NetworkPoliciesResponse_Payload_Apply) isNetworkPoliciesResponse_Payload_Cmd() {}

var File_internalapi_central_sensor_events_proto protoreflect.FileDescriptor

var file_internalapi_central_sensor_events_proto_rawDesc = []byte{
	0x0a, 0x27, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x1a, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x29, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x34, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x69, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf1, 0x01, 0x0a, 0x0c, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x06,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x5a, 0x0a, 0x06,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x22, 0xe9, 0x14, 0x0a, 0x0b, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x01, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x01, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x03, 0x70, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x48, 0x01, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x12,
	0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x01,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x01, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x01, 0x52, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x0c,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x01, 0x52, 0x0b, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4b, 0x38, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x01,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x4b, 0x38, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x48, 0x01, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x01, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x10, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3e, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x48, 0x01, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12,
	0x54, 0x0a, 0x15, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52,
	0x14, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x10, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x48,
	0x01, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x01, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x64, 0x0a, 0x1b,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x87, 0x01, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x48, 0x01, 0x52, 0x24, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x5b, 0x0a, 0x18, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x48, 0x01, 0x52, 0x16,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x6d, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x32, 0x48, 0x01, 0x52, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x56, 0x32, 0x12, 0x6b, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x56, 0x32, 0x48, 0x01, 0x52, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x56, 0x32, 0x12, 0x62, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x76,
	0x32, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x48, 0x01, 0x52, 0x18, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x62, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x56, 0x32, 0x48, 0x01,
	0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x56, 0x32, 0x12, 0x8e, 0x01, 0x0a, 0x2b, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x32, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56,
	0x32, 0x48, 0x01, 0x52, 0x26, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x12, 0x65, 0x0a, 0x1c, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x56, 0x32, 0x48, 0x01, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x56, 0x32, 0x12, 0x77, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x01, 0x52, 0x1f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x1a, 0x36, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x49, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xe8,
	0x01, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49,
	0x64, 0x12, 0x55, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x15, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6c, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x49, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x0c, 0x0a, 0x0a, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x22, 0x81,
	0x02, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x34, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaf, 0x02,
	0x0a, 0x16, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x1a, 0x6a, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4f,
	0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x22,
	0x9f, 0x03, 0x0a, 0x17, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x71,
	0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x73, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x75, 0x6e,
	0x64, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x21, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x90,
	0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6c, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6c, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x2a, 0x7d, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04,
	0x42, 0x1f, 0x5a, 0x1d, 0x2e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x3b, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internalapi_central_sensor_events_proto_rawDescOnce sync.Once
	file_internalapi_central_sensor_events_proto_rawDescData = file_internalapi_central_sensor_events_proto_rawDesc
)

func file_internalapi_central_sensor_events_proto_rawDescGZIP() []byte {
	file_internalapi_central_sensor_events_proto_rawDescOnce.Do(func() {
		file_internalapi_central_sensor_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_internalapi_central_sensor_events_proto_rawDescData)
	})
	return file_internalapi_central_sensor_events_proto_rawDescData
}

var file_internalapi_central_sensor_events_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_internalapi_central_sensor_events_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_internalapi_central_sensor_events_proto_goTypes = []any{
	(ResourceAction)(0),                                  // 0: central.ResourceAction
	(AlertResults_Source)(0),                             // 1: central.AlertResults.Source
	(*ReprocessDeploymentRisk)(nil),                      // 2: central.ReprocessDeploymentRisk
	(*AlertResults)(nil),                                 // 3: central.AlertResults
	(*Timing)(nil),                                       // 4: central.Timing
	(*SensorEvent)(nil),                                  // 5: central.SensorEvent
	(*SensorEnforcement)(nil),                            // 6: central.SensorEnforcement
	(*DeploymentEnforcement)(nil),                        // 7: central.DeploymentEnforcement
	(*ContainerInstanceEnforcement)(nil),                 // 8: central.ContainerInstanceEnforcement
	(*ScrapeCommand)(nil),                                // 9: central.ScrapeCommand
	(*StartScrape)(nil),                                  // 10: central.StartScrape
	(*KillScrape)(nil),                                   // 11: central.KillScrape
	(*ScrapeUpdate)(nil),                                 // 12: central.ScrapeUpdate
	(*ScrapeStarted)(nil),                                // 13: central.ScrapeStarted
	(*ScrapeKilled)(nil),                                 // 14: central.ScrapeKilled
	(*NetworkPoliciesCommand)(nil),                       // 15: central.NetworkPoliciesCommand
	(*NetworkPoliciesResponse)(nil),                      // 16: central.NetworkPoliciesResponse
	(*SensorEvent_ResourcesSynced)(nil),                  // 17: central.SensorEvent.ResourcesSynced
	(*NetworkPoliciesCommand_Apply)(nil),                 // 18: central.NetworkPoliciesCommand.Apply
	(*NetworkPoliciesCommand_Payload)(nil),               // 19: central.NetworkPoliciesCommand.Payload
	(*NetworkPoliciesResponse_Apply)(nil),                // 20: central.NetworkPoliciesResponse.Apply
	(*NetworkPoliciesResponse_Error)(nil),                // 21: central.NetworkPoliciesResponse.Error
	(*NetworkPoliciesResponse_Payload)(nil),              // 22: central.NetworkPoliciesResponse.Payload
	(*storage.Alert)(nil),                                // 23: storage.Alert
	(storage.LifecycleStage)(0),                          // 24: storage.LifecycleStage
	(*storage.NetworkPolicy)(nil),                        // 25: storage.NetworkPolicy
	(*storage.Deployment)(nil),                           // 26: storage.Deployment
	(*storage.Pod)(nil),                                  // 27: storage.Pod
	(*storage.NamespaceMetadata)(nil),                    // 28: storage.NamespaceMetadata
	(*storage.Secret)(nil),                               // 29: storage.Secret
	(*storage.Node)(nil),                                 // 30: storage.Node
	(*storage.NodeInventory)(nil),                        // 31: storage.NodeInventory
	(*v4.IndexReport)(nil),                               // 32: scanner.v4.IndexReport
	(*storage.ServiceAccount)(nil),                       // 33: storage.ServiceAccount
	(*storage.K8SRole)(nil),                              // 34: storage.K8sRole
	(*storage.K8SRoleBinding)(nil),                       // 35: storage.K8sRoleBinding
	(*storage.ProcessIndicator)(nil),                     // 36: storage.ProcessIndicator
	(*storage.ProviderMetadata)(nil),                     // 37: storage.ProviderMetadata
	(*storage.OrchestratorMetadata)(nil),                 // 38: storage.OrchestratorMetadata
	(*storage.ImageIntegration)(nil),                     // 39: storage.ImageIntegration
	(*storage.ComplianceOperatorCheckResult)(nil),        // 40: storage.ComplianceOperatorCheckResult
	(*storage.ComplianceOperatorProfile)(nil),            // 41: storage.ComplianceOperatorProfile
	(*storage.ComplianceOperatorRule)(nil),               // 42: storage.ComplianceOperatorRule
	(*storage.ComplianceOperatorScanSettingBinding)(nil), // 43: storage.ComplianceOperatorScanSettingBinding
	(*storage.ComplianceOperatorScan)(nil),               // 44: storage.ComplianceOperatorScan
	(*ComplianceOperatorCheckResultV2)(nil),              // 45: central.ComplianceOperatorCheckResultV2
	(*ComplianceOperatorProfileV2)(nil),                  // 46: central.ComplianceOperatorProfileV2
	(*ComplianceOperatorRuleV2)(nil),                     // 47: central.ComplianceOperatorRuleV2
	(*ComplianceOperatorScanV2)(nil),                     // 48: central.ComplianceOperatorScanV2
	(*ComplianceOperatorScanSettingBindingV2)(nil),       // 49: central.ComplianceOperatorScanSettingBindingV2
	(*ComplianceOperatorSuiteV2)(nil),                    // 50: central.ComplianceOperatorSuiteV2
	(*ComplianceOperatorRemediationV2)(nil),              // 51: central.ComplianceOperatorRemediationV2
	(storage.EnforcementAction)(0),                       // 52: storage.EnforcementAction
	(*compliance.ComplianceReturn)(nil),                  // 53: compliance.ComplianceReturn
	(*storage.NetworkPolicyModification)(nil),            // 54: storage.NetworkPolicyModification
}
var file_internalapi_central_sensor_events_proto_depIdxs = []int32{
	23, // 0: central.AlertResults.alerts:type_name -> storage.Alert
	24, // 1: central.AlertResults.stage:type_name -> storage.LifecycleStage
	1,  // 2: central.AlertResults.source:type_name -> central.AlertResults.Source
	0,  // 3: central.SensorEvent.action:type_name -> central.ResourceAction
	4,  // 4: central.SensorEvent.timing:type_name -> central.Timing
	25, // 5: central.SensorEvent.network_policy:type_name -> storage.NetworkPolicy
	26, // 6: central.SensorEvent.deployment:type_name -> storage.Deployment
	27, // 7: central.SensorEvent.pod:type_name -> storage.Pod
	28, // 8: central.SensorEvent.namespace:type_name -> storage.NamespaceMetadata
	29, // 9: central.SensorEvent.secret:type_name -> storage.Secret
	30, // 10: central.SensorEvent.node:type_name -> storage.Node
	31, // 11: central.SensorEvent.node_inventory:type_name -> storage.NodeInventory
	32, // 12: central.SensorEvent.index_report:type_name -> scanner.v4.IndexReport
	33, // 13: central.SensorEvent.service_account:type_name -> storage.ServiceAccount
	34, // 14: central.SensorEvent.role:type_name -> storage.K8sRole
	35, // 15: central.SensorEvent.binding:type_name -> storage.K8sRoleBinding
	36, // 16: central.SensorEvent.process_indicator:type_name -> storage.ProcessIndicator
	37, // 17: central.SensorEvent.provider_metadata:type_name -> storage.ProviderMetadata
	17, // 18: central.SensorEvent.synced:type_name -> central.SensorEvent.ResourcesSynced
	38, // 19: central.SensorEvent.orchestrator_metadata:type_name -> storage.OrchestratorMetadata
	39, // 20: central.SensorEvent.image_integration:type_name -> storage.ImageIntegration
	2,  // 21: central.SensorEvent.reprocess_deployment:type_name -> central.ReprocessDeploymentRisk
	3,  // 22: central.SensorEvent.alert_results:type_name -> central.AlertResults
	40, // 23: central.SensorEvent.compliance_operator_result:type_name -> storage.ComplianceOperatorCheckResult
	41, // 24: central.SensorEvent.compliance_operator_profile:type_name -> storage.ComplianceOperatorProfile
	42, // 25: central.SensorEvent.compliance_operator_rule:type_name -> storage.ComplianceOperatorRule
	43, // 26: central.SensorEvent.compliance_operator_scan_setting_binding:type_name -> storage.ComplianceOperatorScanSettingBinding
	44, // 27: central.SensorEvent.compliance_operator_scan:type_name -> storage.ComplianceOperatorScan
	45, // 28: central.SensorEvent.compliance_operator_result_v2:type_name -> central.ComplianceOperatorCheckResultV2
	46, // 29: central.SensorEvent.compliance_operator_profile_v2:type_name -> central.ComplianceOperatorProfileV2
	47, // 30: central.SensorEvent.compliance_operator_rule_v2:type_name -> central.ComplianceOperatorRuleV2
	48, // 31: central.SensorEvent.compliance_operator_scan_v2:type_name -> central.ComplianceOperatorScanV2
	49, // 32: central.SensorEvent.compliance_operator_scan_setting_binding_v2:type_name -> central.ComplianceOperatorScanSettingBindingV2
	50, // 33: central.SensorEvent.compliance_operator_suite_v2:type_name -> central.ComplianceOperatorSuiteV2
	51, // 34: central.SensorEvent.compliance_operator_remediation_v2:type_name -> central.ComplianceOperatorRemediationV2
	52, // 35: central.SensorEnforcement.enforcement:type_name -> storage.EnforcementAction
	7,  // 36: central.SensorEnforcement.deployment:type_name -> central.DeploymentEnforcement
	8,  // 37: central.SensorEnforcement.container_instance:type_name -> central.ContainerInstanceEnforcement
	7,  // 38: central.ContainerInstanceEnforcement.deployment_enforcement:type_name -> central.DeploymentEnforcement
	10, // 39: central.ScrapeCommand.start_scrape:type_name -> central.StartScrape
	11, // 40: central.ScrapeCommand.kill_scrape:type_name -> central.KillScrape
	53, // 41: central.ScrapeUpdate.compliance_return:type_name -> compliance.ComplianceReturn
	13, // 42: central.ScrapeUpdate.scrape_started:type_name -> central.ScrapeStarted
	14, // 43: central.ScrapeUpdate.scrape_killed:type_name -> central.ScrapeKilled
	19, // 44: central.NetworkPoliciesCommand.payload:type_name -> central.NetworkPoliciesCommand.Payload
	22, // 45: central.NetworkPoliciesResponse.payload:type_name -> central.NetworkPoliciesResponse.Payload
	54, // 46: central.NetworkPoliciesCommand.Apply.modification:type_name -> storage.NetworkPolicyModification
	18, // 47: central.NetworkPoliciesCommand.Payload.apply:type_name -> central.NetworkPoliciesCommand.Apply
	54, // 48: central.NetworkPoliciesResponse.Apply.undo_modification:type_name -> storage.NetworkPolicyModification
	21, // 49: central.NetworkPoliciesResponse.Payload.error:type_name -> central.NetworkPoliciesResponse.Error
	20, // 50: central.NetworkPoliciesResponse.Payload.apply:type_name -> central.NetworkPoliciesResponse.Apply
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_internalapi_central_sensor_events_proto_init() }
func file_internalapi_central_sensor_events_proto_init() {
	if File_internalapi_central_sensor_events_proto != nil {
		return
	}
	file_internalapi_central_compliance_operator_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_internalapi_central_sensor_events_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ReprocessDeploymentRisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AlertResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Timing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SensorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SensorEnforcement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentEnforcement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerInstanceEnforcement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ScrapeCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*StartScrape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*KillScrape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ScrapeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ScrapeStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ScrapeKilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkPoliciesCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SensorEvent_ResourcesSynced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkPoliciesCommand_Apply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkPoliciesCommand_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkPoliciesResponse_Apply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkPoliciesResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internalapi_central_sensor_events_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkPoliciesResponse_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internalapi_central_sensor_events_proto_msgTypes[3].OneofWrappers = []any{
		(*SensorEvent_SensorHash)(nil),
		(*SensorEvent_NetworkPolicy)(nil),
		(*SensorEvent_Deployment)(nil),
		(*SensorEvent_Pod)(nil),
		(*SensorEvent_Namespace)(nil),
		(*SensorEvent_Secret)(nil),
		(*SensorEvent_Node)(nil),
		(*SensorEvent_NodeInventory)(nil),
		(*SensorEvent_IndexReport)(nil),
		(*SensorEvent_ServiceAccount)(nil),
		(*SensorEvent_Role)(nil),
		(*SensorEvent_Binding)(nil),
		(*SensorEvent_ProcessIndicator)(nil),
		(*SensorEvent_ProviderMetadata)(nil),
		(*SensorEvent_Synced)(nil),
		(*SensorEvent_OrchestratorMetadata)(nil),
		(*SensorEvent_ImageIntegration)(nil),
		(*SensorEvent_ReprocessDeployment)(nil),
		(*SensorEvent_AlertResults)(nil),
		(*SensorEvent_ComplianceOperatorResult)(nil),
		(*SensorEvent_ComplianceOperatorProfile)(nil),
		(*SensorEvent_ComplianceOperatorRule)(nil),
		(*SensorEvent_ComplianceOperatorScanSettingBinding)(nil),
		(*SensorEvent_ComplianceOperatorScan)(nil),
		(*SensorEvent_ComplianceOperatorResultV2)(nil),
		(*SensorEvent_ComplianceOperatorProfileV2)(nil),
		(*SensorEvent_ComplianceOperatorRuleV2)(nil),
		(*SensorEvent_ComplianceOperatorScanV2)(nil),
		(*SensorEvent_ComplianceOperatorScanSettingBindingV2)(nil),
		(*SensorEvent_ComplianceOperatorSuiteV2)(nil),
		(*SensorEvent_ComplianceOperatorRemediationV2)(nil),
	}
	file_internalapi_central_sensor_events_proto_msgTypes[4].OneofWrappers = []any{
		(*SensorEnforcement_Deployment)(nil),
		(*SensorEnforcement_ContainerInstance)(nil),
	}
	file_internalapi_central_sensor_events_proto_msgTypes[7].OneofWrappers = []any{
		(*ScrapeCommand_StartScrape)(nil),
		(*ScrapeCommand_KillScrape)(nil),
	}
	file_internalapi_central_sensor_events_proto_msgTypes[10].OneofWrappers = []any{
		(*ScrapeUpdate_ComplianceReturn)(nil),
		(*ScrapeUpdate_ScrapeStarted)(nil),
		(*ScrapeUpdate_ScrapeKilled)(nil),
	}
	file_internalapi_central_sensor_events_proto_msgTypes[17].OneofWrappers = []any{
		(*NetworkPoliciesCommand_Payload_Apply)(nil),
	}
	file_internalapi_central_sensor_events_proto_msgTypes[20].OneofWrappers = []any{
		(*NetworkPoliciesResponse_Payload_Error)(nil),
		(*NetworkPoliciesResponse_Payload_Apply)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internalapi_central_sensor_events_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internalapi_central_sensor_events_proto_goTypes,
		DependencyIndexes: file_internalapi_central_sensor_events_proto_depIdxs,
		EnumInfos:         file_internalapi_central_sensor_events_proto_enumTypes,
		MessageInfos:      file_internalapi_central_sensor_events_proto_msgTypes,
	}.Build()
	File_internalapi_central_sensor_events_proto = out.File
	file_internalapi_central_sensor_events_proto_rawDesc = nil
	file_internalapi_central_sensor_events_proto_goTypes = nil
	file_internalapi_central_sensor_events_proto_depIdxs = nil
}
