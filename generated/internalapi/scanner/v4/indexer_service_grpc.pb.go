// This contains protobuf types in pair with ClairCore's types, with
// minimal differences. See https://github.com/quay/claircore for comments
// on the fields.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internalapi/scanner/v4/indexer_service.proto

package v4

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Indexer_CreateIndexReport_FullMethodName      = "/scanner.v4.Indexer/CreateIndexReport"
	Indexer_GetIndexReport_FullMethodName         = "/scanner.v4.Indexer/GetIndexReport"
	Indexer_GetOrCreateIndexReport_FullMethodName = "/scanner.v4.Indexer/GetOrCreateIndexReport"
	Indexer_HasIndexReport_FullMethodName         = "/scanner.v4.Indexer/HasIndexReport"
)

// IndexerClient is the client API for Indexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexerClient interface {
	// CreateIndexReport creates an index report for the specified resource and returns the report.
	CreateIndexReport(ctx context.Context, in *CreateIndexReportRequest, opts ...grpc.CallOption) (*IndexReport, error)
	// GetIndexReport returns one index report.
	GetIndexReport(ctx context.Context, in *GetIndexReportRequest, opts ...grpc.CallOption) (*IndexReport, error)
	// GetOrCreateIndexReport creates an index report for the specified resource,
	// if it does not already exist, and returns the report.
	// This essentially combines GetIndexReport and CreateIndexReport.
	GetOrCreateIndexReport(ctx context.Context, in *GetOrCreateIndexReportRequest, opts ...grpc.CallOption) (*IndexReport, error)
	// HasIndexReport checks if an index report for the specified resource exists.
	HasIndexReport(ctx context.Context, in *HasIndexReportRequest, opts ...grpc.CallOption) (*HasIndexReportResponse, error)
}

type indexerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerClient(cc grpc.ClientConnInterface) IndexerClient {
	return &indexerClient{cc}
}

func (c *indexerClient) CreateIndexReport(ctx context.Context, in *CreateIndexReportRequest, opts ...grpc.CallOption) (*IndexReport, error) {
	out := new(IndexReport)
	err := c.cc.Invoke(ctx, Indexer_CreateIndexReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetIndexReport(ctx context.Context, in *GetIndexReportRequest, opts ...grpc.CallOption) (*IndexReport, error) {
	out := new(IndexReport)
	err := c.cc.Invoke(ctx, Indexer_GetIndexReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetOrCreateIndexReport(ctx context.Context, in *GetOrCreateIndexReportRequest, opts ...grpc.CallOption) (*IndexReport, error) {
	out := new(IndexReport)
	err := c.cc.Invoke(ctx, Indexer_GetOrCreateIndexReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) HasIndexReport(ctx context.Context, in *HasIndexReportRequest, opts ...grpc.CallOption) (*HasIndexReportResponse, error) {
	out := new(HasIndexReportResponse)
	err := c.cc.Invoke(ctx, Indexer_HasIndexReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexerServer is the server API for Indexer service.
// All implementations should embed UnimplementedIndexerServer
// for forward compatibility
type IndexerServer interface {
	// CreateIndexReport creates an index report for the specified resource and returns the report.
	CreateIndexReport(context.Context, *CreateIndexReportRequest) (*IndexReport, error)
	// GetIndexReport returns one index report.
	GetIndexReport(context.Context, *GetIndexReportRequest) (*IndexReport, error)
	// GetOrCreateIndexReport creates an index report for the specified resource,
	// if it does not already exist, and returns the report.
	// This essentially combines GetIndexReport and CreateIndexReport.
	GetOrCreateIndexReport(context.Context, *GetOrCreateIndexReportRequest) (*IndexReport, error)
	// HasIndexReport checks if an index report for the specified resource exists.
	HasIndexReport(context.Context, *HasIndexReportRequest) (*HasIndexReportResponse, error)
}

// UnimplementedIndexerServer should be embedded to have forward compatible implementations.
type UnimplementedIndexerServer struct {
}

func (UnimplementedIndexerServer) CreateIndexReport(context.Context, *CreateIndexReportRequest) (*IndexReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndexReport not implemented")
}
func (UnimplementedIndexerServer) GetIndexReport(context.Context, *GetIndexReportRequest) (*IndexReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexReport not implemented")
}
func (UnimplementedIndexerServer) GetOrCreateIndexReport(context.Context, *GetOrCreateIndexReportRequest) (*IndexReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateIndexReport not implemented")
}
func (UnimplementedIndexerServer) HasIndexReport(context.Context, *HasIndexReportRequest) (*HasIndexReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasIndexReport not implemented")
}

// UnsafeIndexerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexerServer will
// result in compilation errors.
type UnsafeIndexerServer interface {
	mustEmbedUnimplementedIndexerServer()
}

func RegisterIndexerServer(s grpc.ServiceRegistrar, srv IndexerServer) {
	s.RegisterService(&Indexer_ServiceDesc, srv)
}

func _Indexer_CreateIndexReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CreateIndexReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CreateIndexReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CreateIndexReport(ctx, req.(*CreateIndexReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetIndexReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetIndexReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetIndexReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetIndexReport(ctx, req.(*GetIndexReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetOrCreateIndexReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrCreateIndexReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetOrCreateIndexReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetOrCreateIndexReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetOrCreateIndexReport(ctx, req.(*GetOrCreateIndexReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_HasIndexReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasIndexReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).HasIndexReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_HasIndexReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).HasIndexReport(ctx, req.(*HasIndexReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Indexer_ServiceDesc is the grpc.ServiceDesc for Indexer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Indexer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scanner.v4.Indexer",
	HandlerType: (*IndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIndexReport",
			Handler:    _Indexer_CreateIndexReport_Handler,
		},
		{
			MethodName: "GetIndexReport",
			Handler:    _Indexer_GetIndexReport_Handler,
		},
		{
			MethodName: "GetOrCreateIndexReport",
			Handler:    _Indexer_GetOrCreateIndexReport_Handler,
		},
		{
			MethodName: "HasIndexReport",
			Handler:    _Indexer_HasIndexReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalapi/scanner/v4/indexer_service.proto",
}
