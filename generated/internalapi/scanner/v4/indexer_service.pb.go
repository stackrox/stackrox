// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/scanner/v4/indexer_service.proto

package v4

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Provide information to retrieve container images and their layers.
type ContainerImageLocator struct {
	Url                   string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Username              string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password              string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	InsecureSkipTlsVerify bool     `protobuf:"varint,4,opt,name=insecure_skip_tls_verify,json=insecureSkipTlsVerify,proto3" json:"insecure_skip_tls_verify,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ContainerImageLocator) Reset()         { *m = ContainerImageLocator{} }
func (m *ContainerImageLocator) String() string { return proto.CompactTextString(m) }
func (*ContainerImageLocator) ProtoMessage()    {}
func (*ContainerImageLocator) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b3d06b94183d906, []int{0}
}
func (m *ContainerImageLocator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerImageLocator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerImageLocator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerImageLocator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerImageLocator.Merge(m, src)
}
func (m *ContainerImageLocator) XXX_Size() int {
	return m.Size()
}
func (m *ContainerImageLocator) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerImageLocator.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerImageLocator proto.InternalMessageInfo

func (m *ContainerImageLocator) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ContainerImageLocator) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ContainerImageLocator) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ContainerImageLocator) GetInsecureSkipTlsVerify() bool {
	if m != nil {
		return m.InsecureSkipTlsVerify
	}
	return false
}

func (m *ContainerImageLocator) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ContainerImageLocator) Clone() *ContainerImageLocator {
	if m == nil {
		return nil
	}
	cloned := new(ContainerImageLocator)
	*cloned = *m

	return cloned
}

type CreateIndexReportRequest struct {
	HashId string `protobuf:"bytes,1,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	// Types that are valid to be assigned to ResourceLocator:
	//	*CreateIndexReportRequest_ContainerImage
	ResourceLocator      isCreateIndexReportRequest_ResourceLocator `protobuf_oneof:"resource_locator"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *CreateIndexReportRequest) Reset()         { *m = CreateIndexReportRequest{} }
func (m *CreateIndexReportRequest) String() string { return proto.CompactTextString(m) }
func (*CreateIndexReportRequest) ProtoMessage()    {}
func (*CreateIndexReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b3d06b94183d906, []int{1}
}
func (m *CreateIndexReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateIndexReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateIndexReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateIndexReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateIndexReportRequest.Merge(m, src)
}
func (m *CreateIndexReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateIndexReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateIndexReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateIndexReportRequest proto.InternalMessageInfo

type isCreateIndexReportRequest_ResourceLocator interface {
	isCreateIndexReportRequest_ResourceLocator()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isCreateIndexReportRequest_ResourceLocator
}

type CreateIndexReportRequest_ContainerImage struct {
	ContainerImage *ContainerImageLocator `protobuf:"bytes,2,opt,name=container_image,json=containerImage,proto3,oneof" json:"container_image,omitempty"`
}

func (*CreateIndexReportRequest_ContainerImage) isCreateIndexReportRequest_ResourceLocator() {}
func (m *CreateIndexReportRequest_ContainerImage) Clone() isCreateIndexReportRequest_ResourceLocator {
	if m == nil {
		return nil
	}
	cloned := new(CreateIndexReportRequest_ContainerImage)
	*cloned = *m

	cloned.ContainerImage = m.ContainerImage.Clone()
	return cloned
}

func (m *CreateIndexReportRequest) GetResourceLocator() isCreateIndexReportRequest_ResourceLocator {
	if m != nil {
		return m.ResourceLocator
	}
	return nil
}

func (m *CreateIndexReportRequest) GetHashId() string {
	if m != nil {
		return m.HashId
	}
	return ""
}

func (m *CreateIndexReportRequest) GetContainerImage() *ContainerImageLocator {
	if x, ok := m.GetResourceLocator().(*CreateIndexReportRequest_ContainerImage); ok {
		return x.ContainerImage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateIndexReportRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateIndexReportRequest_ContainerImage)(nil),
	}
}

func (m *CreateIndexReportRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateIndexReportRequest) Clone() *CreateIndexReportRequest {
	if m == nil {
		return nil
	}
	cloned := new(CreateIndexReportRequest)
	*cloned = *m

	if m.ResourceLocator != nil {
		cloned.ResourceLocator = m.ResourceLocator.Clone()
	}
	return cloned
}

type GetIndexReportRequest struct {
	HashId               string   `protobuf:"bytes,1,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIndexReportRequest) Reset()         { *m = GetIndexReportRequest{} }
func (m *GetIndexReportRequest) String() string { return proto.CompactTextString(m) }
func (*GetIndexReportRequest) ProtoMessage()    {}
func (*GetIndexReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b3d06b94183d906, []int{2}
}
func (m *GetIndexReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetIndexReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetIndexReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetIndexReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIndexReportRequest.Merge(m, src)
}
func (m *GetIndexReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetIndexReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIndexReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIndexReportRequest proto.InternalMessageInfo

func (m *GetIndexReportRequest) GetHashId() string {
	if m != nil {
		return m.HashId
	}
	return ""
}

func (m *GetIndexReportRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetIndexReportRequest) Clone() *GetIndexReportRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetIndexReportRequest)
	*cloned = *m

	return cloned
}

type HasIndexReportRequest struct {
	HashId               string   `protobuf:"bytes,1,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HasIndexReportRequest) Reset()         { *m = HasIndexReportRequest{} }
func (m *HasIndexReportRequest) String() string { return proto.CompactTextString(m) }
func (*HasIndexReportRequest) ProtoMessage()    {}
func (*HasIndexReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b3d06b94183d906, []int{3}
}
func (m *HasIndexReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HasIndexReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HasIndexReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HasIndexReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasIndexReportRequest.Merge(m, src)
}
func (m *HasIndexReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *HasIndexReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HasIndexReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HasIndexReportRequest proto.InternalMessageInfo

func (m *HasIndexReportRequest) GetHashId() string {
	if m != nil {
		return m.HashId
	}
	return ""
}

func (m *HasIndexReportRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *HasIndexReportRequest) Clone() *HasIndexReportRequest {
	if m == nil {
		return nil
	}
	cloned := new(HasIndexReportRequest)
	*cloned = *m

	return cloned
}

type HasIndexReportResponse struct {
	Exists               bool     `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HasIndexReportResponse) Reset()         { *m = HasIndexReportResponse{} }
func (m *HasIndexReportResponse) String() string { return proto.CompactTextString(m) }
func (*HasIndexReportResponse) ProtoMessage()    {}
func (*HasIndexReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b3d06b94183d906, []int{4}
}
func (m *HasIndexReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HasIndexReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HasIndexReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HasIndexReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasIndexReportResponse.Merge(m, src)
}
func (m *HasIndexReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *HasIndexReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HasIndexReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HasIndexReportResponse proto.InternalMessageInfo

func (m *HasIndexReportResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *HasIndexReportResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *HasIndexReportResponse) Clone() *HasIndexReportResponse {
	if m == nil {
		return nil
	}
	cloned := new(HasIndexReportResponse)
	*cloned = *m

	return cloned
}

type GetOrCreateIndexReportRequest struct {
	HashId string `protobuf:"bytes,1,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	// Types that are valid to be assigned to ResourceLocator:
	//	*GetOrCreateIndexReportRequest_ContainerImage
	ResourceLocator      isGetOrCreateIndexReportRequest_ResourceLocator `protobuf_oneof:"resource_locator"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *GetOrCreateIndexReportRequest) Reset()         { *m = GetOrCreateIndexReportRequest{} }
func (m *GetOrCreateIndexReportRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrCreateIndexReportRequest) ProtoMessage()    {}
func (*GetOrCreateIndexReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b3d06b94183d906, []int{5}
}
func (m *GetOrCreateIndexReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrCreateIndexReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrCreateIndexReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrCreateIndexReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrCreateIndexReportRequest.Merge(m, src)
}
func (m *GetOrCreateIndexReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrCreateIndexReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrCreateIndexReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrCreateIndexReportRequest proto.InternalMessageInfo

type isGetOrCreateIndexReportRequest_ResourceLocator interface {
	isGetOrCreateIndexReportRequest_ResourceLocator()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isGetOrCreateIndexReportRequest_ResourceLocator
}

type GetOrCreateIndexReportRequest_ContainerImage struct {
	ContainerImage *ContainerImageLocator `protobuf:"bytes,2,opt,name=container_image,json=containerImage,proto3,oneof" json:"container_image,omitempty"`
}

func (*GetOrCreateIndexReportRequest_ContainerImage) isGetOrCreateIndexReportRequest_ResourceLocator() {
}
func (m *GetOrCreateIndexReportRequest_ContainerImage) Clone() isGetOrCreateIndexReportRequest_ResourceLocator {
	if m == nil {
		return nil
	}
	cloned := new(GetOrCreateIndexReportRequest_ContainerImage)
	*cloned = *m

	cloned.ContainerImage = m.ContainerImage.Clone()
	return cloned
}

func (m *GetOrCreateIndexReportRequest) GetResourceLocator() isGetOrCreateIndexReportRequest_ResourceLocator {
	if m != nil {
		return m.ResourceLocator
	}
	return nil
}

func (m *GetOrCreateIndexReportRequest) GetHashId() string {
	if m != nil {
		return m.HashId
	}
	return ""
}

func (m *GetOrCreateIndexReportRequest) GetContainerImage() *ContainerImageLocator {
	if x, ok := m.GetResourceLocator().(*GetOrCreateIndexReportRequest_ContainerImage); ok {
		return x.ContainerImage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetOrCreateIndexReportRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetOrCreateIndexReportRequest_ContainerImage)(nil),
	}
}

func (m *GetOrCreateIndexReportRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetOrCreateIndexReportRequest) Clone() *GetOrCreateIndexReportRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetOrCreateIndexReportRequest)
	*cloned = *m

	if m.ResourceLocator != nil {
		cloned.ResourceLocator = m.ResourceLocator.Clone()
	}
	return cloned
}

func init() {
	proto.RegisterType((*ContainerImageLocator)(nil), "scanner.v4.ContainerImageLocator")
	proto.RegisterType((*CreateIndexReportRequest)(nil), "scanner.v4.CreateIndexReportRequest")
	proto.RegisterType((*GetIndexReportRequest)(nil), "scanner.v4.GetIndexReportRequest")
	proto.RegisterType((*HasIndexReportRequest)(nil), "scanner.v4.HasIndexReportRequest")
	proto.RegisterType((*HasIndexReportResponse)(nil), "scanner.v4.HasIndexReportResponse")
	proto.RegisterType((*GetOrCreateIndexReportRequest)(nil), "scanner.v4.GetOrCreateIndexReportRequest")
}

func init() {
	proto.RegisterFile("internalapi/scanner/v4/indexer_service.proto", fileDescriptor_3b3d06b94183d906)
}

var fileDescriptor_3b3d06b94183d906 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x51, 0x6b, 0x13, 0x41,
	0x10, 0xee, 0xb5, 0x92, 0xc6, 0x11, 0x62, 0x5d, 0x48, 0x7a, 0x44, 0x0c, 0x35, 0xf8, 0xd0, 0x82,
	0x5e, 0xa4, 0x06, 0x7c, 0xf0, 0xad, 0x7d, 0x68, 0x03, 0x01, 0xe1, 0x14, 0x05, 0x11, 0x96, 0xf5,
	0x32, 0xda, 0xa5, 0xd7, 0xdd, 0x73, 0x66, 0xef, 0xac, 0x3f, 0x44, 0x10, 0x7f, 0x91, 0x8f, 0xfe,
	0x04, 0x89, 0x7f, 0x44, 0xf6, 0x2e, 0xd1, 0x5e, 0xbd, 0x14, 0xfa, 0xe6, 0xdb, 0xcd, 0x7d, 0xf3,
	0xcd, 0x7e, 0x33, 0xdf, 0x30, 0xf0, 0x50, 0x1b, 0x87, 0x64, 0x54, 0xaa, 0x32, 0x3d, 0xe2, 0x44,
	0x19, 0x83, 0x34, 0x2a, 0xc6, 0x23, 0x6d, 0x66, 0x78, 0x8e, 0x24, 0x19, 0xa9, 0xd0, 0x09, 0x46,
	0x19, 0x59, 0x67, 0x05, 0x2c, 0x32, 0xa2, 0x62, 0xdc, 0xdf, 0xbb, 0x8a, 0x29, 0x09, 0x33, 0x4b,
	0xae, 0xa2, 0x0d, 0xbf, 0x05, 0xd0, 0x3d, 0xb4, 0xc6, 0x29, 0x6d, 0x90, 0x26, 0x67, 0xea, 0x03,
	0x4e, 0x6d, 0xa2, 0x9c, 0x25, 0xb1, 0x05, 0x1b, 0x39, 0xa5, 0x61, 0xb0, 0x13, 0xec, 0xde, 0x8c,
	0xfd, 0xa7, 0xe8, 0x43, 0x3b, 0x67, 0x5f, 0xf7, 0x0c, 0xc3, 0xf5, 0xf2, 0xf7, 0x9f, 0xd8, 0x63,
	0x99, 0x62, 0xfe, 0x64, 0x69, 0x16, 0x6e, 0x54, 0xd8, 0x32, 0x16, 0x4f, 0x21, 0xd4, 0x86, 0x31,
	0xc9, 0x09, 0x25, 0x9f, 0xea, 0x4c, 0xba, 0x94, 0x65, 0x81, 0xa4, 0xdf, 0x7f, 0x0e, 0x6f, 0xec,
	0x04, 0xbb, 0xed, 0xb8, 0xbb, 0xc4, 0x5f, 0x9c, 0xea, 0xec, 0x65, 0xca, 0xaf, 0x4a, 0x70, 0xf8,
	0x25, 0x80, 0xf0, 0x90, 0x50, 0x39, 0x9c, 0x78, 0xe5, 0x71, 0x29, 0x3c, 0xc6, 0x8f, 0x39, 0xb2,
	0x13, 0xdb, 0xb0, 0x79, 0xa2, 0xf8, 0x44, 0xea, 0xd9, 0x42, 0x63, 0xcb, 0x87, 0x93, 0x99, 0x98,
	0xc2, 0xed, 0x64, 0xd9, 0x91, 0xd4, 0xbe, 0xa5, 0x52, 0xed, 0xad, 0xfd, 0xfb, 0xd1, 0xdf, 0x19,
	0x45, 0x8d, 0x4d, 0x1f, 0xaf, 0xc5, 0x9d, 0xa4, 0x06, 0x1c, 0x08, 0xd8, 0x22, 0x64, 0x9b, 0x53,
	0x82, 0x32, 0xad, 0xb2, 0x86, 0x8f, 0xa1, 0x7b, 0x84, 0xee, 0x1a, 0x9a, 0x3c, 0xe3, 0x58, 0xf1,
	0xf5, 0x18, 0xbd, 0xcb, 0x0c, 0xce, 0xac, 0x61, 0x14, 0x3d, 0x68, 0xe1, 0xb9, 0x66, 0xc7, 0x25,
	0xa3, 0x1d, 0x2f, 0x22, 0x6f, 0xe5, 0xbd, 0x23, 0x74, 0xcf, 0xe9, 0x3f, 0x1c, 0xd9, 0xfe, 0x7c,
	0x1d, 0x36, 0x27, 0xd5, 0xe2, 0x8a, 0x18, 0xee, 0xfc, 0x23, 0x51, 0x3c, 0xa8, 0xbd, 0xb4, 0xa2,
	0x83, 0xfe, 0xf6, 0xc5, 0xac, 0x8b, 0xf4, 0x29, 0x74, 0xea, 0x96, 0x88, 0x9a, 0xf4, 0x46, 0xbb,
	0x56, 0x57, 0x7b, 0x0b, 0xbd, 0xe6, 0x49, 0x8a, 0xbd, 0x4b, 0x55, 0x57, 0x4f, 0x7b, 0x75, 0xf5,
	0xd7, 0xd0, 0xa9, 0x5b, 0x5b, 0xd7, 0xda, 0xb8, 0x28, 0xfd, 0xe1, 0x55, 0x29, 0xd5, 0x66, 0x1c,
	0x3c, 0xfa, 0x3e, 0x1f, 0x04, 0x3f, 0xe6, 0x83, 0xe0, 0xe7, 0x7c, 0x10, 0x7c, 0xfd, 0x35, 0x58,
	0x7b, 0x73, 0x37, 0x1a, 0x35, 0xdf, 0x82, 0x67, 0xc5, 0xf8, 0x5d, 0xab, 0x3c, 0x01, 0x4f, 0x7e,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xf7, 0x5f, 0x4d, 0x69, 0x04, 0x00, 0x00,
}

func (m *ContainerImageLocator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerImageLocator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerImageLocator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InsecureSkipTlsVerify {
		i--
		if m.InsecureSkipTlsVerify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintIndexerService(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintIndexerService(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintIndexerService(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateIndexReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateIndexReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateIndexReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResourceLocator != nil {
		{
			size := m.ResourceLocator.Size()
			i -= size
			if _, err := m.ResourceLocator.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.HashId) > 0 {
		i -= len(m.HashId)
		copy(dAtA[i:], m.HashId)
		i = encodeVarintIndexerService(dAtA, i, uint64(len(m.HashId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateIndexReportRequest_ContainerImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateIndexReportRequest_ContainerImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContainerImage != nil {
		{
			size, err := m.ContainerImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIndexerService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetIndexReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetIndexReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetIndexReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HashId) > 0 {
		i -= len(m.HashId)
		copy(dAtA[i:], m.HashId)
		i = encodeVarintIndexerService(dAtA, i, uint64(len(m.HashId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HasIndexReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasIndexReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HasIndexReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HashId) > 0 {
		i -= len(m.HashId)
		copy(dAtA[i:], m.HashId)
		i = encodeVarintIndexerService(dAtA, i, uint64(len(m.HashId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HasIndexReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasIndexReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HasIndexReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOrCreateIndexReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrCreateIndexReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrCreateIndexReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResourceLocator != nil {
		{
			size := m.ResourceLocator.Size()
			i -= size
			if _, err := m.ResourceLocator.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.HashId) > 0 {
		i -= len(m.HashId)
		copy(dAtA[i:], m.HashId)
		i = encodeVarintIndexerService(dAtA, i, uint64(len(m.HashId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrCreateIndexReportRequest_ContainerImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrCreateIndexReportRequest_ContainerImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContainerImage != nil {
		{
			size, err := m.ContainerImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIndexerService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintIndexerService(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndexerService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContainerImageLocator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovIndexerService(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovIndexerService(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovIndexerService(uint64(l))
	}
	if m.InsecureSkipTlsVerify {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateIndexReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashId)
	if l > 0 {
		n += 1 + l + sovIndexerService(uint64(l))
	}
	if m.ResourceLocator != nil {
		n += m.ResourceLocator.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateIndexReportRequest_ContainerImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContainerImage != nil {
		l = m.ContainerImage.Size()
		n += 1 + l + sovIndexerService(uint64(l))
	}
	return n
}
func (m *GetIndexReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashId)
	if l > 0 {
		n += 1 + l + sovIndexerService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HasIndexReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashId)
	if l > 0 {
		n += 1 + l + sovIndexerService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HasIndexReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exists {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrCreateIndexReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashId)
	if l > 0 {
		n += 1 + l + sovIndexerService(uint64(l))
	}
	if m.ResourceLocator != nil {
		n += m.ResourceLocator.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrCreateIndexReportRequest_ContainerImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContainerImage != nil {
		l = m.ContainerImage.Size()
		n += 1 + l + sovIndexerService(uint64(l))
	}
	return n
}

func sovIndexerService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndexerService(x uint64) (n int) {
	return sovIndexerService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContainerImageLocator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerImageLocator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerImageLocator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsecureSkipTlsVerify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsecureSkipTlsVerify = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipIndexerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateIndexReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateIndexReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateIndexReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ContainerImageLocator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResourceLocator = &CreateIndexReportRequest_ContainerImage{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetIndexReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetIndexReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetIndexReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasIndexReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasIndexReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasIndexReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasIndexReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasIndexReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasIndexReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipIndexerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrCreateIndexReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrCreateIndexReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrCreateIndexReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ContainerImageLocator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResourceLocator = &GetOrCreateIndexReportRequest_ContainerImage{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndexerService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndexerService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexerService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndexerService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIndexerService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIndexerService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIndexerService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndexerService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIndexerService = fmt.Errorf("proto: unexpected end of group")
)
