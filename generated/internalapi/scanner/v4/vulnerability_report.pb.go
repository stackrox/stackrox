// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/scanner/v4/vulnerability_report.proto

package v4

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VulnerabilityReport_Vulnerability_Severity int32

const (
	VulnerabilityReport_Vulnerability_SEVERITY_UNSPECIFIED VulnerabilityReport_Vulnerability_Severity = 0
	VulnerabilityReport_Vulnerability_SEVERITY_LOW         VulnerabilityReport_Vulnerability_Severity = 1
	VulnerabilityReport_Vulnerability_SEVERITY_MODERATE    VulnerabilityReport_Vulnerability_Severity = 2
	VulnerabilityReport_Vulnerability_SEVERITY_IMPORTANT   VulnerabilityReport_Vulnerability_Severity = 3
	VulnerabilityReport_Vulnerability_SEVERITY_CRITICAL    VulnerabilityReport_Vulnerability_Severity = 4
)

var VulnerabilityReport_Vulnerability_Severity_name = map[int32]string{
	0: "SEVERITY_UNSPECIFIED",
	1: "SEVERITY_LOW",
	2: "SEVERITY_MODERATE",
	3: "SEVERITY_IMPORTANT",
	4: "SEVERITY_CRITICAL",
}

var VulnerabilityReport_Vulnerability_Severity_value = map[string]int32{
	"SEVERITY_UNSPECIFIED": 0,
	"SEVERITY_LOW":         1,
	"SEVERITY_MODERATE":    2,
	"SEVERITY_IMPORTANT":   3,
	"SEVERITY_CRITICAL":    4,
}

func (x VulnerabilityReport_Vulnerability_Severity) String() string {
	return proto.EnumName(VulnerabilityReport_Vulnerability_Severity_name, int32(x))
}

func (VulnerabilityReport_Vulnerability_Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b058701e79dd6c8, []int{0, 0, 0}
}

type VulnerabilityReport struct {
	HashId                 string                                        `protobuf:"bytes,1,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	Vulnerabilities        map[string]*VulnerabilityReport_Vulnerability `protobuf:"bytes,2,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PackageVulnerabilities map[string]*StringList                        `protobuf:"bytes,3,rep,name=package_vulnerabilities,json=packageVulnerabilities,proto3" json:"package_vulnerabilities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Packages               []*Package                                    `protobuf:"bytes,5,rep,name=packages,proto3" json:"packages,omitempty"`
	Distributions          []*Distribution                               `protobuf:"bytes,6,rep,name=distributions,proto3" json:"distributions,omitempty"`
	Repositories           []*Repository                                 `protobuf:"bytes,7,rep,name=repositories,proto3" json:"repositories,omitempty"`
	Environments           map[string]*Environment_List                  `protobuf:"bytes,8,rep,name=environments,proto3" json:"environments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral   struct{}                                      `json:"-"`
	XXX_unrecognized       []byte                                        `json:"-"`
	XXX_sizecache          int32                                         `json:"-"`
}

func (m *VulnerabilityReport) Reset()         { *m = VulnerabilityReport{} }
func (m *VulnerabilityReport) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityReport) ProtoMessage()    {}
func (*VulnerabilityReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b058701e79dd6c8, []int{0}
}
func (m *VulnerabilityReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityReport.Merge(m, src)
}
func (m *VulnerabilityReport) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityReport) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityReport.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityReport proto.InternalMessageInfo

func (m *VulnerabilityReport) GetHashId() string {
	if m != nil {
		return m.HashId
	}
	return ""
}

func (m *VulnerabilityReport) GetVulnerabilities() map[string]*VulnerabilityReport_Vulnerability {
	if m != nil {
		return m.Vulnerabilities
	}
	return nil
}

func (m *VulnerabilityReport) GetPackageVulnerabilities() map[string]*StringList {
	if m != nil {
		return m.PackageVulnerabilities
	}
	return nil
}

func (m *VulnerabilityReport) GetPackages() []*Package {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *VulnerabilityReport) GetDistributions() []*Distribution {
	if m != nil {
		return m.Distributions
	}
	return nil
}

func (m *VulnerabilityReport) GetRepositories() []*Repository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

func (m *VulnerabilityReport) GetEnvironments() map[string]*Environment_List {
	if m != nil {
		return m.Environments
	}
	return nil
}

func (m *VulnerabilityReport) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityReport) Clone() *VulnerabilityReport {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityReport)
	*cloned = *m

	if m.Vulnerabilities != nil {
		cloned.Vulnerabilities = make(map[string]*VulnerabilityReport_Vulnerability, len(m.Vulnerabilities))
		for k, v := range m.Vulnerabilities {
			cloned.Vulnerabilities[k] = v.Clone()
		}
	}
	if m.PackageVulnerabilities != nil {
		cloned.PackageVulnerabilities = make(map[string]*StringList, len(m.PackageVulnerabilities))
		for k, v := range m.PackageVulnerabilities {
			cloned.PackageVulnerabilities[k] = v.Clone()
		}
	}
	if m.Packages != nil {
		cloned.Packages = make([]*Package, len(m.Packages))
		for idx, v := range m.Packages {
			cloned.Packages[idx] = v.Clone()
		}
	}
	if m.Distributions != nil {
		cloned.Distributions = make([]*Distribution, len(m.Distributions))
		for idx, v := range m.Distributions {
			cloned.Distributions[idx] = v.Clone()
		}
	}
	if m.Repositories != nil {
		cloned.Repositories = make([]*Repository, len(m.Repositories))
		for idx, v := range m.Repositories {
			cloned.Repositories[idx] = v.Clone()
		}
	}
	if m.Environments != nil {
		cloned.Environments = make(map[string]*Environment_List, len(m.Environments))
		for k, v := range m.Environments {
			cloned.Environments[k] = v.Clone()
		}
	}
	return cloned
}

type VulnerabilityReport_Vulnerability struct {
	Id                   string                                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                                     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Issued               *types.Timestamp                           `protobuf:"bytes,5,opt,name=issued,proto3" json:"issued,omitempty"`
	Link                 string                                     `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	Severity             string                                     `protobuf:"bytes,7,opt,name=severity,proto3" json:"severity,omitempty"`
	NormalizedSeverity   VulnerabilityReport_Vulnerability_Severity `protobuf:"varint,8,opt,name=normalized_severity,json=normalizedSeverity,proto3,enum=scanner.v4.VulnerabilityReport_Vulnerability_Severity" json:"normalized_severity,omitempty"`
	PackageId            string                                     `protobuf:"bytes,9,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	DistributionId       string                                     `protobuf:"bytes,10,opt,name=distribution_id,json=distributionId,proto3" json:"distribution_id,omitempty"`
	RepositoryId         string                                     `protobuf:"bytes,11,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	FixedInVersion       string                                     `protobuf:"bytes,12,opt,name=fixed_in_version,json=fixedInVersion,proto3" json:"fixed_in_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *VulnerabilityReport_Vulnerability) Reset()         { *m = VulnerabilityReport_Vulnerability{} }
func (m *VulnerabilityReport_Vulnerability) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityReport_Vulnerability) ProtoMessage()    {}
func (*VulnerabilityReport_Vulnerability) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b058701e79dd6c8, []int{0, 0}
}
func (m *VulnerabilityReport_Vulnerability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityReport_Vulnerability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityReport_Vulnerability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityReport_Vulnerability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityReport_Vulnerability.Merge(m, src)
}
func (m *VulnerabilityReport_Vulnerability) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityReport_Vulnerability) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityReport_Vulnerability.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityReport_Vulnerability proto.InternalMessageInfo

func (m *VulnerabilityReport_Vulnerability) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VulnerabilityReport_Vulnerability) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VulnerabilityReport_Vulnerability) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VulnerabilityReport_Vulnerability) GetIssued() *types.Timestamp {
	if m != nil {
		return m.Issued
	}
	return nil
}

func (m *VulnerabilityReport_Vulnerability) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *VulnerabilityReport_Vulnerability) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

func (m *VulnerabilityReport_Vulnerability) GetNormalizedSeverity() VulnerabilityReport_Vulnerability_Severity {
	if m != nil {
		return m.NormalizedSeverity
	}
	return VulnerabilityReport_Vulnerability_SEVERITY_UNSPECIFIED
}

func (m *VulnerabilityReport_Vulnerability) GetPackageId() string {
	if m != nil {
		return m.PackageId
	}
	return ""
}

func (m *VulnerabilityReport_Vulnerability) GetDistributionId() string {
	if m != nil {
		return m.DistributionId
	}
	return ""
}

func (m *VulnerabilityReport_Vulnerability) GetRepositoryId() string {
	if m != nil {
		return m.RepositoryId
	}
	return ""
}

func (m *VulnerabilityReport_Vulnerability) GetFixedInVersion() string {
	if m != nil {
		return m.FixedInVersion
	}
	return ""
}

func (m *VulnerabilityReport_Vulnerability) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityReport_Vulnerability) Clone() *VulnerabilityReport_Vulnerability {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityReport_Vulnerability)
	*cloned = *m

	cloned.Issued = m.Issued.Clone()
	return cloned
}

type StringList struct {
	Values               []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringList) Reset()         { *m = StringList{} }
func (m *StringList) String() string { return proto.CompactTextString(m) }
func (*StringList) ProtoMessage()    {}
func (*StringList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b058701e79dd6c8, []int{1}
}
func (m *StringList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringList.Merge(m, src)
}
func (m *StringList) XXX_Size() int {
	return m.Size()
}
func (m *StringList) XXX_DiscardUnknown() {
	xxx_messageInfo_StringList.DiscardUnknown(m)
}

var xxx_messageInfo_StringList proto.InternalMessageInfo

func (m *StringList) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *StringList) MessageClone() proto.Message {
	return m.Clone()
}
func (m *StringList) Clone() *StringList {
	if m == nil {
		return nil
	}
	cloned := new(StringList)
	*cloned = *m

	if m.Values != nil {
		cloned.Values = make([]string, len(m.Values))
		copy(cloned.Values, m.Values)
	}
	return cloned
}

func init() {
	proto.RegisterEnum("scanner.v4.VulnerabilityReport_Vulnerability_Severity", VulnerabilityReport_Vulnerability_Severity_name, VulnerabilityReport_Vulnerability_Severity_value)
	proto.RegisterType((*VulnerabilityReport)(nil), "scanner.v4.VulnerabilityReport")
	proto.RegisterMapType((map[string]*Environment_List)(nil), "scanner.v4.VulnerabilityReport.EnvironmentsEntry")
	proto.RegisterMapType((map[string]*StringList)(nil), "scanner.v4.VulnerabilityReport.PackageVulnerabilitiesEntry")
	proto.RegisterMapType((map[string]*VulnerabilityReport_Vulnerability)(nil), "scanner.v4.VulnerabilityReport.VulnerabilitiesEntry")
	proto.RegisterType((*VulnerabilityReport_Vulnerability)(nil), "scanner.v4.VulnerabilityReport.Vulnerability")
	proto.RegisterType((*StringList)(nil), "scanner.v4.StringList")
}

func init() {
	proto.RegisterFile("internalapi/scanner/v4/vulnerability_report.proto", fileDescriptor_9b058701e79dd6c8)
}

var fileDescriptor_9b058701e79dd6c8 = []byte{
	// 725 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdf, 0x6e, 0xd3, 0x3a,
	0x18, 0x5f, 0xda, 0xae, 0xeb, 0xbe, 0x76, 0x5b, 0xe6, 0xed, 0x74, 0x51, 0xcf, 0x39, 0xa5, 0xda,
	0x90, 0xe8, 0x05, 0xa4, 0x5a, 0xa9, 0x10, 0x1a, 0x12, 0xd2, 0xe8, 0x82, 0x14, 0x69, 0xff, 0x94,
	0x76, 0x43, 0x20, 0x41, 0x95, 0x36, 0x5e, 0x67, 0xad, 0x75, 0x8a, 0xed, 0x46, 0x04, 0xf1, 0x20,
	0xbc, 0x09, 0xaf, 0xc0, 0x25, 0x8f, 0x80, 0xc6, 0x43, 0x70, 0x8b, 0xe2, 0xb4, 0x69, 0x32, 0x0a,
	0xd3, 0xee, 0xec, 0xdf, 0xf7, 0xfb, 0xe3, 0xf8, 0xfb, 0x1c, 0xd8, 0x25, 0x54, 0x60, 0x46, 0xed,
	0x81, 0x3d, 0x22, 0x35, 0xde, 0xb3, 0x29, 0xc5, 0xac, 0xe6, 0x35, 0x6a, 0xde, 0x78, 0x40, 0x31,
	0xb3, 0xbb, 0x64, 0x40, 0x84, 0xdf, 0x61, 0x78, 0xe4, 0x32, 0xa1, 0x8f, 0x98, 0x2b, 0x5c, 0x04,
	0x13, 0x9a, 0xee, 0x35, 0x4a, 0xf7, 0xfa, 0xae, 0xdb, 0x1f, 0xe0, 0x9a, 0xac, 0x74, 0xc7, 0x17,
	0x35, 0x41, 0x86, 0x98, 0x0b, 0x7b, 0x38, 0x0a, 0xc9, 0xa5, 0x9d, 0x3f, 0xf8, 0xf7, 0xdc, 0xe1,
	0xd0, 0xa5, 0x21, 0x69, 0xfb, 0x27, 0xc0, 0xc6, 0x79, 0x3c, 0xd0, 0x92, 0x79, 0x68, 0x0b, 0x96,
	0x2e, 0x6d, 0x7e, 0xd9, 0x21, 0x8e, 0xa6, 0x54, 0x94, 0xea, 0xb2, 0x95, 0x0d, 0xb6, 0xa6, 0x83,
	0xde, 0xc1, 0x5a, 0xfc, 0x80, 0x04, 0x73, 0x2d, 0x55, 0x49, 0x57, 0xf3, 0xf5, 0x86, 0x3e, 0x3b,
	0x9c, 0x3e, 0xc7, 0x32, 0x81, 0x11, 0xcc, 0x0d, 0x2a, 0x98, 0x6f, 0xdd, 0x34, 0x43, 0x02, 0xb6,
	0x46, 0x76, 0xef, 0xca, 0xee, 0xe3, 0xce, 0xcd, 0x9c, 0xb4, 0xcc, 0x79, 0x76, 0x5b, 0xce, 0x69,
	0x28, 0x9f, 0x1b, 0x57, 0x1c, 0xcd, 0x2d, 0xa2, 0x1a, 0xe4, 0x26, 0x15, 0xae, 0x2d, 0xca, 0x98,
	0x8d, 0x78, 0xcc, 0xc4, 0xd2, 0x8a, 0x48, 0xe8, 0x39, 0xac, 0x38, 0x84, 0x0b, 0x46, 0xba, 0x63,
	0x41, 0x5c, 0xca, 0xb5, 0xac, 0x54, 0x69, 0x71, 0xd5, 0x41, 0x8c, 0x60, 0x25, 0xe9, 0x68, 0x0f,
	0x0a, 0x41, 0x67, 0x39, 0x11, 0x2e, 0x0b, 0xbe, 0x6d, 0x49, 0xca, 0x8b, 0x71, 0xb9, 0x35, 0xad,
	0xfb, 0x56, 0x82, 0x8b, 0xce, 0xa0, 0x80, 0xa9, 0x47, 0x98, 0x4b, 0x87, 0x98, 0x0a, 0xae, 0xe5,
	0xa4, 0x76, 0xf7, 0xb6, 0x7b, 0x31, 0x62, 0x9a, 0xf0, 0x36, 0x12, 0x36, 0xa5, 0x2f, 0x19, 0x58,
	0x49, 0xe8, 0xd0, 0x2a, 0xa4, 0xa2, 0xfe, 0xa7, 0x88, 0x83, 0x10, 0x64, 0xa8, 0x3d, 0xc4, 0x5a,
	0x5a, 0x22, 0x72, 0x8d, 0x2a, 0x90, 0x77, 0x30, 0xef, 0x31, 0x32, 0x0a, 0x3e, 0x4c, 0xcb, 0xc8,
	0x52, 0x1c, 0x42, 0x75, 0xc8, 0x12, 0xce, 0xc7, 0xd8, 0xd1, 0x16, 0x2b, 0x4a, 0x35, 0x5f, 0x2f,
	0xe9, 0xe1, 0xe4, 0xea, 0xd3, 0xc9, 0xd5, 0xdb, 0xd3, 0xc9, 0xb5, 0x26, 0xcc, 0x20, 0x69, 0x40,
	0xe8, 0x95, 0x96, 0x0d, 0x93, 0x82, 0x35, 0x2a, 0x41, 0x8e, 0x63, 0x0f, 0x33, 0x22, 0x7c, 0x6d,
	0x49, 0xe2, 0xd1, 0x1e, 0xf5, 0x61, 0x83, 0xba, 0x6c, 0x68, 0x0f, 0xc8, 0x47, 0xec, 0x74, 0x22,
	0x5a, 0xae, 0xa2, 0x54, 0x57, 0xeb, 0x4f, 0xee, 0x32, 0x99, 0xbe, 0xde, 0x9a, 0xa8, 0x2d, 0x34,
	0xb3, 0x9c, 0x62, 0xe8, 0x7f, 0x80, 0xe9, 0x78, 0x12, 0x47, 0x5b, 0x96, 0xc7, 0x58, 0x9e, 0x20,
	0xa6, 0x83, 0x1e, 0xc0, 0x5a, 0xbc, 0xcf, 0x01, 0x07, 0x24, 0x67, 0x35, 0x0e, 0x9b, 0x0e, 0xda,
	0x81, 0x95, 0xa8, 0xa7, 0x7e, 0x40, 0xcb, 0x4b, 0xda, 0xac, 0xd1, 0xbe, 0xe9, 0xa0, 0x2a, 0xa8,
	0x17, 0xe4, 0x03, 0x76, 0x3a, 0x84, 0x76, 0x3c, 0xcc, 0x78, 0x70, 0xc1, 0x85, 0xd0, 0x4e, 0xe2,
	0x26, 0x3d, 0x0f, 0xd1, 0xed, 0x4f, 0x90, 0x8b, 0x8e, 0xa8, 0xc1, 0x66, 0xcb, 0x38, 0x37, 0x2c,
	0xb3, 0xfd, 0xba, 0x73, 0x76, 0xdc, 0x3a, 0x35, 0x9a, 0xe6, 0x4b, 0xd3, 0x38, 0x50, 0x17, 0x90,
	0x0a, 0x85, 0xa8, 0x72, 0x78, 0xf2, 0x4a, 0x55, 0xd0, 0x3f, 0xb0, 0x1e, 0x21, 0x47, 0x27, 0x07,
	0x86, 0xb5, 0xdf, 0x36, 0xd4, 0x14, 0x2a, 0x02, 0x8a, 0x60, 0xf3, 0xe8, 0xf4, 0xc4, 0x6a, 0xef,
	0x1f, 0xb7, 0xd5, 0x74, 0x82, 0xde, 0xb4, 0xcc, 0xb6, 0xd9, 0xdc, 0x3f, 0x54, 0x33, 0xa5, 0xf7,
	0xb0, 0x39, 0xef, 0xb5, 0x21, 0x15, 0xd2, 0x57, 0xd8, 0x9f, 0x0c, 0x50, 0xb0, 0x44, 0x4d, 0x58,
	0xf4, 0xec, 0xc1, 0x18, 0x6b, 0x29, 0x39, 0x0a, 0x8f, 0xee, 0xd4, 0x19, 0x2b, 0xd4, 0xee, 0xa5,
	0x9e, 0x2a, 0x25, 0x1b, 0xfe, 0xfd, 0xcb, 0x3b, 0x9f, 0x93, 0xfc, 0x30, 0x99, 0x9c, 0x78, 0x69,
	0x2d, 0xc1, 0x08, 0xed, 0x1f, 0x12, 0x2e, 0xe2, 0x11, 0x6f, 0x61, 0xfd, 0xb7, 0x27, 0x33, 0xc7,
	0xb8, 0x9e, 0x34, 0xfe, 0x2f, 0x6e, 0x1c, 0xd3, 0xeb, 0x37, 0xec, 0xb7, 0xef, 0x03, 0xcc, 0x72,
	0x51, 0x11, 0xb2, 0xb2, 0xc4, 0x35, 0xa5, 0x92, 0x0e, 0x7e, 0xb7, 0xe1, 0xee, 0xc5, 0xe6, 0xd7,
	0xeb, 0xb2, 0xf2, 0xed, 0xba, 0xac, 0x7c, 0xbf, 0x2e, 0x2b, 0x9f, 0x7f, 0x94, 0x17, 0xde, 0xa4,
	0xbc, 0x46, 0x37, 0x2b, 0x9f, 0xce, 0xe3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xb7, 0xd1,
	0x02, 0x43, 0x06, 0x00, 0x00,
}

func (m *VulnerabilityReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Environments) > 0 {
		for k := range m.Environments {
			v := m.Environments[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintVulnerabilityReport(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintVulnerabilityReport(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Repositories) > 0 {
		for iNdEx := len(m.Repositories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Repositories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnerabilityReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Distributions) > 0 {
		for iNdEx := len(m.Distributions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distributions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnerabilityReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Packages) > 0 {
		for iNdEx := len(m.Packages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnerabilityReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PackageVulnerabilities) > 0 {
		for k := range m.PackageVulnerabilities {
			v := m.PackageVulnerabilities[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintVulnerabilityReport(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintVulnerabilityReport(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Vulnerabilities) > 0 {
		for k := range m.Vulnerabilities {
			v := m.Vulnerabilities[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintVulnerabilityReport(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintVulnerabilityReport(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.HashId) > 0 {
		i -= len(m.HashId)
		copy(dAtA[i:], m.HashId)
		i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(m.HashId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityReport_Vulnerability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityReport_Vulnerability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityReport_Vulnerability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FixedInVersion) > 0 {
		i -= len(m.FixedInVersion)
		copy(dAtA[i:], m.FixedInVersion)
		i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(m.FixedInVersion)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.RepositoryId) > 0 {
		i -= len(m.RepositoryId)
		copy(dAtA[i:], m.RepositoryId)
		i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(m.RepositoryId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DistributionId) > 0 {
		i -= len(m.DistributionId)
		copy(dAtA[i:], m.DistributionId)
		i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(m.DistributionId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PackageId) > 0 {
		i -= len(m.PackageId)
		copy(dAtA[i:], m.PackageId)
		i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(m.PackageId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.NormalizedSeverity != 0 {
		i = encodeVarintVulnerabilityReport(dAtA, i, uint64(m.NormalizedSeverity))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Severity) > 0 {
		i -= len(m.Severity)
		copy(dAtA[i:], m.Severity)
		i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(m.Severity)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x32
	}
	if m.Issued != nil {
		{
			size, err := m.Issued.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnerabilityReport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintVulnerabilityReport(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVulnerabilityReport(dAtA []byte, offset int, v uint64) int {
	offset -= sovVulnerabilityReport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VulnerabilityReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashId)
	if l > 0 {
		n += 1 + l + sovVulnerabilityReport(uint64(l))
	}
	if len(m.Vulnerabilities) > 0 {
		for k, v := range m.Vulnerabilities {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovVulnerabilityReport(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovVulnerabilityReport(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovVulnerabilityReport(uint64(mapEntrySize))
		}
	}
	if len(m.PackageVulnerabilities) > 0 {
		for k, v := range m.PackageVulnerabilities {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovVulnerabilityReport(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovVulnerabilityReport(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovVulnerabilityReport(uint64(mapEntrySize))
		}
	}
	if len(m.Packages) > 0 {
		for _, e := range m.Packages {
			l = e.Size()
			n += 1 + l + sovVulnerabilityReport(uint64(l))
		}
	}
	if len(m.Distributions) > 0 {
		for _, e := range m.Distributions {
			l = e.Size()
			n += 1 + l + sovVulnerabilityReport(uint64(l))
		}
	}
	if len(m.Repositories) > 0 {
		for _, e := range m.Repositories {
			l = e.Size()
			n += 1 + l + sovVulnerabilityReport(uint64(l))
		}
	}
	if len(m.Environments) > 0 {
		for k, v := range m.Environments {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovVulnerabilityReport(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovVulnerabilityReport(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovVulnerabilityReport(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityReport_Vulnerability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnerabilityReport(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVulnerabilityReport(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovVulnerabilityReport(uint64(l))
	}
	if m.Issued != nil {
		l = m.Issued.Size()
		n += 1 + l + sovVulnerabilityReport(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovVulnerabilityReport(uint64(l))
	}
	l = len(m.Severity)
	if l > 0 {
		n += 1 + l + sovVulnerabilityReport(uint64(l))
	}
	if m.NormalizedSeverity != 0 {
		n += 1 + sovVulnerabilityReport(uint64(m.NormalizedSeverity))
	}
	l = len(m.PackageId)
	if l > 0 {
		n += 1 + l + sovVulnerabilityReport(uint64(l))
	}
	l = len(m.DistributionId)
	if l > 0 {
		n += 1 + l + sovVulnerabilityReport(uint64(l))
	}
	l = len(m.RepositoryId)
	if l > 0 {
		n += 1 + l + sovVulnerabilityReport(uint64(l))
	}
	l = len(m.FixedInVersion)
	if l > 0 {
		n += 1 + l + sovVulnerabilityReport(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StringList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovVulnerabilityReport(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVulnerabilityReport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVulnerabilityReport(x uint64) (n int) {
	return sovVulnerabilityReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VulnerabilityReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnerabilityReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VulnerabilityReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VulnerabilityReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vulnerabilities == nil {
				m.Vulnerabilities = make(map[string]*VulnerabilityReport_Vulnerability)
			}
			var mapkey string
			var mapvalue *VulnerabilityReport_Vulnerability
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVulnerabilityReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVulnerabilityReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVulnerabilityReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VulnerabilityReport_Vulnerability{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVulnerabilityReport(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Vulnerabilities[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PackageVulnerabilities == nil {
				m.PackageVulnerabilities = make(map[string]*StringList)
			}
			var mapkey string
			var mapvalue *StringList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVulnerabilityReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVulnerabilityReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVulnerabilityReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StringList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVulnerabilityReport(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PackageVulnerabilities[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packages = append(m.Packages, &Package{})
			if err := m.Packages[len(m.Packages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributions = append(m.Distributions, &Distribution{})
			if err := m.Distributions[len(m.Distributions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repositories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repositories = append(m.Repositories, &Repository{})
			if err := m.Repositories[len(m.Repositories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Environments == nil {
				m.Environments = make(map[string]*Environment_List)
			}
			var mapkey string
			var mapvalue *Environment_List
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVulnerabilityReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVulnerabilityReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVulnerabilityReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Environment_List{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVulnerabilityReport(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthVulnerabilityReport
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Environments[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnerabilityReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityReport_Vulnerability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnerabilityReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vulnerability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vulnerability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issued", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issued == nil {
				m.Issued = &types.Timestamp{}
			}
			if err := m.Issued.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalizedSeverity", wireType)
			}
			m.NormalizedSeverity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NormalizedSeverity |= VulnerabilityReport_Vulnerability_Severity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepositoryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedInVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FixedInVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnerabilityReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnerabilityReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnerabilityReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnerabilityReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVulnerabilityReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVulnerabilityReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVulnerabilityReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVulnerabilityReport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVulnerabilityReport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVulnerabilityReport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVulnerabilityReport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVulnerabilityReport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVulnerabilityReport = fmt.Errorf("proto: unexpected end of group")
)
