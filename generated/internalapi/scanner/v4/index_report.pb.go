// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/scanner/v4/index_report.proto

package v4

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IndexReport struct {
	HashId               string    `protobuf:"bytes,1,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	State                string    `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Success              bool      `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Err                  string    `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
	Contents             *Contents `protobuf:"bytes,5,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *IndexReport) Reset()         { *m = IndexReport{} }
func (m *IndexReport) String() string { return proto.CompactTextString(m) }
func (*IndexReport) ProtoMessage()    {}
func (*IndexReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a3455143a5a0b61, []int{0}
}
func (m *IndexReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexReport.Merge(m, src)
}
func (m *IndexReport) XXX_Size() int {
	return m.Size()
}
func (m *IndexReport) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexReport.DiscardUnknown(m)
}

var xxx_messageInfo_IndexReport proto.InternalMessageInfo

func (m *IndexReport) GetHashId() string {
	if m != nil {
		return m.HashId
	}
	return ""
}

func (m *IndexReport) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *IndexReport) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *IndexReport) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *IndexReport) GetContents() *Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *IndexReport) MessageClone() proto.Message {
	return m.Clone()
}
func (m *IndexReport) Clone() *IndexReport {
	if m == nil {
		return nil
	}
	cloned := new(IndexReport)
	*cloned = *m

	cloned.Contents = m.Contents.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*IndexReport)(nil), "scanner.v4.IndexReport")
}

func init() {
	proto.RegisterFile("internalapi/scanner/v4/index_report.proto", fileDescriptor_9a3455143a5a0b61)
}

var fileDescriptor_9a3455143a5a0b61 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcc, 0xcc, 0x2b, 0x49,
	0x2d, 0xca, 0x4b, 0xcc, 0x49, 0x2c, 0xc8, 0xd4, 0x2f, 0x4e, 0x4e, 0xcc, 0xcb, 0x4b, 0x2d, 0xd2,
	0x2f, 0x33, 0xd1, 0xcf, 0xcc, 0x4b, 0x49, 0xad, 0x88, 0x2f, 0x4a, 0x2d, 0xc8, 0x2f, 0x2a, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x82, 0x4a, 0xeb, 0x95, 0x99, 0x48, 0x29, 0xe3, 0xd0,
	0x96, 0x9c, 0x9f, 0x9b, 0x9b, 0x9f, 0x07, 0xd1, 0xa0, 0x34, 0x8b, 0x91, 0x8b, 0xdb, 0x13, 0x64,
	0x4e, 0x10, 0xd8, 0x18, 0x21, 0x71, 0x2e, 0xf6, 0x8c, 0xc4, 0xe2, 0x8c, 0xf8, 0xcc, 0x14, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x36, 0x10, 0xd7, 0x33, 0x45, 0x48, 0x84, 0x8b, 0xb5, 0xb8,
	0x24, 0xb1, 0x24, 0x55, 0x82, 0x09, 0x2c, 0x0c, 0xe1, 0x08, 0x49, 0x70, 0xb1, 0x17, 0x97, 0x26,
	0x27, 0xa7, 0x16, 0x17, 0x4b, 0x30, 0x2b, 0x30, 0x6a, 0x70, 0x04, 0xc1, 0xb8, 0x42, 0x02, 0x5c,
	0xcc, 0xa9, 0x45, 0x45, 0x12, 0x2c, 0x60, 0xd5, 0x20, 0xa6, 0x90, 0x01, 0x17, 0x47, 0x72, 0x7e,
	0x5e, 0x49, 0x6a, 0x5e, 0x49, 0xb1, 0x04, 0xab, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x88, 0x1e, 0xc2,
	0xb9, 0x7a, 0xce, 0x50, 0xb9, 0x20, 0xb8, 0x2a, 0x27, 0x91, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c,
	0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xa6, 0x32, 0x93, 0x24,
	0x36, 0xb0, 0xcb, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xa4, 0xfb, 0x0a, 0x17, 0x01,
	0x00, 0x00,
}

func (m *IndexReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Contents != nil {
		{
			size, err := m.Contents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIndexReport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintIndexReport(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x22
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintIndexReport(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HashId) > 0 {
		i -= len(m.HashId)
		copy(dAtA[i:], m.HashId)
		i = encodeVarintIndexReport(dAtA, i, uint64(len(m.HashId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIndexReport(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndexReport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IndexReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashId)
	if l > 0 {
		n += 1 + l + sovIndexReport(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovIndexReport(uint64(l))
	}
	if m.Success {
		n += 2
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovIndexReport(uint64(l))
	}
	if m.Contents != nil {
		l = m.Contents.Size()
		n += 1 + l + sovIndexReport(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIndexReport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndexReport(x uint64) (n int) {
	return sovIndexReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contents == nil {
				m.Contents = &Contents{}
			}
			if err := m.Contents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndexReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndexReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndexReport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIndexReport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIndexReport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIndexReport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndexReport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIndexReport = fmt.Errorf("proto: unexpected end of group")
)
