// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: internalapi/wrapper/splunk_alert.proto

package wrapper

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Splunk notification needs the source of data
// and the type of data.
type SplunkEvent struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Event      *anypb.Any             `protobuf:"bytes,1,opt,name=event"`
	xxx_hidden_Source     *string                `protobuf:"bytes,2,opt,name=source"`
	xxx_hidden_Sourcetype *string                `protobuf:"bytes,3,opt,name=sourcetype"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SplunkEvent) Reset() {
	*x = SplunkEvent{}
	mi := &file_internalapi_wrapper_splunk_alert_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkEvent) ProtoMessage() {}

func (x *SplunkEvent) ProtoReflect() protoreflect.Message {
	mi := &file_internalapi_wrapper_splunk_alert_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SplunkEvent) GetEvent() *anypb.Any {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Event) {
				protoimpl.X.UnmarshalField(x, 1)
			}
			var rv *anypb.Any
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Event), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *SplunkEvent) GetSource() string {
	if x != nil {
		if x.xxx_hidden_Source != nil {
			return *x.xxx_hidden_Source
		}
		return ""
	}
	return ""
}

func (x *SplunkEvent) GetSourcetype() string {
	if x != nil {
		if x.xxx_hidden_Sourcetype != nil {
			return *x.xxx_hidden_Sourcetype
		}
		return ""
	}
	return ""
}

func (x *SplunkEvent) SetEvent(v *anypb.Any) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Event, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
	}
}

func (x *SplunkEvent) SetSource(v string) {
	x.xxx_hidden_Source = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *SplunkEvent) SetSourcetype(v string) {
	x.xxx_hidden_Sourcetype = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *SplunkEvent) HasEvent() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SplunkEvent) HasSource() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SplunkEvent) HasSourcetype() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SplunkEvent) ClearEvent() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Event, (*anypb.Any)(nil))
}

func (x *SplunkEvent) ClearSource() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Source = nil
}

func (x *SplunkEvent) ClearSourcetype() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Sourcetype = nil
}

type SplunkEvent_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Event      *anypb.Any
	Source     *string
	Sourcetype *string
}

func (b0 SplunkEvent_builder) Build() *SplunkEvent {
	m0 := &SplunkEvent{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Event != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Event = b.Event
	}
	if b.Source != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Source = b.Source
	}
	if b.Sourcetype != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Sourcetype = b.Sourcetype
	}
	return m0
}

var File_internalapi_wrapper_splunk_alert_proto protoreflect.FileDescriptor

const file_internalapi_wrapper_splunk_alert_proto_rawDesc = "" +
	"\n" +
	"&internalapi/wrapper/splunk_alert.proto\x12\awrapper\x1a\x19google/protobuf/any.proto\x1a!google/protobuf/go_features.proto\"u\n" +
	"\vSplunkEvent\x12.\n" +
	"\x05event\x18\x01 \x01(\v2\x14.google.protobuf.AnyB\x02(\x01R\x05event\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x1e\n" +
	"\n" +
	"sourcetype\x18\x03 \x01(\tR\n" +
	"sourcetypeB'Z\x1d./internalapi/wrapper;wrapper\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_internalapi_wrapper_splunk_alert_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_internalapi_wrapper_splunk_alert_proto_goTypes = []any{
	(*SplunkEvent)(nil), // 0: wrapper.SplunkEvent
	(*anypb.Any)(nil),   // 1: google.protobuf.Any
}
var file_internalapi_wrapper_splunk_alert_proto_depIdxs = []int32{
	1, // 0: wrapper.SplunkEvent.event:type_name -> google.protobuf.Any
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_internalapi_wrapper_splunk_alert_proto_init() }
func file_internalapi_wrapper_splunk_alert_proto_init() {
	if File_internalapi_wrapper_splunk_alert_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internalapi_wrapper_splunk_alert_proto_rawDesc), len(file_internalapi_wrapper_splunk_alert_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internalapi_wrapper_splunk_alert_proto_goTypes,
		DependencyIndexes: file_internalapi_wrapper_splunk_alert_proto_depIdxs,
		MessageInfos:      file_internalapi_wrapper_splunk_alert_proto_msgTypes,
	}.Build()
	File_internalapi_wrapper_splunk_alert_proto = out.File
	file_internalapi_wrapper_splunk_alert_proto_goTypes = nil
	file_internalapi_wrapper_splunk_alert_proto_depIdxs = nil
}
